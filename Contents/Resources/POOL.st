Trait named: #TNewcomer	uses: {}	category: 'POOL'!!TNewcomer methodsFor: 'testing' stamp: 'JeroenHeymans 1/4/2012 14:55'!isValidNominee: anArtist 	Date today year - anArtist activeSince < 3		ifTrue: [^ super isValidNominee: anArtist]		ifFalse: [^ false]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TNewcomer classTrait	uses: {}!Trait named: #TOutput	uses: {}	category: 'POOL'!!TOutput methodsFor: 'as yet unclassified' stamp: 'JeroenHeymans 1/11/2012 09:51'!error: aMessage	Transcript show: ' => ERROR: '; show: aMessage; cr! !!TOutput methodsFor: 'as yet unclassified' stamp: 'JeroenHeymans 1/11/2012 09:51'!notice: aMessage	Transcript show: aMessage; cr! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TOutput classTrait	uses: {}!Object subclass: #Artist	uses: TOutput	instanceVariableNames: 'activeSince awardsWon artistName'	classVariableNames: ''	poolDictionaries: ''	category: 'POOL'!!Artist methodsFor: 'accessing' stamp: 'JeroenHeymans 1/13/2012 23:30'!activeSince	^ activeSince ifNil: [activeSince := Year now]! !!Artist methodsFor: 'accessing' stamp: 'JeroenHeymans 12/30/2011 14:12'!activeSince: anObject	activeSince := anObject! !!Artist methodsFor: 'accessing' stamp: 'JeroenHeymans 1/16/2012 22:33'!allAwardsWon	^ awardsWon ifNil: [awardsWon := LinkedList new]! !!Artist methodsFor: 'accessing' stamp: 'JeroenHeymans 1/13/2012 23:30'!artistName	^ artistName ifNil: [artistName := '']! !!Artist methodsFor: 'accessing' stamp: 'JeroenHeymans 12/30/2011 14:22'!artistName: anObject	artistName := anObject! !!Artist methodsFor: 'accessing' stamp: 'JeroenHeymans 1/16/2012 22:33'!awardsWon	^ awardsWon ifNil: [awardsWon := LinkedList new]! !!Artist methodsFor: 'accessing' stamp: 'JeroenHeymans 12/30/2011 14:12'!awardsWon: anObject	awardsWon := anObject! !!Artist methodsFor: 'initialization' stamp: 'JeroenHeymans 1/13/2012 23:30'!initialize	super initialize.! !!Artist methodsFor: 'as yet unclassified' stamp: 'JeroenHeymans 1/16/2012 22:33'!addAward: anAward	self allAwardsWon add: anAward.! !!Artist methodsFor: 'as yet unclassified' stamp: 'JeroenHeymans 1/16/2012 22:43'!addToJury: category	"We do not allow the adding of the self to a category, only Solo is allowed"	self error: 'Jury members must be solo artists'! !!Artist methodsFor: 'as yet unclassified' stamp: 'JeroenHeymans 1/14/2012 00:51'!artistName: anArtistName activeSince: active	self notice: 'Created artist ', anArtistName.	self artistName: anArtistName.	self activeSince: active.	^self! !!Artist methodsFor: 'as yet unclassified' stamp: 'JeroenHeymans 1/4/2012 14:57'!asString 	^ self artistName.! !!Artist methodsFor: 'as yet unclassified'!error: aMessage	Transcript show: ' => ERROR: '; show: aMessage; cr! !!Artist methodsFor: 'as yet unclassified'!notice: aMessage	Transcript show: aMessage; cr! !!Artist methodsFor: 'comparing' stamp: 'JeroenHeymans 1/16/2012 22:01'!= anObject	"Answer whether the receiver and anObject represent the same object."	self == anObject		ifTrue: [ ^ true ].	self class = anObject class		ifFalse: [ ^ false ].	^ artistName = anObject artistName! !!Artist methodsFor: 'comparing' stamp: 'JeroenHeymans 1/16/2012 22:01'!hash	"Answer an integer value that is related to the identity of the receiver."	^ artistName hash! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Artist class	uses: TOutput classTrait	instanceVariableNames: ''!Object subclass: #Category	uses: TOutput	instanceVariableNames: 'nominees jury awardName votes juryVoted'	classVariableNames: ''	poolDictionaries: ''	category: 'POOL'!!Category methodsFor: 'as yet unclassified' stamp: 'JeroenHeymans 1/13/2012 23:50'!addJuryMember: anArtist	^anArtist addToJury: self! !!Category methodsFor: 'as yet unclassified' stamp: 'JeroenHeymans 1/16/2012 22:48'!addNominee: anArtist 	"Adding of nominee is only allowed if size < 5, nominee is valid (automatic check on type and activesince),	nominee is no jury member"	self nominees size < 5		ifTrue: [(self isValidNominee: anArtist)				ifTrue: [(self jury includes: anArtist)						ifTrue: [self error: 'Jury members can not be nominated']						ifFalse: [self nominees add: anArtist.							self notice: 'Nominated ', anArtist asString, ' for the award ', self awardName]]				ifFalse: [self error: anArtist asString, ' is not a valid nominee for the award ', self awardName]]		ifFalse: [self error: 'Already 5 nominees for the award ', self awardName]! !!Category methodsFor: 'as yet unclassified' stamp: 'JeroenHeymans 12/30/2011 20:32'!asString	^self awardName! !!Category methodsFor: 'as yet unclassified'!error: aMessage	Transcript show: ' => ERROR: '; show: aMessage; cr! !!Category methodsFor: 'as yet unclassified' stamp: 'JeroenHeymans 1/14/2012 00:37'!initialize 	super initialize.	self notice: 'Created award'! !!Category methodsFor: 'as yet unclassified' stamp: 'JeroenHeymans 1/16/2012 22:49'!isValidNominee: artist	"standardly, we accept all the artists as valid, in the subclasses this is refined"	^true! !!Category methodsFor: 'as yet unclassified'!notice: aMessage	Transcript show: aMessage; cr! !!Category methodsFor: 'as yet unclassified' stamp: 'JeroenHeymans 1/16/2012 22:51'!vote: aVotee by: aVoter 	"aVoter votes for aVotee in self category. We only allow votes when the number of nominees is 5, 	aVotee is a nominee, aVoter is in the jury, aVoter has not already voted "	self nominees size == 5		ifTrue: [(self nominees includes: aVotee)				ifFalse: [self error: aVotee asString , ' is not a nominee in the category ' , awardName. ^ self].			(self jury includes: aVoter)				ifFalse: [self error: aVoter asString , ' is not a jury member in the category ' , awardName. ^ self].			(self juryVoted includes: aVoter artistName)				ifTrue: [self error: aVoter asString , ' has already voted in the category ' , awardName. ^ self].			(self votes includesKey: aVotee)				ifTrue: [self votes at: aVotee put: ((self votes at: aVotee) + 1)] 				ifFalse: [self votes at: aVotee put: 1].			self juryVoted add: aVoter artistName.			self notice: aVoter asString , ' voted for ' , aVotee asString , ' in the category ' , awardName.			^ self]		ifFalse: [self error: 'There must be 5 nominees before you can vote']! !!Category methodsFor: 'as yet unclassified' stamp: 'JeroenHeymans 1/16/2012 22:51'!voteResults	"Show the amount of votes that were given and to whom"	| artistWon artistWonCount |	artistWon := ''.	artistWonCount := 0.	self juryVoted size == 5		ifTrue: [self notice: 'We have results!!'.			self nominees				do: [:nominee | 					((self votes at: nominee ifAbsent: 0) > artistWonCount)					ifTrue: [artistWon := nominee. artistWonCount := self votes at: nominee].					self notice: nominee artistName , ': ' , (self votes at: nominee ifAbsent: 0) asString].				artistWon addAward: self.				self notice: 'Winner: ', artistWon asString]		ifFalse: [self notice: 'Not enough votes!!']! !!Category methodsFor: 'accessing' stamp: 'JeroenHeymans 12/30/2011 19:34'!awardName	^ awardName! !!Category methodsFor: 'accessing' stamp: 'JeroenHeymans 12/30/2011 19:34'!awardName: anObject	awardName := anObject! !!Category methodsFor: 'accessing' stamp: 'JeroenHeymans 1/13/2012 23:29'!jury	^ jury ifNil: [jury := LinkedList new]! !!Category methodsFor: 'accessing' stamp: 'JeroenHeymans 12/30/2011 18:39'!jury: anObject	jury := anObject! !!Category methodsFor: 'accessing' stamp: 'JeroenHeymans 1/16/2012 22:09'!juryVoted	^ juryVoted ifNil: [juryVoted := LinkedList new]! !!Category methodsFor: 'accessing' stamp: 'JeroenHeymans 1/16/2012 21:49'!juryVoted: anObject	juryVoted := anObject! !!Category methodsFor: 'accessing' stamp: 'JeroenHeymans 1/13/2012 23:29'!nominees	^ nominees ifNil: [nominees := LinkedList new]! !!Category methodsFor: 'accessing' stamp: 'JeroenHeymans 12/30/2011 17:49'!nominees: anObject	nominees := anObject! !!Category methodsFor: 'accessing' stamp: 'JeroenHeymans 1/16/2012 21:53'!votes	^ votes ifNil: [votes := Dictionary new]! !!Category methodsFor: 'accessing' stamp: 'JeroenHeymans 12/31/2011 11:05'!votes: anObject	votes := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Category class	uses: TOutput classTrait	instanceVariableNames: ''!Category subclass: #SoloCategory	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'POOL'!!SoloCategory methodsFor: 'as yet unclassified' stamp: 'JeroenHeymans 12/30/2011 18:43'!initialize 	super initialize ! !!SoloCategory methodsFor: 'as yet unclassified' stamp: 'JeroenHeymans 12/30/2011 17:46'!isValidNominee: anArtist	 ^ (anArtist class == Solo)! !Artist subclass: #Solo	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'POOL'!!Solo methodsFor: 'accessing' stamp: 'JeroenHeymans 1/16/2012 22:33'!allAwardsWon	 ^ awardsWon ifNil: [awardsWon := LinkedList new]! !!Solo methodsFor: 'as yet unclassified' stamp: 'JeroenHeymans 1/16/2012 22:47'!addToJury: category 	"add self to the jury from category. Only allowed if jury is not yet full and self is no nominee"	^ category jury size < 5		ifTrue: [(category nominees includes: self)				ifFalse: [category jury add: self.					self notice: 'Added ' , self artistName , ' to the jury of ' , category awardName]]		ifFalse: [self error: 'Maximum number of jury members reached']! !Category subclass: #MixedCategory	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'POOL'!!MixedCategory methodsFor: 'as yet unclassified' stamp: 'JeroenHeymans 12/30/2011 18:43'!initialize 	super initialize ! !MixedCategory subclass: #NewcomerMixedCategory	uses: TNewcomer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'POOL'!!NewcomerMixedCategory methodsFor: 'testing'!isValidNominee: anArtist 	Date today year - anArtist activeSince < 3		ifTrue: [^ super isValidNominee: anArtist]		ifFalse: [^ false]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!NewcomerMixedCategory class	uses: TNewcomer classTrait	instanceVariableNames: ''!SoloCategory subclass: #NewcomerSoloCategory	uses: TNewcomer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'POOL'!!NewcomerSoloCategory methodsFor: 'testing'!isValidNominee: anArtist 	Date today year - anArtist activeSince < 3		ifTrue: [^ super isValidNominee: anArtist]		ifFalse: [^ false]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!NewcomerSoloCategory class	uses: TNewcomer classTrait	instanceVariableNames: ''!Category subclass: #BandCategory	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'POOL'!!BandCategory methodsFor: 'as yet unclassified' stamp: 'JeroenHeymans 12/30/2011 18:43'!initialize 	super initialize ! !!BandCategory methodsFor: 'as yet unclassified' stamp: 'JeroenHeymans 1/16/2012 22:52'!isValidNominee: anArtist	 ^ (anArtist isKindOf: Band)! !BandCategory subclass: #NewcomerBandCategory	uses: TNewcomer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'POOL'!!NewcomerBandCategory methodsFor: 'testing' stamp: 'JeroenHeymans 1/16/2012 22:52'!isValidNominee: anArtist 	"we only allow newcomers (active for max. 3 years)"	Date today year - anArtist activeSince < 3		ifTrue: [^ super isValidNominee: anArtist]		ifFalse: [^ false]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!NewcomerBandCategory class	uses: TNewcomer classTrait	instanceVariableNames: ''!Object subclass: #Ceremony	uses: TOutput	instanceVariableNames: 'awards ceremonyName'	classVariableNames: ''	poolDictionaries: ''	category: 'POOL'!!Ceremony methodsFor: 'accessing' stamp: 'JeroenHeymans 1/13/2012 23:28'!awards	^ awards ifNil: [awards := LinkedList new]! !!Ceremony methodsFor: 'accessing' stamp: 'JeroenHeymans 12/30/2011 19:25'!awards: anObject	awards := anObject! !!Ceremony methodsFor: 'accessing' stamp: 'JeroenHeymans 1/13/2012 23:28'!ceremonyName	^ ceremonyName ifNil: [ceremonyName := '']! !!Ceremony methodsFor: 'accessing' stamp: 'JeroenHeymans 12/30/2011 20:07'!ceremonyName: anObject	ceremonyName := anObject! !!Ceremony methodsFor: 'as yet unclassified' stamp: 'JeroenHeymans 12/30/2011 19:33'!addAward: anAward	self awards add: anAward! !!Ceremony methodsFor: 'as yet unclassified' stamp: 'JeroenHeymans 12/30/2011 20:09'!asString 	^ self ceremonyName! !!Ceremony methodsFor: 'as yet unclassified'!error: aMessage	Transcript show: ' => ERROR: '; show: aMessage; cr! !!Ceremony methodsFor: 'as yet unclassified' stamp: 'JeroenHeymans 1/13/2012 23:28'!initialize 	super initialize.! !!Ceremony methodsFor: 'as yet unclassified'!notice: aMessage	Transcript show: aMessage; cr! !!Ceremony methodsFor: 'as yet unclassified' stamp: 'JeroenHeymans 1/16/2012 22:52'!printAwardsWon: anArtist 	"pretty print of all the awards won by given artist"	self notice: anArtist artistName , ' won: '.	anArtist allAwardsWon		do: [:award | self notice: '- ' , award awardName]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Ceremony class	uses: TOutput classTrait	instanceVariableNames: ''!Artist subclass: #Band	instanceVariableNames: 'members'	classVariableNames: ''	poolDictionaries: ''	category: 'POOL'!!Band methodsFor: 'accessing' stamp: 'JeroenHeymans 1/11/2012 09:53'!members	^ members ifNil: [members := Bag new]! !!Band methodsFor: 'accessing' stamp: 'JeroenHeymans 12/30/2011 15:05'!members: anObject	members := anObject! !!Band methodsFor: 'as yet unclassified' stamp: 'JeroenHeymans 1/16/2012 22:46'!addMember: member 	"we only allow members from the type Solo"	(member isKindOf: Solo)		ifTrue: [self members add: member.			self notice: 'Added artist ' , member artistName , ' to band ' , self artistName]		ifFalse: [self error: 'New member of a band must be of type Solo']! !!Band methodsFor: 'as yet unclassified' stamp: 'JeroenHeymans 1/16/2012 22:46'!allAwardsWon	"collect all the awards won by the band and add the awards from the members"	| allAwards |	allAwards := self awardsWon.	self members		do: [:member | member allAwardsWon				do: [:award | allAwards add: award]].	^ allAwards! !!Band methodsFor: 'as yet unclassified' stamp: 'JeroenHeymans 1/11/2012 09:53'!initialize	super initialize! !