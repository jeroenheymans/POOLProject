THERE_BE_DRAGONS_HERE
Error: Invalid definition string
18 December 2011 9:56:41 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

RBRefactoryDefinitionChange class(Object)>>error:
	Receiver: RBRefactoryDefinitionChange
	Arguments and temporary variables: 
		aString: 	'Invalid definition string'
	Receiver's instance variables: 
		superclass: 	RBRefactoryClassChange
		methodDict: 	a MethodDictionary(#=->(RBRefactoryDefinitionChange>>#= "a Compiled...etc...
		format: 	142
		instanceVariables: 	#('controller' 'definition' 'definedClass')
		organization: 	('accessing' controller definedClass definition)
('comparing' = h...etc...
		subclasses: 	{RBAddClassChange. RBAddClassTraitChange. RBAddMetaclassChange. RBA...etc...
		name: 	#RBRefactoryDefinitionChange
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Refactoring-Changes'
		traitComposition: 	{}
		localSelectors: 	nil


RBRefactoryDefinitionChange class>>definition:for:
	Receiver: RBRefactoryDefinitionChange
	Arguments and temporary variables: 
		aString: 	a Text for 'Object subclass: Artist
	instanceVariableNames: ''''
	clas...etc...
		aController: 	an OBPluggableTextMorph(815005696)
		parseTree: 	RBMessageNode(Object
	subclass: Artist
	instanceVariableNames: ''
	c...etc...
		context: 	a RBSmallDictionary
	Receiver's instance variables: 
		superclass: 	RBRefactoryClassChange
		methodDict: 	a MethodDictionary(#=->(RBRefactoryDefinitionChange>>#= "a Compiled...etc...
		format: 	142
		instanceVariables: 	#('controller' 'definition' 'definedClass')
		organization: 	('accessing' controller definedClass definition)
('comparing' = h...etc...
		subclasses: 	{RBAddClassChange. RBAddClassTraitChange. RBAddMetaclassChange. RBA...etc...
		name: 	#RBRefactoryDefinitionChange
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Refactoring-Changes'
		traitComposition: 	{}
		localSelectors: 	nil


ORClassDefinition>>defineClass:notifying:
	Receiver: an ORClassDefinition
	Arguments and temporary variables: 
		definition: 	a Text for 'Object subclass: Artist
	instanceVariableNames: ''''
	c...etc...
		aController: 	an OBPluggableTextMorph(815005696)
		change: 	nil
	Receiver's instance variables: 
		environment: 	Smalltalk
		template: 	'Object subclass: #NameOfSubclass
	instanceVariableNames: ''''
	class...etc...


ORClassDefinition(OBClassDefinition)>>accept:notifying:
	Receiver: an ORClassDefinition
	Arguments and temporary variables: 
		aText: 	a Text for 'Object subclass: Artist
	instanceVariableNames: ''''
	classV...etc...
		aController: 	an OBPluggableTextMorph(815005696)
	Receiver's instance variables: 
		environment: 	Smalltalk
		template: 	'Object subclass: #NameOfSubclass
	instanceVariableNames: ''''
	class...etc...


[def accept: aText notifying: aController] in [:def | [def accept: aText notifying: aController]
		on: OBAnnouncerRequest
		do: [:notification | notification resume: self announcer]] in OBDefinitionPanel>>accept:notifying:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		aText: 	an ORClassDefinition
		aController: 	a Text for 'Object subclass: Artist
	instanceVariableNames: ''''
	...etc...
		def: 	an OBPluggableTextMorph(815005696)
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORClassDefinition
		selection: 	(1 to: 0)


BlockClosure>>on:do:
	Receiver: [def accept: aText notifying: aController]
	Arguments and temporary variables: 
		exception: 	OBAnnouncerRequest
		handlerAction: 	[:notification | notification resume: self announcer]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[:def | [def accept: aText notifying: aController]
		on: OBAnnoun...etc...
		startpc: 	51
		numArgs: 	0


[:def | [def accept: aText notifying: aController]
		on: OBAnnouncerRequest
		do: [:notification | notification resume: self announcer]] in OBDefinitionPanel>>accept:notifying:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		aText: 	an ORClassDefinition
		aController: 	a Text for 'Object subclass: Artist
	instanceVariableNames: ''''
	...etc...
		def: 	an OBPluggableTextMorph(815005696)
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORClassDefinition
		selection: 	(1 to: 0)


OBDefinitionPanel>>withDefinitionDo:ifNil:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		workBlock: 	[:def | [def accept: aText notifying: aController]
		on: OBAnnouncer...etc...
		nilBlock: 	[true]
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORClassDefinition
		selection: 	(1 to: 0)


OBDefinitionPanel>>accept:notifying:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		aText: 	a Text for 'Object subclass: Artist
	instanceVariableNames: ''''
	classV...etc...
		aController: 	an OBPluggableTextMorph(815005696)
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORClassDefinition
		selection: 	(1 to: 0)


[^ setTextSelector isNil
		or: [setTextSelector numArgs = 2
				ifTrue: [model
						perform: setTextSelector
						with: acceptedText
						with: self]
				ifFalse: [model perform: setTextSelector with: acceptedText]]] in OBPluggableTextMorph(PluggableTextMorph)>>acceptTextInModel
	Receiver: an OBPluggableTextMorph(815005696)
	Arguments and temporary variables: 
		acceptedText: 	a Text for 'Object subclass: Artist
	instanceVariableNames: ''''
...etc...
	Receiver's instance variables: 
		bounds: 	534@314 corner: 1224@565
		owner: 	an OBGroupingMorph(226230272)
		submorphs: 	an Array(a TransformMorph(861929472))
		fullBounds: 	534@314 corner: 1224@565
		color: 	Color white
		extension: 	a MorphExtension (700973056)
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(842530816)
		scroller: 	a TransformMorph(861929472)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(858521600)
		textMorph: 	an OBTextMorph(722206720)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(115 to: 114)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


BlockClosure>>ensure:
	Receiver: [^ setTextSelector isNil
		or: [setTextSelector numArgs = 2
				ifTrue: [model
						perfo...etc...
	Arguments and temporary variables: 
		aBlock: 	[unstyledAcceptText := nil]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBPluggableTextMorph(PluggableTextMorph)>>acceptTextInModel
		startpc: 	65
		numArgs: 	0


OBPluggableTextMorph(PluggableTextMorph)>>acceptTextInModel
	Receiver: an OBPluggableTextMorph(815005696)
	Arguments and temporary variables: 
		acceptedText: 	a Text for 'Object subclass: Artist
	instanceVariableNames: ''''
...etc...
	Receiver's instance variables: 
		bounds: 	534@314 corner: 1224@565
		owner: 	an OBGroupingMorph(226230272)
		submorphs: 	an Array(a TransformMorph(861929472))
		fullBounds: 	534@314 corner: 1224@565
		color: 	Color white
		extension: 	a MorphExtension (700973056)
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(842530816)
		scroller: 	a TransformMorph(861929472)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(858521600)
		textMorph: 	an OBTextMorph(722206720)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(115 to: 114)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


OBPluggableTextMorph(PluggableTextMorph)>>acceptBasic
	Receiver: an OBPluggableTextMorph(815005696)
	Arguments and temporary variables: 
		ok: 	nil
		saveSelection: 	(115 to: 114)
		saveScrollerOffset: 	-3@0
	Receiver's instance variables: 
		bounds: 	534@314 corner: 1224@565
		owner: 	an OBGroupingMorph(226230272)
		submorphs: 	an Array(a TransformMorph(861929472))
		fullBounds: 	534@314 corner: 1224@565
		color: 	Color white
		extension: 	a MorphExtension (700973056)
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(842530816)
		scroller: 	a TransformMorph(861929472)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(858521600)
		textMorph: 	an OBTextMorph(722206720)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(115 to: 114)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


OBPluggableTextMorph(PluggableTextMorph)>>accept
	Receiver: an OBPluggableTextMorph(815005696)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	534@314 corner: 1224@565
		owner: 	an OBGroupingMorph(226230272)
		submorphs: 	an Array(a TransformMorph(861929472))
		fullBounds: 	534@314 corner: 1224@565
		color: 	Color white
		extension: 	a MorphExtension (700973056)
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(842530816)
		scroller: 	a TransformMorph(861929472)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(858521600)
		textMorph: 	an OBTextMorph(722206720)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(115 to: 114)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


OBTextMorphSelection>>accept
	Receiver: an OBTextMorphSelection
	Arguments and temporary variables: 

	Receiver's instance variables: 
		selection: 	(115 to: 114)
		text: 	a Text for 'Object subclass: Artist
	instanceVariableNames: ''''
	classVa...etc...
		morph: 	an OBPluggableTextMorph(815005696)


OBAcceptTextCommand>>execute
	Receiver: an OBAcceptTextCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	an OBTextMorphSelection
		requestor: 	an OBDefinitionPanel


OBAcceptTextCommand(OBCommand)>>perform:orSendTo:
	Receiver: an OBAcceptTextCommand
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableTextMorph(815005696)
	Receiver's instance variables: 
		target: 	an OBTextMorphSelection
		requestor: 	an OBDefinitionPanel


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(908591104)'Accept'
	Arguments and temporary variables: 
		evt: 	[695@605 mouseUp 2788941 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	661@602 corner: 849@620
		owner: 	a MenuMorph(967311360)
		submorphs: 	#()
		fullBounds: 	661@602 corner: 849@620
		color: 	Color black
		extension: 	a MorphExtension (918814720)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Accept'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBAcceptTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(815005696))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+s'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(908591104)'Accept'
	Arguments and temporary variables: 
		evt: 	[695@605 mouseUp 2788941 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	661@602 corner: 849@620
		owner: 	a MenuMorph(967311360)
		submorphs: 	#()
		fullBounds: 	661@602 corner: 849@620
		color: 	Color black
		extension: 	a MorphExtension (918814720)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Accept'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBAcceptTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(815005696))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+s'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(908591104)'Accept'
	Arguments and temporary variables: 
		evt: 	[695@605 mouseUp 2788941 nil]
	Receiver's instance variables: 
		bounds: 	661@602 corner: 849@620
		owner: 	a MenuMorph(967311360)
		submorphs: 	#()
		fullBounds: 	661@602 corner: 849@620
		color: 	Color black
		extension: 	a MorphExtension (918814720)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Accept'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBAcceptTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(815005696))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+s'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(908591104)'Accept'
	Arguments and temporary variables: 
		anEvent: 	[695@605 mouseUp 2788941 nil]
	Receiver's instance variables: 
		bounds: 	661@602 corner: 849@620
		owner: 	a MenuMorph(967311360)
		submorphs: 	#()
		fullBounds: 	661@602 corner: 849@620
		color: 	Color black
		extension: 	a MorphExtension (918814720)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Accept'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBAcceptTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(815005696))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+s'


MouseButtonEvent>>sentTo:
	Receiver: [695@605 mouseUp 2788941 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(908591104)'Accept'
	Receiver's instance variables: 
		timeStamp: 	2788941
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	695@605
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(908591104)'Accept'
	Arguments and temporary variables: 
		anEvent: 	[695@605 mouseUp 2788941 nil]
	Receiver's instance variables: 
		bounds: 	661@602 corner: 849@620
		owner: 	a MenuMorph(967311360)
		submorphs: 	#()
		fullBounds: 	661@602 corner: 849@620
		color: 	Color black
		extension: 	a MorphExtension (918814720)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Accept'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBAcceptTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(815005696))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+s'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[695@605 mouseUp 2788941 nil]
		aMorph: 	a ToggleMenuItemMorph(908591104)'Accept'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[695@605 mouseUp 2788941 nil]
		aMorph: 	a ToggleMenuItemMorph(908591104)'Accept'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(908591104)'Accept'
	Arguments and temporary variables: 
		anEvent: 	[695@605 mouseUp 2788941 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	661@602 corner: 849@620
		owner: 	a MenuMorph(967311360)
		submorphs: 	#()
		fullBounds: 	661@602 corner: 849@620
		color: 	Color black
		extension: 	a MorphExtension (918814720)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Accept'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBAcceptTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(815005696))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+s'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[695@605 mouseUp 2788941 nil]
		aMorph: 	a MenuMorph(967311360)
		localEvt: 	[695@605 mouseUp 2788941 nil]
		index: 	19
		child: 	a ToggleMenuItemMorph(908591104)'Accept'
		morphs: 	an Array(a ToggleMenuItemMorph(735051776)'Redo' a ToggleMenuItemMorph(8...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[695@605 mouseUp 2788941 nil]
		aMorph: 	a MenuMorph(967311360)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(967311360)
	Arguments and temporary variables: 
		anEvent: 	[695@605 mouseUp 2788941 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	656@339 corner: 854@644
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(735051776)'Redo' a ToggleMenuItemMorp...etc...
		fullBounds: 	656@339 corner: 854@644
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (982253568) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBDefinitionPanel
		selectedItem: 	a ToggleMenuItemMorph(908591104)'Accept'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(735051776)'Redo' a Toggle...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(967311360)
	Arguments and temporary variables: 
		anEvent: 	[695@605 mouseUp 2788941 nil]
	Receiver's instance variables: 
		bounds: 	656@339 corner: 854@644
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(735051776)'Redo' a ToggleMenuItemMorp...etc...
		fullBounds: 	656@339 corner: 854@644
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (982253568) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBDefinitionPanel
		selectedItem: 	a ToggleMenuItemMorph(908591104)'Accept'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(735051776)'Redo' a Toggle...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(967311360)
	Arguments and temporary variables: 
		evt: 	[695@605 mouseUp 2788941 nil]
	Receiver's instance variables: 
		bounds: 	656@339 corner: 854@644
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(735051776)'Redo' a ToggleMenuItemMorp...etc...
		fullBounds: 	656@339 corner: 854@644
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (982253568) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBDefinitionPanel
		selectedItem: 	a ToggleMenuItemMorph(908591104)'Accept'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(735051776)'Redo' a Toggle...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[695@605 mouseUp 2788941 nil]
		focusHolder: 	a MenuMorph(967311360)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	695@605 corner: 711@621
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1057751040)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[695@605 mouseUp 2788941 nil]
		targetOffset: 	34@3
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2788941 695 605 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(692584448) an OB...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[695@605 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(692584448) an OB...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[695@605 mouseUp 2788941 nil]
		focusHolder: 	a MenuMorph(967311360)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	695@605 corner: 711@621
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1057751040)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[695@605 mouseUp 2788941 nil]
		targetOffset: 	34@3
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2788941 695 605 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[695@605 mouseUp 2788941 nil]
		focusHolder: 	a MenuMorph(967311360)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	695@605 corner: 711@621
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1057751040)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[695@605 mouseUp 2788941 nil]
		targetOffset: 	34@3
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2788941 695 605 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil



--- The full stack ---
RBRefactoryDefinitionChange class(Object)>>error:
RBRefactoryDefinitionChange class>>definition:for:
ORClassDefinition>>defineClass:notifying:
ORClassDefinition(OBClassDefinition)>>accept:notifying:
[def accept: aText notifying: aController] in [:def | [def accept: aText notifying: aController]
		on: OBAnnouncerRequest
		do: [:notification | notification resume: self announcer]] in OBDefinitionPanel>>accept:notifying:
BlockClosure>>on:do:
[:def | [def accept: aText notifying: aController]
		on: OBAnnouncerRequest
		do: [:notification | notification resume: self announcer]] in OBDefinitionPanel>>accept:notifying:
OBDefinitionPanel>>withDefinitionDo:ifNil:
OBDefinitionPanel>>accept:notifying:
[^ setTextSelector isNil
		or: [setTextSelector numArgs = 2
				ifTrue: [model
						perform: setTextSelector
						with: acceptedText
						with: self]
				ifFalse: [model perform: setTextSelector with: acceptedText]]] in OBPluggableTextMorph(PluggableTextMorph)>>acceptTextInModel
BlockClosure>>ensure:
OBPluggableTextMorph(PluggableTextMorph)>>acceptTextInModel
OBPluggableTextMorph(PluggableTextMorph)>>acceptBasic
OBPluggableTextMorph(PluggableTextMorph)>>accept
OBTextMorphSelection>>accept
OBAcceptTextCommand>>execute
OBAcceptTextCommand(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
OBPluggableTextMorph(PluggableTextMorph)>>yellowButtonActivity:
OBTextMorph(TextMorphForEditView)>>mouseDown:
OBTextMorph(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
OBTextMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBPluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBGroupingMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBSystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Artist>>activeSince:
30 December 2011 2:07:41 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

Artist(Object)>>doesNotUnderstand: #activeSince:
	Receiver: an Artist
	Arguments and temporary variables: 
		aMessage: 	activeSince: 0
		exception: 	MessageNotUnderstood: Artist>>activeSince:
		resumeValue: 	nil
	Receiver's instance variables: 
		activeSince: 	nil
		name: 	nil
		awardsWon: 	nil


Artist>>initialize
	Receiver: an Artist
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeSince: 	nil
		name: 	nil
		awardsWon: 	nil


Artist class(Behavior)>>new
	Receiver: Artist
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#initialize->(Artist>>#initialize "a CompiledMet...etc...
		format: 	136
		instanceVariables: 	#('activeSince' 'name' 'awardsWon')
		organization: 	('as yet unclassified' initialize)

		subclasses: 	{Band. Solo}
		name: 	#Artist
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#POOL
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| a |
Artist new'
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ Artist new
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(584318976)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| a |
Artist new'
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	201@516 corner: 641@683
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	201@516 corner: 641@683
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(7 to: 16)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	201@516 corner: 641@683
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	201@516 corner: 641@683
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(7 to: 16)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@34
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@34
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| a |
Artist new'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	201@516 corner: 641@683
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	201@516 corner: 641@683
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(7 to: 16)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	201@516 corner: 641@683
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	201@516 corner: 641@683
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(7 to: 16)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| a |
Artist new'
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(44040192)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[343@362 mouseUp 2445241 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	274@362 corner: 411@380
		owner: 	a MenuMorph(1061683200)
		submorphs: 	#()
		fullBounds: 	274@362 corner: 411@380
		color: 	Color black
		extension: 	a MorphExtension (54263808)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(44040192)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[343@362 mouseUp 2445241 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	274@362 corner: 411@380
		owner: 	a MenuMorph(1061683200)
		submorphs: 	#()
		fullBounds: 	274@362 corner: 411@380
		color: 	Color black
		extension: 	a MorphExtension (54263808)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(44040192)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[343@362 mouseUp 2445241 nil]
	Receiver's instance variables: 
		bounds: 	274@362 corner: 411@380
		owner: 	a MenuMorph(1061683200)
		submorphs: 	#()
		fullBounds: 	274@362 corner: 411@380
		color: 	Color black
		extension: 	a MorphExtension (54263808)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(44040192)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[343@362 mouseUp 2445241 nil]
	Receiver's instance variables: 
		bounds: 	274@362 corner: 411@380
		owner: 	a MenuMorph(1061683200)
		submorphs: 	#()
		fullBounds: 	274@362 corner: 411@380
		color: 	Color black
		extension: 	a MorphExtension (54263808)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [343@362 mouseUp 2445241 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(44040192)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	2445241
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	343@362
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(44040192)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[343@362 mouseUp 2445241 nil]
	Receiver's instance variables: 
		bounds: 	274@362 corner: 411@380
		owner: 	a MenuMorph(1061683200)
		submorphs: 	#()
		fullBounds: 	274@362 corner: 411@380
		color: 	Color black
		extension: 	a MorphExtension (54263808)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[343@362 mouseUp 2445241 nil]
		aMorph: 	a ToggleMenuItemMorph(44040192)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[343@362 mouseUp 2445241 nil]
		aMorph: 	a ToggleMenuItemMorph(44040192)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(44040192)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[343@362 mouseUp 2445241 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	274@362 corner: 411@380
		owner: 	a MenuMorph(1061683200)
		submorphs: 	#()
		fullBounds: 	274@362 corner: 411@380
		color: 	Color black
		extension: 	a MorphExtension (54263808)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[343@362 mouseUp 2445241 nil]
		aMorph: 	a MenuMorph(1061683200)
		localEvt: 	[343@362 mouseUp 2445241 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(44040192)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(44040192)'Do it (d)' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[343@362 mouseUp 2445241 nil]
		aMorph: 	a MenuMorph(1061683200)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(1061683200)
	Arguments and temporary variables: 
		anEvent: 	[343@362 mouseUp 2445241 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	269@357 corner: 416@704
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(44040192)'Do it (d)' a ToggleMenuItem...etc...
		fullBounds: 	269@357 corner: 416@704
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (2883584) [other:  (basicColor -> (Color r: 0.745 g...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(44040192)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(44040192)'Do it (d)' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(1061683200)
	Arguments and temporary variables: 
		anEvent: 	[343@362 mouseUp 2445241 nil]
	Receiver's instance variables: 
		bounds: 	269@357 corner: 416@704
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(44040192)'Do it (d)' a ToggleMenuItem...etc...
		fullBounds: 	269@357 corner: 416@704
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (2883584) [other:  (basicColor -> (Color r: 0.745 g...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(44040192)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(44040192)'Do it (d)' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(1061683200)
	Arguments and temporary variables: 
		evt: 	[343@362 mouseUp 2445241 nil]
	Receiver's instance variables: 
		bounds: 	269@357 corner: 416@704
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(44040192)'Do it (d)' a ToggleMenuItem...etc...
		fullBounds: 	269@357 corner: 416@704
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (2883584) [other:  (basicColor -> (Color r: 0.745 g...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(44040192)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(44040192)'Do it (d)' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[343@362 mouseUp 2445241 nil]
		focusHolder: 	a MenuMorph(1061683200)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	343@362 corner: 359@378
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	343@362 corner: 359@378
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(523239424)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[343@362 mouseUp 2445241 nil]
		targetOffset: 	74@4
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2445241 343 362 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 932@722
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(155189248) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[343@362 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 932@722
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(155189248) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[343@362 mouseUp 2445241 nil]
		focusHolder: 	a MenuMorph(1061683200)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	343@362 corner: 359@378
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	343@362 corner: 359@378
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(523239424)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[343@362 mouseUp 2445241 nil]
		targetOffset: 	74@4
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2445241 343 362 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[343@362 mouseUp 2445241 nil]
		focusHolder: 	a MenuMorph(1061683200)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	343@362 corner: 359@378
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	343@362 corner: 359@378
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(523239424)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[343@362 mouseUp 2445241 nil]
		targetOffset: 	74@4
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2445241 343 362 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[343@362 mouseUp 2445241 nil]
	Receiver's instance variables: 
		bounds: 	343@362 corner: 359@378
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	343@362 corner: 359@378
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(523239424)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[343@362 mouseUp 2445241 nil]
		targetOffset: 	74@4
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2445241 343 362 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[343@362 mouseUp 2445241 nil]
		evt: 	[343@362 mouseUp 2445241 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	343@362 corner: 359@378
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	343@362 corner: 359@378
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(523239424)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[343@362 mouseUp 2445241 nil]
		targetOffset: 	74@4
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2445241 343 362 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil



--- The full stack ---
Artist(Object)>>doesNotUnderstand: #activeSince:
Artist>>initialize
Artist class(Behavior)>>new
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
PluggableTextMorph(ScrollPane)>>mouseDown:
PluggableTextMorph(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
PluggableTextMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Artist>>activeSince:
30 December 2011 2:07:46 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

Artist(Object)>>doesNotUnderstand: #activeSince:
	Receiver: an Artist
	Arguments and temporary variables: 
		aMessage: 	activeSince: 0
		exception: 	MessageNotUnderstood: Artist>>activeSince:
		resumeValue: 	nil
	Receiver's instance variables: 
		activeSince: 	nil
		name: 	nil
		awardsWon: 	nil


Artist>>initialize
	Receiver: an Artist
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeSince: 	nil
		name: 	nil
		awardsWon: 	nil


Artist class(Behavior)>>new
	Receiver: Artist
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#initialize->(Artist>>#initialize "a CompiledMet...etc...
		format: 	136
		instanceVariables: 	#('activeSince' 'name' 'awardsWon')
		organization: 	('as yet unclassified' initialize)

		subclasses: 	{Band. Solo}
		name: 	#Artist
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#POOL
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| a |
Artist new'
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ Artist new
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(101711872)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| a |
Artist new'
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	201@516 corner: 641@683
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	201@516 corner: 641@683
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(7 to: 16)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	201@516 corner: 641@683
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	201@516 corner: 641@683
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(7 to: 16)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@34
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@34
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| a |
Artist new'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	201@516 corner: 641@683
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	201@516 corner: 641@683
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(7 to: 16)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	201@516 corner: 641@683
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	201@516 corner: 641@683
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(7 to: 16)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| a |
Artist new'
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(406061056)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[445@376 mouseUp 2449705 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	375@362 corner: 512@380
		owner: 	a MenuMorph(398983168)
		submorphs: 	#()
		fullBounds: 	375@362 corner: 512@380
		color: 	Color black
		extension: 	a MorphExtension (416284672)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(406061056)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[445@376 mouseUp 2449705 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	375@362 corner: 512@380
		owner: 	a MenuMorph(398983168)
		submorphs: 	#()
		fullBounds: 	375@362 corner: 512@380
		color: 	Color black
		extension: 	a MorphExtension (416284672)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(406061056)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[445@376 mouseUp 2449705 nil]
	Receiver's instance variables: 
		bounds: 	375@362 corner: 512@380
		owner: 	a MenuMorph(398983168)
		submorphs: 	#()
		fullBounds: 	375@362 corner: 512@380
		color: 	Color black
		extension: 	a MorphExtension (416284672)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(406061056)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[445@376 mouseUp 2449705 nil]
	Receiver's instance variables: 
		bounds: 	375@362 corner: 512@380
		owner: 	a MenuMorph(398983168)
		submorphs: 	#()
		fullBounds: 	375@362 corner: 512@380
		color: 	Color black
		extension: 	a MorphExtension (416284672)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [445@376 mouseUp 2449705 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(406061056)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	2449705
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	445@376
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(406061056)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[445@376 mouseUp 2449705 nil]
	Receiver's instance variables: 
		bounds: 	375@362 corner: 512@380
		owner: 	a MenuMorph(398983168)
		submorphs: 	#()
		fullBounds: 	375@362 corner: 512@380
		color: 	Color black
		extension: 	a MorphExtension (416284672)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[445@376 mouseUp 2449705 nil]
		aMorph: 	a ToggleMenuItemMorph(406061056)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[445@376 mouseUp 2449705 nil]
		aMorph: 	a ToggleMenuItemMorph(406061056)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(406061056)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[445@376 mouseUp 2449705 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	375@362 corner: 512@380
		owner: 	a MenuMorph(398983168)
		submorphs: 	#()
		fullBounds: 	375@362 corner: 512@380
		color: 	Color black
		extension: 	a MorphExtension (416284672)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[445@376 mouseUp 2449705 nil]
		aMorph: 	a MenuMorph(398983168)
		localEvt: 	[445@376 mouseUp 2449705 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(406061056)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(406061056)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[445@376 mouseUp 2449705 nil]
		aMorph: 	a MenuMorph(398983168)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(398983168)
	Arguments and temporary variables: 
		anEvent: 	[445@376 mouseUp 2449705 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	370@357 corner: 517@704
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(406061056)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	370@357 corner: 517@704
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (413925376) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(406061056)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(406061056)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(398983168)
	Arguments and temporary variables: 
		anEvent: 	[445@376 mouseUp 2449705 nil]
	Receiver's instance variables: 
		bounds: 	370@357 corner: 517@704
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(406061056)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	370@357 corner: 517@704
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (413925376) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(406061056)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(406061056)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(398983168)
	Arguments and temporary variables: 
		evt: 	[445@376 mouseUp 2449705 nil]
	Receiver's instance variables: 
		bounds: 	370@357 corner: 517@704
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(406061056)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	370@357 corner: 517@704
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (413925376) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(406061056)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(406061056)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[445@376 mouseUp 2449705 nil]
		focusHolder: 	a MenuMorph(398983168)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	445@376 corner: 461@392
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	445@376 corner: 461@392
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(971243520)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[445@376 mouseUp 2449705 nil]
		targetOffset: 	70@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2449705 445 376 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 932@722
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(603455488) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[445@376 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 932@722
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(603455488) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[445@376 mouseUp 2449705 nil]
		focusHolder: 	a MenuMorph(398983168)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	445@376 corner: 461@392
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	445@376 corner: 461@392
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(971243520)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[445@376 mouseUp 2449705 nil]
		targetOffset: 	70@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2449705 445 376 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[445@376 mouseUp 2449705 nil]
		focusHolder: 	a MenuMorph(398983168)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	445@376 corner: 461@392
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	445@376 corner: 461@392
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(971243520)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[445@376 mouseUp 2449705 nil]
		targetOffset: 	70@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2449705 445 376 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[445@376 mouseUp 2449705 nil]
	Receiver's instance variables: 
		bounds: 	445@376 corner: 461@392
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	445@376 corner: 461@392
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(971243520)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[445@376 mouseUp 2449705 nil]
		targetOffset: 	70@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2449705 445 376 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[445@376 mouseUp 2449705 nil]
		evt: 	[445@376 mouseUp 2449705 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	445@376 corner: 461@392
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	445@376 corner: 461@392
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(971243520)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[445@376 mouseUp 2449705 nil]
		targetOffset: 	70@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2449705 445 376 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil



--- The full stack ---
Artist(Object)>>doesNotUnderstand: #activeSince:
Artist>>initialize
Artist class(Behavior)>>new
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
PluggableTextMorph(ScrollPane)>>mouseDown:
PluggableTextMorph(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
PluggableTextMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: no such inst var
30 December 2011 2:26:13 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

Artist class(Object)>>error:
	Receiver: Artist
	Arguments and temporary variables: 
		aString: 	'no such inst var'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeSince->(Artist>>#activeSince "a CompiledM...etc...
		format: 	136
		instanceVariables: 	#('activeSince' 'awardsWon' 'artistName')
		organization: 	('accessing' activeSince activeSince: artistName artistName: awar...etc...
		subclasses: 	{Band. Solo}
		name: 	#Artist
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#POOL
		traitComposition: 	nil
		localSelectors: 	nil


[self error: 'no such inst var'] in Artist class(Object)>>instVarNamed:put:
	Receiver: Artist
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeSince->(Artist>>#activeSince "a CompiledM...etc...
		format: 	136
		instanceVariables: 	#('activeSince' 'awardsWon' 'artistName')
		organization: 	('accessing' activeSince activeSince: artistName artistName: awar...etc...
		subclasses: 	{Band. Solo}
		name: 	#Artist
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#POOL
		traitComposition: 	nil
		localSelectors: 	nil


ProtoObject class(ClassDescription)>>instVarIndexFor:ifAbsent:
	Receiver: ProtoObject
	Arguments and temporary variables: 
		instVarName: 	'activeSince'
		aBlock: 	[self error: 'no such inst var']
		index: 	0
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	a MethodDictionary(#'=='->(ProtoObject>>#'==' "a CompiledMethod(104...etc...
		format: 	2
		instanceVariables: 	nil
		organization: 	('*deprecated13' executeMethod: with:executeMethod: with:with:exe...etc...
		subclasses: 	{Object. ImageSegmentRootStub. MessageCatcher. TestCoverage. OBBrea...etc...
		name: 	#ProtoObject
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Objects'
		traitComposition: 	nil
		localSelectors: 	nil


Object class(ClassDescription)>>instVarIndexFor:ifAbsent:
	Receiver: Object
	Arguments and temporary variables: 
		instVarName: 	'activeSince'
		aBlock: 	[self error: 'no such inst var']
		index: 	0
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 340)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*Graphics-Display Objects' printDirectlyToDisplay)
('*Morphic' ...etc...
		subclasses: 	{BalloonState. UndefinedObject. Boolean. FillStyle. Authorizer. Con...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(a FindRe...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


Behavior class(ClassDescription)>>instVarIndexFor:ifAbsent:
	Receiver: Behavior
	Arguments and temporary variables: 
		instVarName: 	'activeSince'
		aBlock: 	[self error: 'no such inst var']
		index: 	0
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(size 235)
		format: 	136
		instanceVariables: 	#('superclass' 'methodDict' 'format')
		organization: 	('*Ocompletion' allSelectorsForCompletionWithout:)
('*RoelTyper-e...etc...
		subclasses: 	{ClassDescription. MessageCatchingProxy}
		name: 	#Behavior
		classPool: 	a Dictionary(#ObsoleteSubclasses->a WeakKeyToCollectionDictionary(Ar...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Classes'
		traitComposition: 	TPureBehavior
		localSelectors: 	an IdentitySet(#allUnreferencedInstanceVariables #nonMetaSubcla...etc...


ClassDescription class(ClassDescription)>>instVarIndexFor:ifAbsent:
	Receiver: ClassDescription
	Arguments and temporary variables: 
		instVarName: 	'activeSince'
		aBlock: 	[self error: 'no such inst var']
		index: 	0
	Receiver's instance variables: 
		superclass: 	Behavior
		methodDict: 	a MethodDictionary(size 143)
		format: 	140
		instanceVariables: 	#('instanceVariables' 'organization')
		organization: 	('*RoelTyper-organization' categoryForSelector:)
('*System-Suppor...etc...
		subclasses: 	{Class. Metaclass}
		name: 	#ClassDescription
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Classes'
		traitComposition: 	TClassAndTraitDescription
		localSelectors: 	an IdentitySet(#fileOutChangedMessages:on:moveSource:toFile: #p...etc...


Class class(ClassDescription)>>instVarIndexFor:ifAbsent:
	Receiver: Class
	Arguments and temporary variables: 
		instVarName: 	'activeSince'
		aBlock: 	[self error: 'no such inst var']
		index: 	0
	Receiver's instance variables: 
		superclass: 	ClassDescription
		methodDict: 	a MethodDictionary(size 106)
		format: 	156
		instanceVariables: 	#('subclasses' 'name' 'classPool' 'sharedPools' 'environment...etc...
		organization: 	('*HelpSystem-Core' asHelpTopic)
('*MethodWrappers' unwrapAllMeth...etc...
		subclasses: 	{PseudoContext class. ProtoObject class}
		name: 	#Class
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Classes'
		traitComposition: 	TBehaviorCategorization
		localSelectors: 	an IdentitySet(#ensureClassPool #fileOutOn:moveSource:toFile: #...etc...


Metaclass(ClassDescription)>>instVarIndexFor:ifAbsent:
	Receiver: ProtoObject class
	Arguments and temporary variables: 
		instVarName: 	'activeSince'
		aBlock: 	[self error: 'no such inst var']
		index: 	0
	Receiver's instance variables: 
		superclass: 	Class
		methodDict: 	a MethodDictionary()
		format: 	156
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		thisClass: 	ProtoObject
		traitComposition: 	{}
		localSelectors: 	nil


Metaclass(ClassDescription)>>instVarIndexFor:ifAbsent:
	Receiver: Object class
	Arguments and temporary variables: 
		instVarName: 	'activeSince'
		aBlock: 	[self error: 'no such inst var']
		index: 	0
	Receiver's instance variables: 
		superclass: 	ProtoObject class
		methodDict: 	a MethodDictionary(#createFrom:size:version:->(Object class>>#creat...etc...
		format: 	156
		instanceVariables: 	nil
		organization: 	('*Compiler-Kernel' readFrom:)
('*Polymorph-Widgets' taskbarIcon ...etc...
		thisClass: 	Object
		traitComposition: 	{}
		localSelectors: 	nil


Metaclass(ClassDescription)>>instVarIndexFor:ifAbsent:
	Receiver: Artist class
	Arguments and temporary variables: 
		instVarName: 	'activeSince'
		aBlock: 	[self error: 'no such inst var']
		index: 	0
	Receiver's instance variables: 
		superclass: 	Object class
		methodDict: 	a MethodDictionary()
		format: 	156
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		thisClass: 	Artist
		traitComposition: 	nil
		localSelectors: 	nil


Artist class(Object)>>instVarNamed:put:
	Receiver: Artist
	Arguments and temporary variables: 
		aString: 	#activeSince
		aValue: 	1
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeSince->(Artist>>#activeSince "a CompiledM...etc...
		format: 	136
		instanceVariables: 	#('activeSince' 'awardsWon' 'artistName')
		organization: 	('accessing' activeSince activeSince: artistName artistName: awar...etc...
		subclasses: 	{Band. Solo}
		name: 	#Artist
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#POOL
		traitComposition: 	nil
		localSelectors: 	nil


Artist class>>DoIt
	Receiver: Artist
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeSince->(Artist>>#activeSince "a CompiledM...etc...
		format: 	136
		instanceVariables: 	#('activeSince' 'awardsWon' 'artistName')
		organization: 	('accessing' activeSince activeSince: artistName artistName: awar...etc...
		subclasses: 	{Band. Solo}
		name: 	#Artist
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#POOL
		traitComposition: 	nil
		localSelectors: 	nil


Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'initialize 
	super initialize
	self instVarNam...etc...
		aContext: 	nil
		receiver: 	Artist
		aRequestor: 	an OBTextMorph(722206720)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ self instVarNamed: #activeSince put: 1
		method: 	(Artist class>>#DoIt "a CompiledMethod(683933696)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'initialize 
	super initialize
	self instVarNam...etc...
		requestor: 	an OBTextMorph(722206720)
		class: 	Artist class
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	Artist
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	an OBTextMorph(722206720)
		selectionShowing: 	true
		model: 	an OBDefinitionPanel
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	Artist
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	an OBTextMorph(722206720)
		selectionShowing: 	true
		model: 	an OBDefinitionPanel
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in OBPluggableTextMorph(PluggableTextMorph)>>inspectIt
	Receiver: an OBPluggableTextMorph(815005696)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	227@243 corner: 917@494
		owner: 	an OBGroupingMorph(226230272)
		submorphs: 	an Array(a TransformMorph(861929472))
		fullBounds: 	227@243 corner: 917@494
		color: 	Color white
		extension: 	a MorphExtension (700973056)
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(842530816)
		scroller: 	a TransformMorph(861929472)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(858521600)
		textMorph: 	an OBTextMorph(722206720)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(33 to: 32)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
	Receiver: an OBPluggableTextMorph(815005696)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	227@243 corner: 917@494
		owner: 	an OBGroupingMorph(226230272)
		submorphs: 	an Array(a TransformMorph(861929472))
		fullBounds: 	227@243 corner: 917@494
		color: 	Color white
		extension: 	a MorphExtension (700973056)
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(842530816)
		scroller: 	a TransformMorph(861929472)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(858521600)
		textMorph: 	an OBTextMorph(722206720)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(33 to: 32)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


OBTextMorph(TextMorph)>>handleEdit:
	Receiver: an OBTextMorph(722206720)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 684@66
		owner: 	a TransformMorph(861929472)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 684@66
		color: 	Color black
		extension: 	a MorphExtension (802422784) [other:  (blinkStart -> 3554993) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'initialize 
	super initialize
	self instVarNamed: #activeSinc...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	an OBPluggableTextMorph(815005696)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
	Receiver: an OBPluggableTextMorph(815005696)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	227@243 corner: 917@494
		owner: 	an OBGroupingMorph(226230272)
		submorphs: 	an Array(a TransformMorph(861929472))
		fullBounds: 	227@243 corner: 917@494
		color: 	Color white
		extension: 	a MorphExtension (700973056)
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(842530816)
		scroller: 	a TransformMorph(861929472)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(858521600)
		textMorph: 	an OBTextMorph(722206720)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(33 to: 32)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


OBPluggableTextMorph(PluggableTextMorph)>>inspectIt
	Receiver: an OBPluggableTextMorph(815005696)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	227@243 corner: 917@494
		owner: 	an OBGroupingMorph(226230272)
		submorphs: 	an Array(a TransformMorph(861929472))
		fullBounds: 	227@243 corner: 917@494
		color: 	Color white
		extension: 	a MorphExtension (700973056)
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(842530816)
		scroller: 	a TransformMorph(861929472)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(858521600)
		textMorph: 	an OBTextMorph(722206720)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(33 to: 32)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


OBTextMorphSelection>>inspectIt
	Receiver: an OBTextMorphSelection
	Arguments and temporary variables: 

	Receiver's instance variables: 
		selection: 	(33 to: 32)
		text: 	a Text for 'initialize 
	super initialize
	self instVarNamed: #activeSinc...etc...
		morph: 	an OBPluggableTextMorph(815005696)


OBInspectItTextCommand>>execute
	Receiver: an OBInspectItTextCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	an OBTextMorphSelection
		requestor: 	an OBDefinitionPanel


OBInspectItTextCommand(OBCommand)>>perform:orSendTo:
	Receiver: an OBInspectItTextCommand
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableTextMorph(815005696)
	Receiver's instance variables: 
		target: 	an OBTextMorphSelection
		requestor: 	an OBDefinitionPanel


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(511967232)'Inspect it'
	Arguments and temporary variables: 
		evt: 	[368@486 mouseUp 3557065 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	268@484 corner: 465@502
		owner: 	a MenuMorph(794296320)
		submorphs: 	#()
		fullBounds: 	268@484 corner: 465@502
		color: 	Color black
		extension: 	a MorphExtension (522190848)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBInspectItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(815005696))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+i'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(511967232)'Inspect it'
	Arguments and temporary variables: 
		evt: 	[368@486 mouseUp 3557065 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	268@484 corner: 465@502
		owner: 	a MenuMorph(794296320)
		submorphs: 	#()
		fullBounds: 	268@484 corner: 465@502
		color: 	Color black
		extension: 	a MorphExtension (522190848)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBInspectItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(815005696))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+i'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(511967232)'Inspect it'
	Arguments and temporary variables: 
		evt: 	[368@486 mouseUp 3557065 nil]
	Receiver's instance variables: 
		bounds: 	268@484 corner: 465@502
		owner: 	a MenuMorph(794296320)
		submorphs: 	#()
		fullBounds: 	268@484 corner: 465@502
		color: 	Color black
		extension: 	a MorphExtension (522190848)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBInspectItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(815005696))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+i'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(511967232)'Inspect it'
	Arguments and temporary variables: 
		anEvent: 	[368@486 mouseUp 3557065 nil]
	Receiver's instance variables: 
		bounds: 	268@484 corner: 465@502
		owner: 	a MenuMorph(794296320)
		submorphs: 	#()
		fullBounds: 	268@484 corner: 465@502
		color: 	Color black
		extension: 	a MorphExtension (522190848)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBInspectItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(815005696))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+i'


MouseButtonEvent>>sentTo:
	Receiver: [368@486 mouseUp 3557065 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(511967232)'Inspect it'
	Receiver's instance variables: 
		timeStamp: 	3557065
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	368@486
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(511967232)'Inspect it'
	Arguments and temporary variables: 
		anEvent: 	[368@486 mouseUp 3557065 nil]
	Receiver's instance variables: 
		bounds: 	268@484 corner: 465@502
		owner: 	a MenuMorph(794296320)
		submorphs: 	#()
		fullBounds: 	268@484 corner: 465@502
		color: 	Color black
		extension: 	a MorphExtension (522190848)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBInspectItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(815005696))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+i'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[368@486 mouseUp 3557065 nil]
		aMorph: 	a ToggleMenuItemMorph(511967232)'Inspect it'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[368@486 mouseUp 3557065 nil]
		aMorph: 	a ToggleMenuItemMorph(511967232)'Inspect it'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(511967232)'Inspect it'
	Arguments and temporary variables: 
		anEvent: 	[368@486 mouseUp 3557065 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	268@484 corner: 465@502
		owner: 	a MenuMorph(794296320)
		submorphs: 	#()
		fullBounds: 	268@484 corner: 465@502
		color: 	Color black
		extension: 	a MorphExtension (522190848)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBInspectItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(815005696))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+i'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[368@486 mouseUp 3557065 nil]
		aMorph: 	a MenuMorph(794296320)
		localEvt: 	[368@486 mouseUp 3557065 nil]
		index: 	15
		child: 	a ToggleMenuItemMorph(511967232)'Inspect it'
		morphs: 	an Array(a ToggleMenuItemMorph(758644736)'Redo' a ToggleMenuItemMorph(9...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[368@486 mouseUp 3557065 nil]
		aMorph: 	a MenuMorph(794296320)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(794296320)
	Arguments and temporary variables: 
		anEvent: 	[368@486 mouseUp 3557065 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	263@277 corner: 470@660
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(758644736)'Redo' a ToggleMenuItemMorp...etc...
		fullBounds: 	263@277 corner: 470@660
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (809238528) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBDefinitionPanel
		selectedItem: 	a ToggleMenuItemMorph(511967232)'Inspect it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(758644736)'Redo' a Toggle...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(794296320)
	Arguments and temporary variables: 
		anEvent: 	[368@486 mouseUp 3557065 nil]
	Receiver's instance variables: 
		bounds: 	263@277 corner: 470@660
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(758644736)'Redo' a ToggleMenuItemMorp...etc...
		fullBounds: 	263@277 corner: 470@660
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (809238528) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBDefinitionPanel
		selectedItem: 	a ToggleMenuItemMorph(511967232)'Inspect it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(758644736)'Redo' a Toggle...etc...



--- The full stack ---
Artist class(Object)>>error:
[self error: 'no such inst var'] in Artist class(Object)>>instVarNamed:put:
ProtoObject class(ClassDescription)>>instVarIndexFor:ifAbsent:
Object class(ClassDescription)>>instVarIndexFor:ifAbsent:
Behavior class(ClassDescription)>>instVarIndexFor:ifAbsent:
ClassDescription class(ClassDescription)>>instVarIndexFor:ifAbsent:
Class class(ClassDescription)>>instVarIndexFor:ifAbsent:
Metaclass(ClassDescription)>>instVarIndexFor:ifAbsent:
Metaclass(ClassDescription)>>instVarIndexFor:ifAbsent:
Metaclass(ClassDescription)>>instVarIndexFor:ifAbsent:
Artist class(Object)>>instVarNamed:put:
Artist class>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in OBPluggableTextMorph(PluggableTextMorph)>>inspectIt
[result := editBlock value] in OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
OBTextMorph(TextMorph)>>handleEdit:
OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
OBPluggableTextMorph(PluggableTextMorph)>>inspectIt
OBTextMorphSelection>>inspectIt
OBInspectItTextCommand>>execute
OBInspectItTextCommand(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
OBPluggableTextMorph(PluggableTextMorph)>>yellowButtonActivity:
OBTextMorph(TextMorphForEditView)>>mouseDown:
OBTextMorph(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
OBTextMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBPluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBGroupingMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBSystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Artist>>Transcript
30 December 2011 2:35:35 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

Artist(Object)>>doesNotUnderstand: #Transcript
	Receiver: an Artist
	Arguments and temporary variables: 
		aMessage: 	Transcript
		exception: 	MessageNotUnderstood: Artist>>Transcript
		resumeValue: 	nil
	Receiver's instance variables: 
		activeSince: 	1
		awardsWon: 	0
		artistName: 	''


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		a: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| a |
Artist new
Transcript show: ''test'''
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	| a |
	^ Artist new Transcript show: 'test'
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(1031012352)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| a |
Artist new
Transcript show: ''test'''
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	201@516 corner: 641@683
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	201@516 corner: 641@683
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 40)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	201@516 corner: 641@683
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	201@516 corner: 641@683
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 40)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@50
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@50
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 4117717) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| a |
Artist new
Transcript show: ''test'''
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	201@516 corner: 641@683
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	201@516 corner: 641@683
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 40)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	201@516 corner: 641@683
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	201@516 corner: 641@683
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 40)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| a |
Artist new
Transcript show: ''test'''
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(720633856)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[403@374 mouseUp 4119546 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	324@362 corner: 461@380
		owner: 	a MenuMorph(658505728)
		submorphs: 	#()
		fullBounds: 	324@362 corner: 461@380
		color: 	Color black
		extension: 	a MorphExtension (730857472)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(720633856)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[403@374 mouseUp 4119546 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	324@362 corner: 461@380
		owner: 	a MenuMorph(658505728)
		submorphs: 	#()
		fullBounds: 	324@362 corner: 461@380
		color: 	Color black
		extension: 	a MorphExtension (730857472)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(720633856)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[403@374 mouseUp 4119546 nil]
	Receiver's instance variables: 
		bounds: 	324@362 corner: 461@380
		owner: 	a MenuMorph(658505728)
		submorphs: 	#()
		fullBounds: 	324@362 corner: 461@380
		color: 	Color black
		extension: 	a MorphExtension (730857472)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(720633856)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[403@374 mouseUp 4119546 nil]
	Receiver's instance variables: 
		bounds: 	324@362 corner: 461@380
		owner: 	a MenuMorph(658505728)
		submorphs: 	#()
		fullBounds: 	324@362 corner: 461@380
		color: 	Color black
		extension: 	a MorphExtension (730857472)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [403@374 mouseUp 4119546 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(720633856)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	4119546
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	403@374
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(720633856)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[403@374 mouseUp 4119546 nil]
	Receiver's instance variables: 
		bounds: 	324@362 corner: 461@380
		owner: 	a MenuMorph(658505728)
		submorphs: 	#()
		fullBounds: 	324@362 corner: 461@380
		color: 	Color black
		extension: 	a MorphExtension (730857472)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[403@374 mouseUp 4119546 nil]
		aMorph: 	a ToggleMenuItemMorph(720633856)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[403@374 mouseUp 4119546 nil]
		aMorph: 	a ToggleMenuItemMorph(720633856)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(720633856)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[403@374 mouseUp 4119546 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	324@362 corner: 461@380
		owner: 	a MenuMorph(658505728)
		submorphs: 	#()
		fullBounds: 	324@362 corner: 461@380
		color: 	Color black
		extension: 	a MorphExtension (730857472)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[403@374 mouseUp 4119546 nil]
		aMorph: 	a MenuMorph(658505728)
		localEvt: 	[403@374 mouseUp 4119546 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(720633856)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(720633856)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[403@374 mouseUp 4119546 nil]
		aMorph: 	a MenuMorph(658505728)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(658505728)
	Arguments and temporary variables: 
		anEvent: 	[403@374 mouseUp 4119546 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	319@357 corner: 466@704
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(720633856)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	319@357 corner: 466@704
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (673447936) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(720633856)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(720633856)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(658505728)
	Arguments and temporary variables: 
		anEvent: 	[403@374 mouseUp 4119546 nil]
	Receiver's instance variables: 
		bounds: 	319@357 corner: 466@704
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(720633856)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	319@357 corner: 466@704
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (673447936) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(720633856)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(720633856)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(658505728)
	Arguments and temporary variables: 
		evt: 	[403@374 mouseUp 4119546 nil]
	Receiver's instance variables: 
		bounds: 	319@357 corner: 466@704
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(720633856)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	319@357 corner: 466@704
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (673447936) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(720633856)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(720633856)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[403@374 mouseUp 4119546 nil]
		focusHolder: 	a MenuMorph(658505728)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	403@374 corner: 419@390
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(648806400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[403@374 mouseUp 4119546 nil]
		targetOffset: 	78@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 4119546 403 374 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 932@722
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(14680064) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[403@374 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 932@722
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(14680064) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[403@374 mouseUp 4119546 nil]
		focusHolder: 	a MenuMorph(658505728)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	403@374 corner: 419@390
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(648806400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[403@374 mouseUp 4119546 nil]
		targetOffset: 	78@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 4119546 403 374 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[403@374 mouseUp 4119546 nil]
		focusHolder: 	a MenuMorph(658505728)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	403@374 corner: 419@390
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(648806400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[403@374 mouseUp 4119546 nil]
		targetOffset: 	78@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 4119546 403 374 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[403@374 mouseUp 4119546 nil]
	Receiver's instance variables: 
		bounds: 	403@374 corner: 419@390
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(648806400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[403@374 mouseUp 4119546 nil]
		targetOffset: 	78@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 4119546 403 374 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[403@374 mouseUp 4119546 nil]
		evt: 	[403@374 mouseUp 4119546 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	403@374 corner: 419@390
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(648806400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[403@374 mouseUp 4119546 nil]
		targetOffset: 	78@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 4119546 403 374 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[403@374 mouseUp 4119546 nil]
		evtBuf: 	#(1 4119546 403 374 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	403@374 corner: 419@390
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(648806400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[403@374 mouseUp 4119546 nil]
		targetOffset: 	78@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 4119546 403 374 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 932@722
		canvas: 	a FormCanvas on: DisplayScreen(932x722x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(14680064))(a PreDebug...etc...
		lastStepTime: 	4119549
		lastStepMessage: 	nil
		lastCycleTime: 	4119589
		alarms: 	a Heap()
		lastAlarmTime: 	4119549
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
Artist(Object)>>doesNotUnderstand: #Transcript
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Artist>>self
30 December 2011 2:38:21 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

Artist(Object)>>doesNotUnderstand: #self
	Receiver: an Artist
	Arguments and temporary variables: 
		aMessage: 	self
		exception: 	MessageNotUnderstood: Artist>>self
		resumeValue: 	nil
	Receiver's instance variables: 
		activeSince: 	nil
		awardsWon: 	nil
		artistName: 	nil


Artist>>initialize
	Receiver: an Artist
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeSince: 	nil
		awardsWon: 	nil
		artistName: 	nil


Artist class(Behavior)>>new
	Receiver: Artist
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeSince->(Artist>>#activeSince "a CompiledM...etc...
		format: 	136
		instanceVariables: 	#('activeSince' 'awardsWon' 'artistName')
		organization: 	('accessing' activeSince activeSince: artistName artistName: awar...etc...
		subclasses: 	{Band. Solo}
		name: 	#Artist
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#POOL
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		a: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| a |
a:= Artist new.
Transcript show: ''test'...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	| a |
	a := Artist new.
	^ Transcript show: 'test'
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(381681664)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| a |
a:= Artist new.
Transcript show: ''test'...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	201@516 corner: 641@683
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	201@516 corner: 641@683
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 45)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	201@516 corner: 641@683
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	201@516 corner: 641@683
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 45)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@50
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@50
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 4284031) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| a |
a:= Artist new.
Transcript show: ''test'''
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	201@516 corner: 641@683
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	201@516 corner: 641@683
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 45)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	201@516 corner: 641@683
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	201@516 corner: 641@683
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 45)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| a |
a:= Artist new.
Transcript show: ''test'''
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(770703360)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[320@373 mouseUp 4284697 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	260@362 corner: 397@380
		owner: 	a MenuMorph(708575232)
		submorphs: 	#()
		fullBounds: 	260@362 corner: 397@380
		color: 	Color black
		extension: 	a MorphExtension (780926976)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(770703360)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[320@373 mouseUp 4284697 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	260@362 corner: 397@380
		owner: 	a MenuMorph(708575232)
		submorphs: 	#()
		fullBounds: 	260@362 corner: 397@380
		color: 	Color black
		extension: 	a MorphExtension (780926976)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(770703360)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[320@373 mouseUp 4284697 nil]
	Receiver's instance variables: 
		bounds: 	260@362 corner: 397@380
		owner: 	a MenuMorph(708575232)
		submorphs: 	#()
		fullBounds: 	260@362 corner: 397@380
		color: 	Color black
		extension: 	a MorphExtension (780926976)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(770703360)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[320@373 mouseUp 4284697 nil]
	Receiver's instance variables: 
		bounds: 	260@362 corner: 397@380
		owner: 	a MenuMorph(708575232)
		submorphs: 	#()
		fullBounds: 	260@362 corner: 397@380
		color: 	Color black
		extension: 	a MorphExtension (780926976)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [320@373 mouseUp 4284697 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(770703360)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	4284697
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	320@373
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(770703360)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[320@373 mouseUp 4284697 nil]
	Receiver's instance variables: 
		bounds: 	260@362 corner: 397@380
		owner: 	a MenuMorph(708575232)
		submorphs: 	#()
		fullBounds: 	260@362 corner: 397@380
		color: 	Color black
		extension: 	a MorphExtension (780926976)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[320@373 mouseUp 4284697 nil]
		aMorph: 	a ToggleMenuItemMorph(770703360)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[320@373 mouseUp 4284697 nil]
		aMorph: 	a ToggleMenuItemMorph(770703360)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(770703360)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[320@373 mouseUp 4284697 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	260@362 corner: 397@380
		owner: 	a MenuMorph(708575232)
		submorphs: 	#()
		fullBounds: 	260@362 corner: 397@380
		color: 	Color black
		extension: 	a MorphExtension (780926976)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[320@373 mouseUp 4284697 nil]
		aMorph: 	a MenuMorph(708575232)
		localEvt: 	[320@373 mouseUp 4284697 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(770703360)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(770703360)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[320@373 mouseUp 4284697 nil]
		aMorph: 	a MenuMorph(708575232)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(708575232)
	Arguments and temporary variables: 
		anEvent: 	[320@373 mouseUp 4284697 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	255@357 corner: 402@704
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(770703360)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	255@357 corner: 402@704
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (723517440) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(770703360)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(770703360)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(708575232)
	Arguments and temporary variables: 
		anEvent: 	[320@373 mouseUp 4284697 nil]
	Receiver's instance variables: 
		bounds: 	255@357 corner: 402@704
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(770703360)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	255@357 corner: 402@704
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (723517440) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(770703360)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(770703360)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(708575232)
	Arguments and temporary variables: 
		evt: 	[320@373 mouseUp 4284697 nil]
	Receiver's instance variables: 
		bounds: 	255@357 corner: 402@704
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(770703360)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	255@357 corner: 402@704
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (723517440) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(770703360)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(770703360)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[320@373 mouseUp 4284697 nil]
		focusHolder: 	a MenuMorph(708575232)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	320@373 corner: 336@389
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(98304000)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[320@373 mouseUp 4284697 nil]
		targetOffset: 	60@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 4284697 320 373 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 932@722
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(803995648) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[320@373 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 932@722
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(803995648) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[320@373 mouseUp 4284697 nil]
		focusHolder: 	a MenuMorph(708575232)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	320@373 corner: 336@389
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(98304000)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[320@373 mouseUp 4284697 nil]
		targetOffset: 	60@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 4284697 320 373 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[320@373 mouseUp 4284697 nil]
		focusHolder: 	a MenuMorph(708575232)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	320@373 corner: 336@389
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(98304000)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[320@373 mouseUp 4284697 nil]
		targetOffset: 	60@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 4284697 320 373 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[320@373 mouseUp 4284697 nil]
	Receiver's instance variables: 
		bounds: 	320@373 corner: 336@389
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(98304000)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[320@373 mouseUp 4284697 nil]
		targetOffset: 	60@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 4284697 320 373 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[320@373 mouseUp 4284697 nil]
		evt: 	[320@373 mouseUp 4284697 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	320@373 corner: 336@389
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(98304000)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[320@373 mouseUp 4284697 nil]
		targetOffset: 	60@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 4284697 320 373 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil



--- The full stack ---
Artist(Object)>>doesNotUnderstand: #self
Artist>>initialize
Artist class(Behavior)>>new
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "activeSince" is nil
30 December 2011 2:40:33 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #activeSince
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	activeSince
		exception: 	MessageNotUnderstood: receiver of "activeSince" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| a |
a:= Artist new.
Transcript show: a activ...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ Transcript show: a activeSince
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(1034420224)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| a |
a:= Artist new.
Transcript show: a activ...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	201@516 corner: 641@683
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	201@516 corner: 641@683
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(23 to: 52)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	201@516 corner: 641@683
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	201@516 corner: 641@683
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(23 to: 52)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@50
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@50
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 4416147) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| a |
a:= Artist new.
Transcript show: a activeSince'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	201@516 corner: 641@683
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	201@516 corner: 641@683
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(23 to: 52)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	201@516 corner: 641@683
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	201@516 corner: 641@683
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(23 to: 52)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| a |
a:= Artist new.
Transcript show: a activeSince'
		bindings: 	a Dictionary('a'->nil )
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(465829888)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[527@375 mouseUp 4417225 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	464@362 corner: 601@380
		owner: 	a MenuMorph(458752000)
		submorphs: 	#()
		fullBounds: 	464@362 corner: 601@380
		color: 	Color black
		extension: 	a MorphExtension (476053504)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(465829888)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[527@375 mouseUp 4417225 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	464@362 corner: 601@380
		owner: 	a MenuMorph(458752000)
		submorphs: 	#()
		fullBounds: 	464@362 corner: 601@380
		color: 	Color black
		extension: 	a MorphExtension (476053504)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(465829888)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[527@375 mouseUp 4417225 nil]
	Receiver's instance variables: 
		bounds: 	464@362 corner: 601@380
		owner: 	a MenuMorph(458752000)
		submorphs: 	#()
		fullBounds: 	464@362 corner: 601@380
		color: 	Color black
		extension: 	a MorphExtension (476053504)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(465829888)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[527@375 mouseUp 4417225 nil]
	Receiver's instance variables: 
		bounds: 	464@362 corner: 601@380
		owner: 	a MenuMorph(458752000)
		submorphs: 	#()
		fullBounds: 	464@362 corner: 601@380
		color: 	Color black
		extension: 	a MorphExtension (476053504)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [527@375 mouseUp 4417225 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(465829888)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	4417225
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	527@375
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(465829888)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[527@375 mouseUp 4417225 nil]
	Receiver's instance variables: 
		bounds: 	464@362 corner: 601@380
		owner: 	a MenuMorph(458752000)
		submorphs: 	#()
		fullBounds: 	464@362 corner: 601@380
		color: 	Color black
		extension: 	a MorphExtension (476053504)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[527@375 mouseUp 4417225 nil]
		aMorph: 	a ToggleMenuItemMorph(465829888)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[527@375 mouseUp 4417225 nil]
		aMorph: 	a ToggleMenuItemMorph(465829888)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(465829888)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[527@375 mouseUp 4417225 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	464@362 corner: 601@380
		owner: 	a MenuMorph(458752000)
		submorphs: 	#()
		fullBounds: 	464@362 corner: 601@380
		color: 	Color black
		extension: 	a MorphExtension (476053504)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[527@375 mouseUp 4417225 nil]
		aMorph: 	a MenuMorph(458752000)
		localEvt: 	[527@375 mouseUp 4417225 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(465829888)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(465829888)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[527@375 mouseUp 4417225 nil]
		aMorph: 	a MenuMorph(458752000)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(458752000)
	Arguments and temporary variables: 
		anEvent: 	[527@375 mouseUp 4417225 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	459@357 corner: 606@704
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(465829888)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	459@357 corner: 606@704
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (473694208) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(465829888)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(465829888)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(458752000)
	Arguments and temporary variables: 
		anEvent: 	[527@375 mouseUp 4417225 nil]
	Receiver's instance variables: 
		bounds: 	459@357 corner: 606@704
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(465829888)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	459@357 corner: 606@704
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (473694208) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(465829888)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(465829888)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(458752000)
	Arguments and temporary variables: 
		evt: 	[527@375 mouseUp 4417225 nil]
	Receiver's instance variables: 
		bounds: 	459@357 corner: 606@704
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(465829888)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	459@357 corner: 606@704
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (473694208) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(465829888)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(465829888)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[527@375 mouseUp 4417225 nil]
		focusHolder: 	a MenuMorph(458752000)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	527@375 corner: 543@391
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1049100288)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[527@375 mouseUp 4417225 nil]
		targetOffset: 	63@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 4417225 527 375 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 932@722
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(681050112) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[527@375 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 932@722
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(681050112) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[527@375 mouseUp 4417225 nil]
		focusHolder: 	a MenuMorph(458752000)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	527@375 corner: 543@391
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1049100288)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[527@375 mouseUp 4417225 nil]
		targetOffset: 	63@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 4417225 527 375 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[527@375 mouseUp 4417225 nil]
		focusHolder: 	a MenuMorph(458752000)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	527@375 corner: 543@391
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1049100288)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[527@375 mouseUp 4417225 nil]
		targetOffset: 	63@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 4417225 527 375 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[527@375 mouseUp 4417225 nil]
	Receiver's instance variables: 
		bounds: 	527@375 corner: 543@391
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1049100288)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[527@375 mouseUp 4417225 nil]
		targetOffset: 	63@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 4417225 527 375 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[527@375 mouseUp 4417225 nil]
		evt: 	[527@375 mouseUp 4417225 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	527@375 corner: 543@391
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1049100288)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[527@375 mouseUp 4417225 nil]
		targetOffset: 	63@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 4417225 527 375 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[527@375 mouseUp 4417225 nil]
		evtBuf: 	#(1 4417225 527 375 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	527@375 corner: 543@391
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1049100288)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[527@375 mouseUp 4417225 nil]
		targetOffset: 	63@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 4417225 527 375 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 932@722
		canvas: 	a FormCanvas on: DisplayScreen(932x722x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(681050112))(a PreDebu...etc...
		lastStepTime: 	4417217
		lastStepMessage: 	nil
		lastCycleTime: 	4417257
		alarms: 	a Heap()
		lastAlarmTime: 	4417217
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #activeSince
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "activeSince" is nil
30 December 2011 2:40:48 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #activeSince
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	activeSince
		exception: 	MessageNotUnderstood: receiver of "activeSince" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| a |
a:= Artist new.
Transcript show: (a acti...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ Transcript show: a activeSince
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(635699200)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| a |
a:= Artist new.
Transcript show: (a acti...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	201@516 corner: 641@683
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	201@516 corner: 641@683
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(23 to: 54)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	201@516 corner: 641@683
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	201@516 corner: 641@683
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(23 to: 54)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@50
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@50
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 4430953) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| a |
a:= Artist new.
Transcript show: (a activeSince)'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	201@516 corner: 641@683
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	201@516 corner: 641@683
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(23 to: 54)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	201@516 corner: 641@683
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	201@516 corner: 641@683
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(23 to: 54)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| a |
a:= Artist new.
Transcript show: (a activeSince)'
		bindings: 	a Dictionary('a'->nil )
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(676069376)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[475@369 mouseUp 4431721 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	421@362 corner: 558@380
		owner: 	a MenuMorph(687341568)
		submorphs: 	#()
		fullBounds: 	421@362 corner: 558@380
		color: 	Color black
		extension: 	a MorphExtension (686292992)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(676069376)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[475@369 mouseUp 4431721 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	421@362 corner: 558@380
		owner: 	a MenuMorph(687341568)
		submorphs: 	#()
		fullBounds: 	421@362 corner: 558@380
		color: 	Color black
		extension: 	a MorphExtension (686292992)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(676069376)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[475@369 mouseUp 4431721 nil]
	Receiver's instance variables: 
		bounds: 	421@362 corner: 558@380
		owner: 	a MenuMorph(687341568)
		submorphs: 	#()
		fullBounds: 	421@362 corner: 558@380
		color: 	Color black
		extension: 	a MorphExtension (686292992)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(676069376)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[475@369 mouseUp 4431721 nil]
	Receiver's instance variables: 
		bounds: 	421@362 corner: 558@380
		owner: 	a MenuMorph(687341568)
		submorphs: 	#()
		fullBounds: 	421@362 corner: 558@380
		color: 	Color black
		extension: 	a MorphExtension (686292992)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [475@369 mouseUp 4431721 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(676069376)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	4431721
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	475@369
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(676069376)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[475@369 mouseUp 4431721 nil]
	Receiver's instance variables: 
		bounds: 	421@362 corner: 558@380
		owner: 	a MenuMorph(687341568)
		submorphs: 	#()
		fullBounds: 	421@362 corner: 558@380
		color: 	Color black
		extension: 	a MorphExtension (686292992)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[475@369 mouseUp 4431721 nil]
		aMorph: 	a ToggleMenuItemMorph(676069376)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[475@369 mouseUp 4431721 nil]
		aMorph: 	a ToggleMenuItemMorph(676069376)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(676069376)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[475@369 mouseUp 4431721 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	421@362 corner: 558@380
		owner: 	a MenuMorph(687341568)
		submorphs: 	#()
		fullBounds: 	421@362 corner: 558@380
		color: 	Color black
		extension: 	a MorphExtension (686292992)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[475@369 mouseUp 4431721 nil]
		aMorph: 	a MenuMorph(687341568)
		localEvt: 	[475@369 mouseUp 4431721 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(676069376)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(676069376)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[475@369 mouseUp 4431721 nil]
		aMorph: 	a MenuMorph(687341568)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(687341568)
	Arguments and temporary variables: 
		anEvent: 	[475@369 mouseUp 4431721 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	416@357 corner: 563@704
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(676069376)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	416@357 corner: 563@704
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (702283776) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(676069376)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(676069376)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(687341568)
	Arguments and temporary variables: 
		anEvent: 	[475@369 mouseUp 4431721 nil]
	Receiver's instance variables: 
		bounds: 	416@357 corner: 563@704
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(676069376)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	416@357 corner: 563@704
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (702283776) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(676069376)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(676069376)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(687341568)
	Arguments and temporary variables: 
		evt: 	[475@369 mouseUp 4431721 nil]
	Receiver's instance variables: 
		bounds: 	416@357 corner: 563@704
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(676069376)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	416@357 corner: 563@704
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (702283776) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(676069376)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(676069376)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[475@369 mouseUp 4431721 nil]
		focusHolder: 	a MenuMorph(687341568)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	475@369 corner: 491@385
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(96468992)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[475@369 mouseUp 4431721 nil]
		targetOffset: 	54@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 4431721 475 369 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 932@722
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(857210880) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[475@369 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 932@722
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(857210880) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[475@369 mouseUp 4431721 nil]
		focusHolder: 	a MenuMorph(687341568)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	475@369 corner: 491@385
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(96468992)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[475@369 mouseUp 4431721 nil]
		targetOffset: 	54@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 4431721 475 369 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[475@369 mouseUp 4431721 nil]
		focusHolder: 	a MenuMorph(687341568)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	475@369 corner: 491@385
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(96468992)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[475@369 mouseUp 4431721 nil]
		targetOffset: 	54@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 4431721 475 369 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[475@369 mouseUp 4431721 nil]
	Receiver's instance variables: 
		bounds: 	475@369 corner: 491@385
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(96468992)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[475@369 mouseUp 4431721 nil]
		targetOffset: 	54@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 4431721 475 369 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[475@369 mouseUp 4431721 nil]
		evt: 	[475@369 mouseUp 4431721 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	475@369 corner: 491@385
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(96468992)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[475@369 mouseUp 4431721 nil]
		targetOffset: 	54@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 4431721 475 369 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[475@369 mouseUp 4431721 nil]
		evtBuf: 	#(1 4431721 475 369 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	475@369 corner: 491@385
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(96468992)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[475@369 mouseUp 4431721 nil]
		targetOffset: 	54@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 4431721 475 369 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 932@722
		canvas: 	a FormCanvas on: DisplayScreen(932x722x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(857210880))(a PreDebu...etc...
		lastStepTime: 	4431723
		lastStepMessage: 	nil
		lastCycleTime: 	4431771
		alarms: 	a Heap()
		lastAlarmTime: 	4431723
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #activeSince
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
PrimitiveFailed: primitive #basicNew: in ByteString failed
30 December 2011 3:02:09 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

ByteString class(Object)>>primitiveFailed:
	Receiver: ByteString
	Arguments and temporary variables: 
		selector: 	#basicNew:
	Receiver's instance variables: 
		superclass: 	String
		methodDict: 	a MethodDictionary(#asByteArray->(ByteString>>#asByteArray "a Compi...etc...
		format: 	23554
		instanceVariables: 	nil
		organization: 	('accessing' at: at:put: byteAt: byteAt:put: byteSize indexOfAnyO...etc...
		subclasses: 	nil
		name: 	#ByteString
		classPool: 	a Dictionary(#NonAsciiMap->#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Strings'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString class(Object)>>primitiveFailed
	Receiver: ByteString
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	String
		methodDict: 	a MethodDictionary(#asByteArray->(ByteString>>#asByteArray "a Compi...etc...
		format: 	23554
		instanceVariables: 	nil
		organization: 	('accessing' at: at:put: byteAt: byteAt:put: byteSize indexOfAnyO...etc...
		subclasses: 	nil
		name: 	#ByteString
		classPool: 	a Dictionary(#NonAsciiMap->#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Strings'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString class(Behavior)>>basicNew:
	Receiver: ByteString
	Arguments and temporary variables: 
		sizeRequested: 	'test'
	Receiver's instance variables: 
		superclass: 	String
		methodDict: 	a MethodDictionary(#asByteArray->(ByteString>>#asByteArray "a Compi...etc...
		format: 	23554
		instanceVariables: 	nil
		organization: 	('accessing' at: at:put: byteAt: byteAt:put: byteSize indexOfAnyO...etc...
		subclasses: 	nil
		name: 	#ByteString
		classPool: 	a Dictionary(#NonAsciiMap->#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Strings'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString class(String class)>>new:
	Receiver: ByteString
	Arguments and temporary variables: 
		sizeRequested: 	'test'
	Receiver's instance variables: 
		superclass: 	String
		methodDict: 	a MethodDictionary(#asByteArray->(ByteString>>#asByteArray "a Compi...etc...
		format: 	23554
		instanceVariables: 	nil
		organization: 	('accessing' at: at:put: byteAt: byteAt:put: byteSize indexOfAnyO...etc...
		subclasses: 	nil
		name: 	#ByteString
		classPool: 	a Dictionary(#NonAsciiMap->#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Strings'
		traitComposition: 	{}
		localSelectors: 	nil


String class>>new:
	Receiver: String
	Arguments and temporary variables: 
		sizeRequested: 	'test'
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(size 281)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*Collections-arithmetic' * + - / // \\)
('*Compiler-Kernel' inv...etc...
		subclasses: 	{ByteString. WideString. Symbol}
		name: 	#String
		classPool: 	a Dictionary(#AsciiOrder->#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Strings'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		a: 	an Artist
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| a |
a := Artist new.
a artistName: (String n...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	| a |
	a := Artist new.
	a
		artistName: (String new: 'test')...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(650117120)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| a |
a := Artist new.
a artistName: (String n...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	4@524 corner: 444@691
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	4@524 corner: 444@691
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 90)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	4@524 corner: 444@691
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	4@524 corner: 444@691
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 90)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@66
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@66
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 5713129) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| a |
a := Artist new.
a artistName: (String new: ''test'').
...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	4@524 corner: 444@691
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	4@524 corner: 444@691
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 90)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	4@524 corner: 444@691
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	4@524 corner: 444@691
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 90)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| a |
a := Artist new.
a artistName: (String new: ''test'...etc...
		bindings: 	a Dictionary('a'->nil )
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(178520064)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[312@372 mouseUp 5713449 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	235@362 corner: 372@380
		owner: 	a MenuMorph(319029248)
		submorphs: 	#()
		fullBounds: 	235@362 corner: 372@380
		color: 	Color black
		extension: 	a MorphExtension (188743680)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(178520064)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[312@372 mouseUp 5713449 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	235@362 corner: 372@380
		owner: 	a MenuMorph(319029248)
		submorphs: 	#()
		fullBounds: 	235@362 corner: 372@380
		color: 	Color black
		extension: 	a MorphExtension (188743680)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(178520064)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[312@372 mouseUp 5713449 nil]
	Receiver's instance variables: 
		bounds: 	235@362 corner: 372@380
		owner: 	a MenuMorph(319029248)
		submorphs: 	#()
		fullBounds: 	235@362 corner: 372@380
		color: 	Color black
		extension: 	a MorphExtension (188743680)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(178520064)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[312@372 mouseUp 5713449 nil]
	Receiver's instance variables: 
		bounds: 	235@362 corner: 372@380
		owner: 	a MenuMorph(319029248)
		submorphs: 	#()
		fullBounds: 	235@362 corner: 372@380
		color: 	Color black
		extension: 	a MorphExtension (188743680)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [312@372 mouseUp 5713449 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(178520064)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	5713449
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	312@372
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(178520064)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[312@372 mouseUp 5713449 nil]
	Receiver's instance variables: 
		bounds: 	235@362 corner: 372@380
		owner: 	a MenuMorph(319029248)
		submorphs: 	#()
		fullBounds: 	235@362 corner: 372@380
		color: 	Color black
		extension: 	a MorphExtension (188743680)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[312@372 mouseUp 5713449 nil]
		aMorph: 	a ToggleMenuItemMorph(178520064)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[312@372 mouseUp 5713449 nil]
		aMorph: 	a ToggleMenuItemMorph(178520064)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(178520064)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[312@372 mouseUp 5713449 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	235@362 corner: 372@380
		owner: 	a MenuMorph(319029248)
		submorphs: 	#()
		fullBounds: 	235@362 corner: 372@380
		color: 	Color black
		extension: 	a MorphExtension (188743680)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[312@372 mouseUp 5713449 nil]
		aMorph: 	a MenuMorph(319029248)
		localEvt: 	[312@372 mouseUp 5713449 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(178520064)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(178520064)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[312@372 mouseUp 5713449 nil]
		aMorph: 	a MenuMorph(319029248)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(319029248)
	Arguments and temporary variables: 
		anEvent: 	[312@372 mouseUp 5713449 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	230@357 corner: 377@704
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(178520064)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	230@357 corner: 377@704
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (333971456) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(178520064)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(178520064)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(319029248)
	Arguments and temporary variables: 
		anEvent: 	[312@372 mouseUp 5713449 nil]
	Receiver's instance variables: 
		bounds: 	230@357 corner: 377@704
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(178520064)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	230@357 corner: 377@704
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (333971456) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(178520064)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(178520064)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(319029248)
	Arguments and temporary variables: 
		evt: 	[312@372 mouseUp 5713449 nil]
	Receiver's instance variables: 
		bounds: 	230@357 corner: 377@704
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(178520064)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	230@357 corner: 377@704
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (333971456) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(178520064)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(178520064)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[312@372 mouseUp 5713449 nil]
		focusHolder: 	a MenuMorph(319029248)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	312@372 corner: 328@388
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1011351552)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[312@372 mouseUp 5713449 nil]
		targetOffset: 	77@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5713449 312 372 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 932@722
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(652476416) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[312@372 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 932@722
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(652476416) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[312@372 mouseUp 5713449 nil]
		focusHolder: 	a MenuMorph(319029248)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	312@372 corner: 328@388
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1011351552)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[312@372 mouseUp 5713449 nil]
		targetOffset: 	77@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5713449 312 372 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[312@372 mouseUp 5713449 nil]
		focusHolder: 	a MenuMorph(319029248)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	312@372 corner: 328@388
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1011351552)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[312@372 mouseUp 5713449 nil]
		targetOffset: 	77@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5713449 312 372 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil



--- The full stack ---
ByteString class(Object)>>primitiveFailed:
ByteString class(Object)>>primitiveFailed
ByteString class(Behavior)>>basicNew:
ByteString class(String class)>>new:
String class>>new:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "addMember:" is nil
30 December 2011 3:34:17 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #addMember:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	addMember: a Band
		exception: 	MessageNotUnderstood: receiver of "addMember:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| a |
a := Band new.
a artistName: ''test''.
a...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ a addMember: Band new
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(473956352)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| a |
a := Band new.
a artistName: ''test''.
a...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	4@524 corner: 444@691
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	4@524 corner: 444@691
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(69 to: 91)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	4@524 corner: 444@691
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	4@524 corner: 444@691
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(69 to: 91)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@82
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@82
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 7640853) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| a |
a := Band new.
a artistName: ''test''.
a addMember: (So...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	4@524 corner: 444@691
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	4@524 corner: 444@691
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(69 to: 91)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	4@524 corner: 444@691
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	4@524 corner: 444@691
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(69 to: 91)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| a |
a := Band new.
a artistName: ''test''.
a addMember:...etc...
		bindings: 	a Dictionary('a'->nil )
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(664010752)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[388@374 mouseUp 7641299 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	292@362 corner: 429@380
		owner: 	a MenuMorph(656932864)
		submorphs: 	#()
		fullBounds: 	292@362 corner: 429@380
		color: 	Color black
		extension: 	a MorphExtension (674234368)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(664010752)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[388@374 mouseUp 7641299 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	292@362 corner: 429@380
		owner: 	a MenuMorph(656932864)
		submorphs: 	#()
		fullBounds: 	292@362 corner: 429@380
		color: 	Color black
		extension: 	a MorphExtension (674234368)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(664010752)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[388@374 mouseUp 7641299 nil]
	Receiver's instance variables: 
		bounds: 	292@362 corner: 429@380
		owner: 	a MenuMorph(656932864)
		submorphs: 	#()
		fullBounds: 	292@362 corner: 429@380
		color: 	Color black
		extension: 	a MorphExtension (674234368)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(664010752)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[388@374 mouseUp 7641299 nil]
	Receiver's instance variables: 
		bounds: 	292@362 corner: 429@380
		owner: 	a MenuMorph(656932864)
		submorphs: 	#()
		fullBounds: 	292@362 corner: 429@380
		color: 	Color black
		extension: 	a MorphExtension (674234368)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [388@374 mouseUp 7641299 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(664010752)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	7641299
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	388@374
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(664010752)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[388@374 mouseUp 7641299 nil]
	Receiver's instance variables: 
		bounds: 	292@362 corner: 429@380
		owner: 	a MenuMorph(656932864)
		submorphs: 	#()
		fullBounds: 	292@362 corner: 429@380
		color: 	Color black
		extension: 	a MorphExtension (674234368)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[388@374 mouseUp 7641299 nil]
		aMorph: 	a ToggleMenuItemMorph(664010752)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[388@374 mouseUp 7641299 nil]
		aMorph: 	a ToggleMenuItemMorph(664010752)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(664010752)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[388@374 mouseUp 7641299 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	292@362 corner: 429@380
		owner: 	a MenuMorph(656932864)
		submorphs: 	#()
		fullBounds: 	292@362 corner: 429@380
		color: 	Color black
		extension: 	a MorphExtension (674234368)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[388@374 mouseUp 7641299 nil]
		aMorph: 	a MenuMorph(656932864)
		localEvt: 	[388@374 mouseUp 7641299 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(664010752)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(664010752)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[388@374 mouseUp 7641299 nil]
		aMorph: 	a MenuMorph(656932864)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(656932864)
	Arguments and temporary variables: 
		anEvent: 	[388@374 mouseUp 7641299 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	287@357 corner: 434@704
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(664010752)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	287@357 corner: 434@704
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (671875072) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(664010752)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(664010752)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(656932864)
	Arguments and temporary variables: 
		anEvent: 	[388@374 mouseUp 7641299 nil]
	Receiver's instance variables: 
		bounds: 	287@357 corner: 434@704
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(664010752)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	287@357 corner: 434@704
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (671875072) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(664010752)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(664010752)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(656932864)
	Arguments and temporary variables: 
		evt: 	[388@374 mouseUp 7641299 nil]
	Receiver's instance variables: 
		bounds: 	287@357 corner: 434@704
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(664010752)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	287@357 corner: 434@704
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (671875072) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(664010752)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(664010752)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[388@374 mouseUp 7641299 nil]
		focusHolder: 	a MenuMorph(656932864)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	388@374 corner: 404@390
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	388@374 corner: 404@390
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(242745344)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[388@374 mouseUp 7641299 nil]
		targetOffset: 	96@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7641299 388 374 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 932@722
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(948436992) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[388@374 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 932@722
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(948436992) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[388@374 mouseUp 7641299 nil]
		focusHolder: 	a MenuMorph(656932864)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	388@374 corner: 404@390
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	388@374 corner: 404@390
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(242745344)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[388@374 mouseUp 7641299 nil]
		targetOffset: 	96@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7641299 388 374 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[388@374 mouseUp 7641299 nil]
		focusHolder: 	a MenuMorph(656932864)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	388@374 corner: 404@390
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	388@374 corner: 404@390
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(242745344)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[388@374 mouseUp 7641299 nil]
		targetOffset: 	96@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7641299 388 374 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[388@374 mouseUp 7641299 nil]
	Receiver's instance variables: 
		bounds: 	388@374 corner: 404@390
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	388@374 corner: 404@390
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(242745344)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[388@374 mouseUp 7641299 nil]
		targetOffset: 	96@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7641299 388 374 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[388@374 mouseUp 7641299 nil]
		evt: 	[388@374 mouseUp 7641299 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	388@374 corner: 404@390
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	388@374 corner: 404@390
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(242745344)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[388@374 mouseUp 7641299 nil]
		targetOffset: 	96@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7641299 388 374 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[388@374 mouseUp 7641299 nil]
		evtBuf: 	#(1 7641299 388 374 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	388@374 corner: 404@390
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	388@374 corner: 404@390
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(242745344)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[388@374 mouseUp 7641299 nil]
		targetOffset: 	96@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7641299 388 374 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 932@722
		canvas: 	a FormCanvas on: DisplayScreen(932x722x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(948436992))(a PreDebu...etc...
		lastStepTime: 	7641303
		lastStepMessage: 	nil
		lastCycleTime: 	7641343
		alarms: 	a Heap()
		lastAlarmTime: 	7641303
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #addMember:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
PluggableTextMorph(ScrollPane)>>mouseDown:
PluggableTextMorph(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
PluggableTextMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NonBooleanReceiver: proceed for truth.
30 December 2011 3:37:51 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

ThreadSafeTranscript(Object)>>mustBeBooleanIn:
	Receiver: Transcript
	Arguments and temporary variables: 
		context: 	[:each | (aBlock value: each)
		ifTrue: [newCollection add: each]] in ...etc...
		proceedValue: 	nil
	Receiver's instance variables: 
		stream: 	a WriteStream ''
		accessSemaphore: 	a Mutex


ThreadSafeTranscript(Object)>>mustBeBoolean
	Receiver: Transcript
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	a WriteStream ''
		accessSemaphore: 	a Mutex


[:each | (aBlock value: each)
		ifTrue: [newCollection add: each]] in Bag(Collection)>>select:
	Receiver: a Bag('test')
	Arguments and temporary variables: 
		aBlock: 	'test'
		newCollection: 	[:each | Transcript show: each]
		each: 	a Bag()
	Receiver's instance variables: 
		contents: 	a Dictionary('test'->1 )


[aBlock value: assoc key] in [:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
	Receiver: a Bag('test')
	Arguments and temporary variables: 
		aBlock: 	'test'->1
		assoc: 	[:each | (aBlock value: each)
		ifTrue: [newCollection add: each]]
	Receiver's instance variables: 
		contents: 	a Dictionary('test'->1 )


SmallInteger(Integer)>>timesRepeat:
	Receiver: 1
	Arguments and temporary variables: 
		aBlock: 	[aBlock value: assoc key]
		count: 	1
	Receiver's instance variables: 
1

[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
	Receiver: a Bag('test')
	Arguments and temporary variables: 
		aBlock: 	'test'->1
		assoc: 	[:each | (aBlock value: each)
		ifTrue: [newCollection add: each]]
	Receiver's instance variables: 
		contents: 	a Dictionary('test'->1 )


[:each | each
		ifNotNil: [aBlock value: each]] in Dictionary>>associationsDo:
	Receiver: a Dictionary('test'->1 )
	Arguments and temporary variables: 
		aBlock: 	'test'->1
		each: 	[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]]
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. nil. nil. nil. ('test'->1). nil. nil}


Array(SequenceableCollection)>>do:
	Receiver: {nil. nil. nil. nil. ('test'->1). nil. nil}
	Arguments and temporary variables: 
		aBlock: 	[:each | each
		ifNotNil: [aBlock value: each]]
		index: 	5
		indexLimiT: 	7
	Receiver's instance variables: 
{nil. nil. nil. nil. ('test'->1). nil. nil}

Dictionary>>associationsDo:
	Receiver: a Dictionary('test'->1 )
	Arguments and temporary variables: 
		aBlock: 	[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]]
	Receiver's instance variables: 
		tally: 	1
		array: 	{nil. nil. nil. nil. ('test'->1). nil. nil}


Bag>>do:
	Receiver: a Bag('test')
	Arguments and temporary variables: 
		aBlock: 	[:each | (aBlock value: each)
		ifTrue: [newCollection add: each]]
	Receiver's instance variables: 
		contents: 	a Dictionary('test'->1 )


Bag(Collection)>>select:
	Receiver: a Bag('test')
	Arguments and temporary variables: 
		aBlock: 	[:each | Transcript show: each]
		newCollection: 	a Bag()
	Receiver's instance variables: 
		contents: 	a Dictionary('test'->1 )


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		a: 	a Band
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| a |
a := Band new.
a artistName: ''test''.
a...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	| a |
	a := Band new.
	a artistName: 'test'.
	a addMember: So...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(983302144)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| a |
a := Band new.
a artistName: ''test''.
a...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	4@524 corner: 444@691
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	4@524 corner: 444@691
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 145)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	4@524 corner: 444@691
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	4@524 corner: 444@691
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 145)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@98
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@98
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 7855223) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| a |
a := Band new.
a artistName: ''test''.
a addMember: (So...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	4@524 corner: 444@691
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	4@524 corner: 444@691
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 145)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	4@524 corner: 444@691
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	4@524 corner: 444@691
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 145)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| a |
a := Band new.
a artistName: ''test''.
a addMember:...etc...
		bindings: 	a Dictionary('a'->nil )
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(575930368)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[394@368 mouseUp 7855553 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	340@362 corner: 477@380
		owner: 	a MenuMorph(568852480)
		submorphs: 	#()
		fullBounds: 	340@362 corner: 477@380
		color: 	Color black
		extension: 	a MorphExtension (586153984)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(575930368)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[394@368 mouseUp 7855553 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	340@362 corner: 477@380
		owner: 	a MenuMorph(568852480)
		submorphs: 	#()
		fullBounds: 	340@362 corner: 477@380
		color: 	Color black
		extension: 	a MorphExtension (586153984)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(575930368)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[394@368 mouseUp 7855553 nil]
	Receiver's instance variables: 
		bounds: 	340@362 corner: 477@380
		owner: 	a MenuMorph(568852480)
		submorphs: 	#()
		fullBounds: 	340@362 corner: 477@380
		color: 	Color black
		extension: 	a MorphExtension (586153984)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(575930368)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[394@368 mouseUp 7855553 nil]
	Receiver's instance variables: 
		bounds: 	340@362 corner: 477@380
		owner: 	a MenuMorph(568852480)
		submorphs: 	#()
		fullBounds: 	340@362 corner: 477@380
		color: 	Color black
		extension: 	a MorphExtension (586153984)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [394@368 mouseUp 7855553 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(575930368)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	7855553
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	394@368
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(575930368)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[394@368 mouseUp 7855553 nil]
	Receiver's instance variables: 
		bounds: 	340@362 corner: 477@380
		owner: 	a MenuMorph(568852480)
		submorphs: 	#()
		fullBounds: 	340@362 corner: 477@380
		color: 	Color black
		extension: 	a MorphExtension (586153984)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[394@368 mouseUp 7855553 nil]
		aMorph: 	a ToggleMenuItemMorph(575930368)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[394@368 mouseUp 7855553 nil]
		aMorph: 	a ToggleMenuItemMorph(575930368)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(575930368)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[394@368 mouseUp 7855553 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	340@362 corner: 477@380
		owner: 	a MenuMorph(568852480)
		submorphs: 	#()
		fullBounds: 	340@362 corner: 477@380
		color: 	Color black
		extension: 	a MorphExtension (586153984)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[394@368 mouseUp 7855553 nil]
		aMorph: 	a MenuMorph(568852480)
		localEvt: 	[394@368 mouseUp 7855553 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(575930368)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(575930368)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[394@368 mouseUp 7855553 nil]
		aMorph: 	a MenuMorph(568852480)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(568852480)
	Arguments and temporary variables: 
		anEvent: 	[394@368 mouseUp 7855553 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	335@357 corner: 482@704
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(575930368)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	335@357 corner: 482@704
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (583794688) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(575930368)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(575930368)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(568852480)
	Arguments and temporary variables: 
		anEvent: 	[394@368 mouseUp 7855553 nil]
	Receiver's instance variables: 
		bounds: 	335@357 corner: 482@704
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(575930368)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	335@357 corner: 482@704
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (583794688) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(575930368)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(575930368)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(568852480)
	Arguments and temporary variables: 
		evt: 	[394@368 mouseUp 7855553 nil]
	Receiver's instance variables: 
		bounds: 	335@357 corner: 482@704
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(575930368)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	335@357 corner: 482@704
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (583794688) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(575930368)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(575930368)'Do it (d)' a T...etc...



--- The full stack ---
ThreadSafeTranscript(Object)>>mustBeBooleanIn:
ThreadSafeTranscript(Object)>>mustBeBoolean
[:each | (aBlock value: each)
		ifTrue: [newCollection add: each]] in Bag(Collection)>>select:
[aBlock value: assoc key] in [:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
SmallInteger(Integer)>>timesRepeat:
[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
[:each | each
		ifNotNil: [aBlock value: each]] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Bag>>do:
Bag(Collection)>>select:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Instances of SmallInteger are not indexable
30 December 2011 4:55:47 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

SmallInteger(Object)>>error:
	Receiver: 1988
	Arguments and temporary variables: 
		aString: 	'Instances of SmallInteger are not indexable'
	Receiver's instance variables: 
1988

SmallInteger(Object)>>errorNotIndexable
	Receiver: 1988
	Arguments and temporary variables: 

	Receiver's instance variables: 
1988

SmallInteger(Object)>>size
	Receiver: 1988
	Arguments and temporary variables: 

	Receiver's instance variables: 
1988

ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
	Receiver: 'Sylvain Aertbelien active since '
	Arguments and temporary variables: 
		start: 	33
		stop: 	32
		replacementCollection: 	1988
		newSequenceableCollection: 	nil
		newSize: 	nil
		endReplacement: 	nil
	Receiver's instance variables: 
'Sylvain Aertbelien active since '

ByteString(SequenceableCollection)>>,
	Receiver: 'Sylvain Aertbelien active since '
	Arguments and temporary variables: 
		otherCollection: 	1988
	Receiver's instance variables: 
'Sylvain Aertbelien active since '

[:each | Transcript show: each artistName , ' active since ' , each activeSince , cr] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		each: 	a Solo
	Receiver's instance variables: 
nil

[aBlock value: assoc key] in [:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
	Receiver: a Bag(a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		assoc: 	[:each | Transcript show: each artistName , ' active since ' , each acti...etc...
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 )


SmallInteger(Integer)>>timesRepeat:
	Receiver: 1
	Arguments and temporary variables: 
		aBlock: 	[aBlock value: assoc key]
		count: 	1
	Receiver's instance variables: 
1

[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
	Receiver: a Bag(a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		assoc: 	[:each | Transcript show: each artistName , ' active since ' , each acti...etc...
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 )


[:each | each
		ifNotNil: [aBlock value: each]] in Dictionary>>associationsDo:
	Receiver: a Dictionary(a Solo->1 a Solo->1 )
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		each: 	[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]]
	Receiver's instance variables: 
		tally: 	2
		array: 	an Array(nil nil nil nil nil a Solo->1 a Solo->1)


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil nil nil nil nil a Solo->1 a Solo->1)
	Arguments and temporary variables: 
		aBlock: 	[:each | each
		ifNotNil: [aBlock value: each]]
		index: 	6
		indexLimiT: 	7
	Receiver's instance variables: 
an Array(nil nil nil nil nil a Solo->1 a Solo->1)

Dictionary>>associationsDo:
	Receiver: a Dictionary(a Solo->1 a Solo->1 )
	Arguments and temporary variables: 
		aBlock: 	[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]]
	Receiver's instance variables: 
		tally: 	2
		array: 	an Array(nil nil nil nil nil a Solo->1 a Solo->1)


Bag>>do:
	Receiver: a Bag(a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	[:each | Transcript show: each artistName , ' active since ' , each act...etc...
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 )


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex |
clement := Solo new a...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	| clement sylvain cpex |
	clement := Solo new artistName: 'Cl...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(274202624)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex |
clement := Solo new a...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 381)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 381)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 747@130
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 747@130
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 12530677) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex |
clement := Solo new artistName: ''Cl...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 381)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 381)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex |
clement := Solo new artistName: ...etc...
		bindings: 	a Dictionary('a'->a Band 'cr'->nil )
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(624689152)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[497@283 mouseUp 12530923 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	465@276 corner: 602@294
		owner: 	a MenuMorph(617611264)
		submorphs: 	#()
		fullBounds: 	465@276 corner: 602@294
		color: 	Color black
		extension: 	a MorphExtension (634912768)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(624689152)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[497@283 mouseUp 12530923 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	465@276 corner: 602@294
		owner: 	a MenuMorph(617611264)
		submorphs: 	#()
		fullBounds: 	465@276 corner: 602@294
		color: 	Color black
		extension: 	a MorphExtension (634912768)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(624689152)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[497@283 mouseUp 12530923 nil]
	Receiver's instance variables: 
		bounds: 	465@276 corner: 602@294
		owner: 	a MenuMorph(617611264)
		submorphs: 	#()
		fullBounds: 	465@276 corner: 602@294
		color: 	Color black
		extension: 	a MorphExtension (634912768)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(624689152)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[497@283 mouseUp 12530923 nil]
	Receiver's instance variables: 
		bounds: 	465@276 corner: 602@294
		owner: 	a MenuMorph(617611264)
		submorphs: 	#()
		fullBounds: 	465@276 corner: 602@294
		color: 	Color black
		extension: 	a MorphExtension (634912768)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [497@283 mouseUp 12530923 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(624689152)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	12530923
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	497@283
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(624689152)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[497@283 mouseUp 12530923 nil]
	Receiver's instance variables: 
		bounds: 	465@276 corner: 602@294
		owner: 	a MenuMorph(617611264)
		submorphs: 	#()
		fullBounds: 	465@276 corner: 602@294
		color: 	Color black
		extension: 	a MorphExtension (634912768)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[497@283 mouseUp 12530923 nil]
		aMorph: 	a ToggleMenuItemMorph(624689152)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[497@283 mouseUp 12530923 nil]
		aMorph: 	a ToggleMenuItemMorph(624689152)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(624689152)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[497@283 mouseUp 12530923 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	465@276 corner: 602@294
		owner: 	a MenuMorph(617611264)
		submorphs: 	#()
		fullBounds: 	465@276 corner: 602@294
		color: 	Color black
		extension: 	a MorphExtension (634912768)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[497@283 mouseUp 12530923 nil]
		aMorph: 	a MenuMorph(617611264)
		localEvt: 	[497@283 mouseUp 12530923 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(624689152)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(624689152)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[497@283 mouseUp 12530923 nil]
		aMorph: 	a MenuMorph(617611264)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(617611264)
	Arguments and temporary variables: 
		anEvent: 	[497@283 mouseUp 12530923 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	460@271 corner: 607@618
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(624689152)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	460@271 corner: 607@618
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (632553472) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(624689152)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(624689152)'Do it (d)' a T...etc...



--- The full stack ---
SmallInteger(Object)>>error:
SmallInteger(Object)>>errorNotIndexable
SmallInteger(Object)>>size
ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
ByteString(SequenceableCollection)>>,
[:each | Transcript show: each artistName , ' active since ' , each activeSince , cr] in UndefinedObject>>DoIt
[aBlock value: assoc key] in [:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
SmallInteger(Integer)>>timesRepeat:
[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
[:each | each
		ifNotNil: [aBlock value: each]] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Bag>>do:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Instances of SmallInteger are not indexable
30 December 2011 4:55:56 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

SmallInteger(Object)>>error:
	Receiver: 1988
	Arguments and temporary variables: 
		aString: 	'Instances of SmallInteger are not indexable'
	Receiver's instance variables: 
1988

SmallInteger(Object)>>errorNotIndexable
	Receiver: 1988
	Arguments and temporary variables: 

	Receiver's instance variables: 
1988

SmallInteger(Object)>>size
	Receiver: 1988
	Arguments and temporary variables: 

	Receiver's instance variables: 
1988

ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
	Receiver: 'Sylvain Aertbelien active since '
	Arguments and temporary variables: 
		start: 	33
		stop: 	32
		replacementCollection: 	1988
		newSequenceableCollection: 	nil
		newSize: 	nil
		endReplacement: 	nil
	Receiver's instance variables: 
'Sylvain Aertbelien active since '

ByteString(SequenceableCollection)>>,
	Receiver: 'Sylvain Aertbelien active since '
	Arguments and temporary variables: 
		otherCollection: 	1988
	Receiver's instance variables: 
'Sylvain Aertbelien active since '

[:each | Transcript show: each artistName , ' active since ' , each activeSince;
		 cr] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		each: 	a Solo
	Receiver's instance variables: 
nil

[aBlock value: assoc key] in [:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
	Receiver: a Bag(a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		assoc: 	[:each | Transcript show: each artistName , ' active since ' , each acti...etc...
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 )


SmallInteger(Integer)>>timesRepeat:
	Receiver: 1
	Arguments and temporary variables: 
		aBlock: 	[aBlock value: assoc key]
		count: 	1
	Receiver's instance variables: 
1

[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
	Receiver: a Bag(a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		assoc: 	[:each | Transcript show: each artistName , ' active since ' , each acti...etc...
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 )


[:each | each
		ifNotNil: [aBlock value: each]] in Dictionary>>associationsDo:
	Receiver: a Dictionary(a Solo->1 a Solo->1 )
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		each: 	[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]]
	Receiver's instance variables: 
		tally: 	2
		array: 	an Array(nil nil a Solo->1 a Solo->1 nil nil nil)


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil nil a Solo->1 a Solo->1 nil nil nil)
	Arguments and temporary variables: 
		aBlock: 	[:each | each
		ifNotNil: [aBlock value: each]]
		index: 	3
		indexLimiT: 	7
	Receiver's instance variables: 
an Array(nil nil a Solo->1 a Solo->1 nil nil nil)

Dictionary>>associationsDo:
	Receiver: a Dictionary(a Solo->1 a Solo->1 )
	Arguments and temporary variables: 
		aBlock: 	[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]]
	Receiver's instance variables: 
		tally: 	2
		array: 	an Array(nil nil a Solo->1 a Solo->1 nil nil nil)


Bag>>do:
	Receiver: a Bag(a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	[:each | Transcript show: each artistName , ' active since ' , each act...etc...
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 )


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex |
clement := Solo new a...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	| clement sylvain cpex |
	clement := Solo new artistName: 'Cl...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(543162368)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex |
clement := Solo new a...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 381)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 381)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 747@130
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 747@130
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 12540323) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex |
clement := Solo new artistName: ''Cl...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 381)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 381)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex |
clement := Solo new artistName: ...etc...
		bindings: 	a Dictionary('a'->a Band 'cr'->nil )
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(710672384)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[460@287 mouseUp 12540597 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	423@276 corner: 560@294
		owner: 	a MenuMorph(703594496)
		submorphs: 	#()
		fullBounds: 	423@276 corner: 560@294
		color: 	Color black
		extension: 	a MorphExtension (720896000)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(710672384)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[460@287 mouseUp 12540597 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	423@276 corner: 560@294
		owner: 	a MenuMorph(703594496)
		submorphs: 	#()
		fullBounds: 	423@276 corner: 560@294
		color: 	Color black
		extension: 	a MorphExtension (720896000)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(710672384)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[460@287 mouseUp 12540597 nil]
	Receiver's instance variables: 
		bounds: 	423@276 corner: 560@294
		owner: 	a MenuMorph(703594496)
		submorphs: 	#()
		fullBounds: 	423@276 corner: 560@294
		color: 	Color black
		extension: 	a MorphExtension (720896000)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(710672384)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[460@287 mouseUp 12540597 nil]
	Receiver's instance variables: 
		bounds: 	423@276 corner: 560@294
		owner: 	a MenuMorph(703594496)
		submorphs: 	#()
		fullBounds: 	423@276 corner: 560@294
		color: 	Color black
		extension: 	a MorphExtension (720896000)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [460@287 mouseUp 12540597 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(710672384)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	12540597
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	460@287
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(710672384)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[460@287 mouseUp 12540597 nil]
	Receiver's instance variables: 
		bounds: 	423@276 corner: 560@294
		owner: 	a MenuMorph(703594496)
		submorphs: 	#()
		fullBounds: 	423@276 corner: 560@294
		color: 	Color black
		extension: 	a MorphExtension (720896000)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[460@287 mouseUp 12540597 nil]
		aMorph: 	a ToggleMenuItemMorph(710672384)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[460@287 mouseUp 12540597 nil]
		aMorph: 	a ToggleMenuItemMorph(710672384)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(710672384)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[460@287 mouseUp 12540597 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	423@276 corner: 560@294
		owner: 	a MenuMorph(703594496)
		submorphs: 	#()
		fullBounds: 	423@276 corner: 560@294
		color: 	Color black
		extension: 	a MorphExtension (720896000)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[460@287 mouseUp 12540597 nil]
		aMorph: 	a MenuMorph(703594496)
		localEvt: 	[460@287 mouseUp 12540597 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(710672384)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(710672384)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[460@287 mouseUp 12540597 nil]
		aMorph: 	a MenuMorph(703594496)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(703594496)
	Arguments and temporary variables: 
		anEvent: 	[460@287 mouseUp 12540597 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	418@271 corner: 565@618
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(710672384)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	418@271 corner: 565@618
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (718536704) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(710672384)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(710672384)'Do it (d)' a T...etc...



--- The full stack ---
SmallInteger(Object)>>error:
SmallInteger(Object)>>errorNotIndexable
SmallInteger(Object)>>size
ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
ByteString(SequenceableCollection)>>,
[:each | Transcript show: each artistName , ' active since ' , each activeSince;
		 cr] in UndefinedObject>>DoIt
[aBlock value: assoc key] in [:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
SmallInteger(Integer)>>timesRepeat:
[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
[:each | each
		ifNotNil: [aBlock value: each]] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Bag>>do:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
30 December 2011 5:20:50 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(660602880)
	Arguments and temporary variables: 
		anEvent: 	[103@270 101@279 mouseEnter 14034283 nil]
	Receiver's instance variables: 
		bounds: 	55@279 corner: 255@327
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	55@279 corner: 255@327
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (676593664) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	255@279
		lastActivity: 	14032487


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [103@270 101@279 mouseEnter 14034283 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(660602880)
	Receiver's instance variables: 
		timeStamp: 	14034283
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	101@279
		handler: 	nil
		wasHandled: 	false
		startPoint: 	103@270
		trail: 	{(103@275). (101@278). (101@279)}


MouseMoveEvent>>sentTo:
	Receiver: [103@270 101@279 mouseEnter 14034283 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(660602880)
	Receiver's instance variables: 
		timeStamp: 	14034283
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	101@279
		handler: 	nil
		wasHandled: 	false
		startPoint: 	103@270
		trail: 	{(103@275). (101@278). (101@279)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(660602880)
	Arguments and temporary variables: 
		anEvent: 	[103@270 101@279 mouseEnter 14034283 nil]
	Receiver's instance variables: 
		bounds: 	55@279 corner: 255@327
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	55@279 corner: 255@327
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (676593664) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	255@279
		lastActivity: 	14032487


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[103@270 101@279 mouseEnter 14034283 nil]
		originalEvent: 	[103@270 101@279 mouseMove 14034283 nil]
		aMorph: 	an OMenuMorph(660602880)
		transformedEvent: 	[103@270 101@279 mouseEnter 14034283 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[103@270 101@279 mouseEnter 14034283 nil]
		aLeftMorph: 	an OMenuMorph(660602880)
		anEvent: 	[103@270 101@279 mouseMove 14034283 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[103@270 101@279 mouseEnter 14034283 nil]
		aLeftMorph: 	an OMenuMorph(660602880)
		anEvent: 	[103@270 101@279 mouseMove 14034283 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(660602880)
		asMouseEnterEvent: 	[103@270 101@279 mouseMove 14034283 nil]
		anEnteredMorph: 	[103@270 101@279 mouseEnter 14034283 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(660602880))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(660602880))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[103@270 101@279 mouseMove 14034283 nil]
		asMouseEnterEvent: 	[103@270 101@279 mouseEnter 14034283 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[103@270 101@279 mouseMove 14034283 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[103@270 101@279 mouseMove 14034283 nil]
		evt: 	[103@270 101@279 mouseMove 14034283 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	81@278 corner: 97@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	81@278 corner: 97@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(990117888)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[81@280 81@278 mouseMove 14034587 nil]
		targetOffset: 	87@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 14034587 81 279 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[103@270 101@279 mouseMove 14034283 nil]
		evtBuf: 	#(1 14034283 103 275 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	81@278 corner: 97@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	81@278 corner: 97@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(990117888)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[81@280 81@278 mouseMove 14034587 nil]
		targetOffset: 	87@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 14034587 81 279 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(677904384) an OM...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
30 December 2011 5:20:51 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(660602880)
	Arguments and temporary variables: 
		anEvent: 	[101@279 99@281 mouseEnter 14034299 nil]
	Receiver's instance variables: 
		bounds: 	55@279 corner: 255@327
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	55@279 corner: 255@327
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (676593664) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	255@279
		lastActivity: 	14032487


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [101@279 99@281 mouseEnter 14034299 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(660602880)
	Receiver's instance variables: 
		timeStamp: 	14034299
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	99@281
		handler: 	nil
		wasHandled: 	false
		startPoint: 	101@279
		trail: 	{(100@280). (100@281). (99@281)}


MouseMoveEvent>>sentTo:
	Receiver: [101@279 99@281 mouseEnter 14034299 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(660602880)
	Receiver's instance variables: 
		timeStamp: 	14034299
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	99@281
		handler: 	nil
		wasHandled: 	false
		startPoint: 	101@279
		trail: 	{(100@280). (100@281). (99@281)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(660602880)
	Arguments and temporary variables: 
		anEvent: 	[101@279 99@281 mouseEnter 14034299 nil]
	Receiver's instance variables: 
		bounds: 	55@279 corner: 255@327
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	55@279 corner: 255@327
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (676593664) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	255@279
		lastActivity: 	14032487


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[101@279 99@281 mouseEnter 14034299 nil]
		originalEvent: 	[101@279 99@281 mouseMove 14034299 nil]
		aMorph: 	an OMenuMorph(660602880)
		transformedEvent: 	[101@279 99@281 mouseEnter 14034299 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[101@279 99@281 mouseEnter 14034299 nil]
		aLeftMorph: 	an OMenuMorph(660602880)
		anEvent: 	[101@279 99@281 mouseMove 14034299 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[101@279 99@281 mouseEnter 14034299 nil]
		aLeftMorph: 	an OMenuMorph(660602880)
		anEvent: 	[101@279 99@281 mouseMove 14034299 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(660602880)
		asMouseEnterEvent: 	[101@279 99@281 mouseMove 14034299 nil]
		anEnteredMorph: 	[101@279 99@281 mouseEnter 14034299 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(660602880))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(660602880))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[101@279 99@281 mouseMove 14034299 nil]
		asMouseEnterEvent: 	[101@279 99@281 mouseEnter 14034299 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[101@279 99@281 mouseMove 14034299 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[101@279 99@281 mouseMove 14034299 nil]
		evt: 	[101@279 99@281 mouseMove 14034299 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	81@278 corner: 97@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	81@278 corner: 97@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(239861760)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[81@280 81@278 mouseMove 14034587 nil]
		targetOffset: 	87@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 14034587 81 279 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[101@279 99@281 mouseMove 14034299 nil]
		evtBuf: 	#(1 14034299 100 280 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	81@278 corner: 97@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	81@278 corner: 97@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(239861760)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[81@280 81@278 mouseMove 14034587 nil]
		targetOffset: 	87@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 14034587 81 279 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(866648064) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
30 December 2011 5:20:51 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(660602880)
	Arguments and temporary variables: 
		anEvent: 	[99@281 97@283 mouseEnter 14034323 nil]
	Receiver's instance variables: 
		bounds: 	55@279 corner: 255@327
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	55@279 corner: 255@327
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (676593664) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	255@279
		lastActivity: 	14032487


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [99@281 97@283 mouseEnter 14034323 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(660602880)
	Receiver's instance variables: 
		timeStamp: 	14034323
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	97@283
		handler: 	nil
		wasHandled: 	false
		startPoint: 	99@281
		trail: 	{(98@282). (97@283)}


MouseMoveEvent>>sentTo:
	Receiver: [99@281 97@283 mouseEnter 14034323 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(660602880)
	Receiver's instance variables: 
		timeStamp: 	14034323
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	97@283
		handler: 	nil
		wasHandled: 	false
		startPoint: 	99@281
		trail: 	{(98@282). (97@283)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(660602880)
	Arguments and temporary variables: 
		anEvent: 	[99@281 97@283 mouseEnter 14034323 nil]
	Receiver's instance variables: 
		bounds: 	55@279 corner: 255@327
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	55@279 corner: 255@327
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (676593664) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	255@279
		lastActivity: 	14032487


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[99@281 97@283 mouseEnter 14034323 nil]
		originalEvent: 	[99@281 97@283 mouseMove 14034323 nil]
		aMorph: 	an OMenuMorph(660602880)
		transformedEvent: 	[99@281 97@283 mouseEnter 14034323 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[99@281 97@283 mouseEnter 14034323 nil]
		aLeftMorph: 	an OMenuMorph(660602880)
		anEvent: 	[99@281 97@283 mouseMove 14034323 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[99@281 97@283 mouseEnter 14034323 nil]
		aLeftMorph: 	an OMenuMorph(660602880)
		anEvent: 	[99@281 97@283 mouseMove 14034323 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(660602880)
		asMouseEnterEvent: 	[99@281 97@283 mouseMove 14034323 nil]
		anEnteredMorph: 	[99@281 97@283 mouseEnter 14034323 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(660602880))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(660602880))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[99@281 97@283 mouseMove 14034323 nil]
		asMouseEnterEvent: 	[99@281 97@283 mouseEnter 14034323 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[99@281 97@283 mouseMove 14034323 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[99@281 97@283 mouseMove 14034323 nil]
		evt: 	[99@281 97@283 mouseMove 14034323 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	81@278 corner: 97@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	81@278 corner: 97@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(293863424)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[81@280 81@278 mouseMove 14034587 nil]
		targetOffset: 	87@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 14034587 81 279 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[99@281 97@283 mouseMove 14034323 nil]
		evtBuf: 	#(1 14034323 98 282 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	81@278 corner: 97@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	81@278 corner: 97@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(293863424)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[81@280 81@278 mouseMove 14034587 nil]
		targetOffset: 	87@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 14034587 81 279 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1055391744) a Pr...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
30 December 2011 5:20:51 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(660602880)
	Arguments and temporary variables: 
		anEvent: 	[97@283 96@284 mouseEnter 14034341 nil]
	Receiver's instance variables: 
		bounds: 	55@279 corner: 255@327
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	55@279 corner: 255@327
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (676593664) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	255@279
		lastActivity: 	14032487


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [97@283 96@284 mouseEnter 14034341 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(660602880)
	Receiver's instance variables: 
		timeStamp: 	14034341
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	96@284
		handler: 	nil
		wasHandled: 	false
		startPoint: 	97@283
		trail: 	{(96@284)}


MouseMoveEvent>>sentTo:
	Receiver: [97@283 96@284 mouseEnter 14034341 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(660602880)
	Receiver's instance variables: 
		timeStamp: 	14034341
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	96@284
		handler: 	nil
		wasHandled: 	false
		startPoint: 	97@283
		trail: 	{(96@284)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(660602880)
	Arguments and temporary variables: 
		anEvent: 	[97@283 96@284 mouseEnter 14034341 nil]
	Receiver's instance variables: 
		bounds: 	55@279 corner: 255@327
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	55@279 corner: 255@327
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (676593664) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	255@279
		lastActivity: 	14032487


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[97@283 96@284 mouseEnter 14034341 nil]
		originalEvent: 	[97@283 96@284 mouseMove 14034341 nil]
		aMorph: 	an OMenuMorph(660602880)
		transformedEvent: 	[97@283 96@284 mouseEnter 14034341 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[97@283 96@284 mouseEnter 14034341 nil]
		aLeftMorph: 	an OMenuMorph(660602880)
		anEvent: 	[97@283 96@284 mouseMove 14034341 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[97@283 96@284 mouseEnter 14034341 nil]
		aLeftMorph: 	an OMenuMorph(660602880)
		anEvent: 	[97@283 96@284 mouseMove 14034341 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(660602880)
		asMouseEnterEvent: 	[97@283 96@284 mouseMove 14034341 nil]
		anEnteredMorph: 	[97@283 96@284 mouseEnter 14034341 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(660602880))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(660602880))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[97@283 96@284 mouseMove 14034341 nil]
		asMouseEnterEvent: 	[97@283 96@284 mouseEnter 14034341 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[97@283 96@284 mouseMove 14034341 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[97@283 96@284 mouseMove 14034341 nil]
		evt: 	[97@283 96@284 mouseMove 14034341 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	81@278 corner: 97@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	81@278 corner: 97@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(680525824)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[81@280 81@278 mouseMove 14034587 nil]
		targetOffset: 	87@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 14034587 81 279 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[97@283 96@284 mouseMove 14034341 nil]
		evtBuf: 	#(1 14034341 96 284 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	81@278 corner: 97@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	81@278 corner: 97@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(680525824)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[81@280 81@278 mouseMove 14034587 nil]
		targetOffset: 	87@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 14034587 81 279 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(368312320) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
30 December 2011 5:20:51 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(660602880)
	Arguments and temporary variables: 
		anEvent: 	[96@284 94@284 mouseEnter 14034355 nil]
	Receiver's instance variables: 
		bounds: 	55@279 corner: 255@327
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	55@279 corner: 255@327
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (676593664) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	255@279
		lastActivity: 	14032487


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [96@284 94@284 mouseEnter 14034355 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(660602880)
	Receiver's instance variables: 
		timeStamp: 	14034355
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	94@284
		handler: 	nil
		wasHandled: 	false
		startPoint: 	96@284
		trail: 	{(95@284). (94@284)}


MouseMoveEvent>>sentTo:
	Receiver: [96@284 94@284 mouseEnter 14034355 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(660602880)
	Receiver's instance variables: 
		timeStamp: 	14034355
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	94@284
		handler: 	nil
		wasHandled: 	false
		startPoint: 	96@284
		trail: 	{(95@284). (94@284)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(660602880)
	Arguments and temporary variables: 
		anEvent: 	[96@284 94@284 mouseEnter 14034355 nil]
	Receiver's instance variables: 
		bounds: 	55@279 corner: 255@327
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	55@279 corner: 255@327
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (676593664) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	255@279
		lastActivity: 	14032487


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[96@284 94@284 mouseEnter 14034355 nil]
		originalEvent: 	[96@284 94@284 mouseMove 14034355 nil]
		aMorph: 	an OMenuMorph(660602880)
		transformedEvent: 	[96@284 94@284 mouseEnter 14034355 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[96@284 94@284 mouseEnter 14034355 nil]
		aLeftMorph: 	an OMenuMorph(660602880)
		anEvent: 	[96@284 94@284 mouseMove 14034355 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[96@284 94@284 mouseEnter 14034355 nil]
		aLeftMorph: 	an OMenuMorph(660602880)
		anEvent: 	[96@284 94@284 mouseMove 14034355 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(660602880)
		asMouseEnterEvent: 	[96@284 94@284 mouseMove 14034355 nil]
		anEnteredMorph: 	[96@284 94@284 mouseEnter 14034355 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(660602880))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(660602880))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[96@284 94@284 mouseMove 14034355 nil]
		asMouseEnterEvent: 	[96@284 94@284 mouseEnter 14034355 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[96@284 94@284 mouseMove 14034355 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[96@284 94@284 mouseMove 14034355 nil]
		evt: 	[96@284 94@284 mouseMove 14034355 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	81@278 corner: 97@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	81@278 corner: 97@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(413138944)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[81@280 81@278 mouseMove 14034587 nil]
		targetOffset: 	87@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 14034587 81 279 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[96@284 94@284 mouseMove 14034355 nil]
		evtBuf: 	#(1 14034355 95 284 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	81@278 corner: 97@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	81@278 corner: 97@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(413138944)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[81@280 81@278 mouseMove 14034587 nil]
		targetOffset: 	87@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 14034587 81 279 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(100925440) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
30 December 2011 5:20:51 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(660602880)
	Arguments and temporary variables: 
		anEvent: 	[96@284 94@284 mouseEnter 14034355 nil]
	Receiver's instance variables: 
		bounds: 	55@279 corner: 255@327
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	55@279 corner: 255@327
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (676593664) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	255@279
		lastActivity: 	14032487


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [96@284 94@284 mouseEnter 14034355 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(660602880)
	Receiver's instance variables: 
		timeStamp: 	14034355
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	94@284
		handler: 	nil
		wasHandled: 	false
		startPoint: 	96@284
		trail: 	{(95@284). (94@284)}


MouseMoveEvent>>sentTo:
	Receiver: [96@284 94@284 mouseEnter 14034355 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(660602880)
	Receiver's instance variables: 
		timeStamp: 	14034355
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	94@284
		handler: 	nil
		wasHandled: 	false
		startPoint: 	96@284
		trail: 	{(95@284). (94@284)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(660602880)
	Arguments and temporary variables: 
		anEvent: 	[96@284 94@284 mouseEnter 14034355 nil]
	Receiver's instance variables: 
		bounds: 	55@279 corner: 255@327
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	55@279 corner: 255@327
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (676593664) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	255@279
		lastActivity: 	14032487


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[96@284 94@284 mouseEnter 14034355 nil]
		originalEvent: 	[96@284 94@284 mouseMove 14034355 nil]
		aMorph: 	an OMenuMorph(660602880)
		transformedEvent: 	[96@284 94@284 mouseEnter 14034355 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[96@284 94@284 mouseEnter 14034355 nil]
		aLeftMorph: 	an OMenuMorph(660602880)
		anEvent: 	[96@284 94@284 mouseMove 14034355 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[96@284 94@284 mouseEnter 14034355 nil]
		aLeftMorph: 	an OMenuMorph(660602880)
		anEvent: 	[96@284 94@284 mouseMove 14034355 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(660602880)
		asMouseEnterEvent: 	[96@284 94@284 mouseMove 14034355 nil]
		anEnteredMorph: 	[96@284 94@284 mouseEnter 14034355 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(660602880))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(660602880))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[96@284 94@284 mouseMove 14034355 nil]
		asMouseEnterEvent: 	[96@284 94@284 mouseEnter 14034355 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[96@284 94@284 mouseMove 14034355 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	81@278 corner: 97@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	81@278 corner: 97@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(471597056)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[81@280 81@278 mouseMove 14034587 nil]
		targetOffset: 	87@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 14034587 81 279 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(110362624) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
30 December 2011 5:20:51 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(660602880)
	Arguments and temporary variables: 
		anEvent: 	[94@284 92@284 mouseEnter 14034403 nil]
	Receiver's instance variables: 
		bounds: 	55@279 corner: 255@327
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	55@279 corner: 255@327
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (676593664) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	255@279
		lastActivity: 	14032487


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [94@284 92@284 mouseEnter 14034403 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(660602880)
	Receiver's instance variables: 
		timeStamp: 	14034403
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	92@284
		handler: 	nil
		wasHandled: 	false
		startPoint: 	94@284
		trail: 	{(93@284). (92@284)}


MouseMoveEvent>>sentTo:
	Receiver: [94@284 92@284 mouseEnter 14034403 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(660602880)
	Receiver's instance variables: 
		timeStamp: 	14034403
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	92@284
		handler: 	nil
		wasHandled: 	false
		startPoint: 	94@284
		trail: 	{(93@284). (92@284)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(660602880)
	Arguments and temporary variables: 
		anEvent: 	[94@284 92@284 mouseEnter 14034403 nil]
	Receiver's instance variables: 
		bounds: 	55@279 corner: 255@327
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	55@279 corner: 255@327
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (676593664) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	255@279
		lastActivity: 	14032487


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[94@284 92@284 mouseEnter 14034403 nil]
		originalEvent: 	[94@284 92@284 mouseMove 14034403 nil]
		aMorph: 	an OMenuMorph(660602880)
		transformedEvent: 	[94@284 92@284 mouseEnter 14034403 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[94@284 92@284 mouseEnter 14034403 nil]
		aLeftMorph: 	an OMenuMorph(660602880)
		anEvent: 	[94@284 92@284 mouseMove 14034403 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[94@284 92@284 mouseEnter 14034403 nil]
		aLeftMorph: 	an OMenuMorph(660602880)
		anEvent: 	[94@284 92@284 mouseMove 14034403 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(660602880)
		asMouseEnterEvent: 	[94@284 92@284 mouseMove 14034403 nil]
		anEnteredMorph: 	[94@284 92@284 mouseEnter 14034403 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(660602880))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(660602880))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[94@284 92@284 mouseMove 14034403 nil]
		asMouseEnterEvent: 	[94@284 92@284 mouseEnter 14034403 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[94@284 92@284 mouseMove 14034403 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[94@284 92@284 mouseMove 14034403 nil]
		evt: 	[94@284 92@284 mouseMove 14034403 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	81@278 corner: 97@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	81@278 corner: 97@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(241696768)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[81@280 81@278 mouseMove 14034587 nil]
		targetOffset: 	87@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 14034587 81 279 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[94@284 92@284 mouseMove 14034403 nil]
		evtBuf: 	#(1 14034403 93 284 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	81@278 corner: 97@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	81@278 corner: 97@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(241696768)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[81@280 81@278 mouseMove 14034587 nil]
		targetOffset: 	87@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 14034587 81 279 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1003225088) a Pr...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
30 December 2011 5:20:51 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(660602880)
	Arguments and temporary variables: 
		anEvent: 	[92@284 89@283 mouseEnter 14034419 nil]
	Receiver's instance variables: 
		bounds: 	55@279 corner: 255@327
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	55@279 corner: 255@327
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (676593664) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	255@279
		lastActivity: 	14032487


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [92@284 89@283 mouseEnter 14034419 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(660602880)
	Receiver's instance variables: 
		timeStamp: 	14034419
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	89@283
		handler: 	nil
		wasHandled: 	false
		startPoint: 	92@284
		trail: 	{(91@284). (90@283). (89@283)}


MouseMoveEvent>>sentTo:
	Receiver: [92@284 89@283 mouseEnter 14034419 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(660602880)
	Receiver's instance variables: 
		timeStamp: 	14034419
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	89@283
		handler: 	nil
		wasHandled: 	false
		startPoint: 	92@284
		trail: 	{(91@284). (90@283). (89@283)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(660602880)
	Arguments and temporary variables: 
		anEvent: 	[92@284 89@283 mouseEnter 14034419 nil]
	Receiver's instance variables: 
		bounds: 	55@279 corner: 255@327
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	55@279 corner: 255@327
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (676593664) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	255@279
		lastActivity: 	14032487


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[92@284 89@283 mouseEnter 14034419 nil]
		originalEvent: 	[92@284 89@283 mouseMove 14034419 nil]
		aMorph: 	an OMenuMorph(660602880)
		transformedEvent: 	[92@284 89@283 mouseEnter 14034419 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[92@284 89@283 mouseEnter 14034419 nil]
		aLeftMorph: 	an OMenuMorph(660602880)
		anEvent: 	[92@284 89@283 mouseMove 14034419 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[92@284 89@283 mouseEnter 14034419 nil]
		aLeftMorph: 	an OMenuMorph(660602880)
		anEvent: 	[92@284 89@283 mouseMove 14034419 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(660602880)
		asMouseEnterEvent: 	[92@284 89@283 mouseMove 14034419 nil]
		anEnteredMorph: 	[92@284 89@283 mouseEnter 14034419 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(660602880))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(660602880))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[92@284 89@283 mouseMove 14034419 nil]
		asMouseEnterEvent: 	[92@284 89@283 mouseEnter 14034419 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[92@284 89@283 mouseMove 14034419 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[92@284 89@283 mouseMove 14034419 nil]
		evt: 	[92@284 89@283 mouseMove 14034419 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	81@278 corner: 97@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	81@278 corner: 97@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(777519104)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[81@280 81@278 mouseMove 14034587 nil]
		targetOffset: 	87@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 14034587 81 279 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[92@284 89@283 mouseMove 14034419 nil]
		evtBuf: 	#(1 14034419 91 284 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	81@278 corner: 97@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	81@278 corner: 97@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(777519104)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[81@280 81@278 mouseMove 14034587 nil]
		targetOffset: 	87@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 14034587 81 279 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(465305600) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
30 December 2011 5:20:52 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(660602880)
	Arguments and temporary variables: 
		anEvent: 	[89@283 85@283 mouseEnter 14034443 nil]
	Receiver's instance variables: 
		bounds: 	55@279 corner: 255@327
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	55@279 corner: 255@327
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (676593664) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	255@279
		lastActivity: 	14032487


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [89@283 85@283 mouseEnter 14034443 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(660602880)
	Receiver's instance variables: 
		timeStamp: 	14034443
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	85@283
		handler: 	nil
		wasHandled: 	false
		startPoint: 	89@283
		trail: 	{(87@283). (85@283)}


MouseMoveEvent>>sentTo:
	Receiver: [89@283 85@283 mouseEnter 14034443 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(660602880)
	Receiver's instance variables: 
		timeStamp: 	14034443
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	85@283
		handler: 	nil
		wasHandled: 	false
		startPoint: 	89@283
		trail: 	{(87@283). (85@283)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(660602880)
	Arguments and temporary variables: 
		anEvent: 	[89@283 85@283 mouseEnter 14034443 nil]
	Receiver's instance variables: 
		bounds: 	55@279 corner: 255@327
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	55@279 corner: 255@327
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (676593664) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	255@279
		lastActivity: 	14032487


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[89@283 85@283 mouseEnter 14034443 nil]
		originalEvent: 	[89@283 85@283 mouseMove 14034443 nil]
		aMorph: 	an OMenuMorph(660602880)
		transformedEvent: 	[89@283 85@283 mouseEnter 14034443 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[89@283 85@283 mouseEnter 14034443 nil]
		aLeftMorph: 	an OMenuMorph(660602880)
		anEvent: 	[89@283 85@283 mouseMove 14034443 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[89@283 85@283 mouseEnter 14034443 nil]
		aLeftMorph: 	an OMenuMorph(660602880)
		anEvent: 	[89@283 85@283 mouseMove 14034443 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(660602880)
		asMouseEnterEvent: 	[89@283 85@283 mouseMove 14034443 nil]
		anEnteredMorph: 	[89@283 85@283 mouseEnter 14034443 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(660602880))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(660602880))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[89@283 85@283 mouseMove 14034443 nil]
		asMouseEnterEvent: 	[89@283 85@283 mouseEnter 14034443 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[89@283 85@283 mouseMove 14034443 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[89@283 85@283 mouseMove 14034443 nil]
		evt: 	[89@283 85@283 mouseMove 14034443 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	81@278 corner: 97@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	81@278 corner: 97@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(549453824)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[81@280 81@278 mouseMove 14034587 nil]
		targetOffset: 	87@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 14034587 81 279 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[89@283 85@283 mouseMove 14034443 nil]
		evtBuf: 	#(1 14034443 87 283 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	81@278 corner: 97@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	81@278 corner: 97@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(549453824)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[81@280 81@278 mouseMove 14034587 nil]
		targetOffset: 	87@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 14034587 81 279 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(237240320) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
30 December 2011 5:20:52 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(660602880)
	Arguments and temporary variables: 
		anEvent: 	[85@283 82@283 mouseEnter 14034459 nil]
	Receiver's instance variables: 
		bounds: 	55@279 corner: 255@327
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	55@279 corner: 255@327
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (676593664) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	255@279
		lastActivity: 	14032487


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [85@283 82@283 mouseEnter 14034459 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(660602880)
	Receiver's instance variables: 
		timeStamp: 	14034459
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	82@283
		handler: 	nil
		wasHandled: 	false
		startPoint: 	85@283
		trail: 	{(84@283). (83@283). (82@283)}


MouseMoveEvent>>sentTo:
	Receiver: [85@283 82@283 mouseEnter 14034459 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(660602880)
	Receiver's instance variables: 
		timeStamp: 	14034459
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	82@283
		handler: 	nil
		wasHandled: 	false
		startPoint: 	85@283
		trail: 	{(84@283). (83@283). (82@283)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(660602880)
	Arguments and temporary variables: 
		anEvent: 	[85@283 82@283 mouseEnter 14034459 nil]
	Receiver's instance variables: 
		bounds: 	55@279 corner: 255@327
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	55@279 corner: 255@327
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (676593664) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	255@279
		lastActivity: 	14032487


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[85@283 82@283 mouseEnter 14034459 nil]
		originalEvent: 	[85@283 82@283 mouseMove 14034459 nil]
		aMorph: 	an OMenuMorph(660602880)
		transformedEvent: 	[85@283 82@283 mouseEnter 14034459 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[85@283 82@283 mouseEnter 14034459 nil]
		aLeftMorph: 	an OMenuMorph(660602880)
		anEvent: 	[85@283 82@283 mouseMove 14034459 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[85@283 82@283 mouseEnter 14034459 nil]
		aLeftMorph: 	an OMenuMorph(660602880)
		anEvent: 	[85@283 82@283 mouseMove 14034459 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(660602880)
		asMouseEnterEvent: 	[85@283 82@283 mouseMove 14034459 nil]
		anEnteredMorph: 	[85@283 82@283 mouseEnter 14034459 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(660602880))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(660602880))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[85@283 82@283 mouseMove 14034459 nil]
		asMouseEnterEvent: 	[85@283 82@283 mouseEnter 14034459 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[85@283 82@283 mouseMove 14034459 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[85@283 82@283 mouseMove 14034459 nil]
		evt: 	[85@283 82@283 mouseMove 14034459 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	81@278 corner: 97@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	81@278 corner: 97@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(961282048)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[81@280 81@278 mouseMove 14034587 nil]
		targetOffset: 	87@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 14034587 81 279 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[85@283 82@283 mouseMove 14034459 nil]
		evtBuf: 	#(1 14034459 84 283 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	81@278 corner: 97@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	81@278 corner: 97@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(961282048)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[81@280 81@278 mouseMove 14034587 nil]
		targetOffset: 	87@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 14034587 81 279 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(649068544) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
30 December 2011 5:20:52 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(660602880)
	Arguments and temporary variables: 
		anEvent: 	[85@283 82@283 mouseEnter 14034459 nil]
	Receiver's instance variables: 
		bounds: 	55@279 corner: 255@327
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	55@279 corner: 255@327
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (676593664) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	255@279
		lastActivity: 	14032487


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [85@283 82@283 mouseEnter 14034459 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(660602880)
	Receiver's instance variables: 
		timeStamp: 	14034459
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	82@283
		handler: 	nil
		wasHandled: 	false
		startPoint: 	85@283
		trail: 	{(84@283). (83@283). (82@283)}


MouseMoveEvent>>sentTo:
	Receiver: [85@283 82@283 mouseEnter 14034459 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(660602880)
	Receiver's instance variables: 
		timeStamp: 	14034459
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	82@283
		handler: 	nil
		wasHandled: 	false
		startPoint: 	85@283
		trail: 	{(84@283). (83@283). (82@283)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(660602880)
	Arguments and temporary variables: 
		anEvent: 	[85@283 82@283 mouseEnter 14034459 nil]
	Receiver's instance variables: 
		bounds: 	55@279 corner: 255@327
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	55@279 corner: 255@327
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (676593664) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	255@279
		lastActivity: 	14032487


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[85@283 82@283 mouseEnter 14034459 nil]
		originalEvent: 	[85@283 82@283 mouseMove 14034459 nil]
		aMorph: 	an OMenuMorph(660602880)
		transformedEvent: 	[85@283 82@283 mouseEnter 14034459 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[85@283 82@283 mouseEnter 14034459 nil]
		aLeftMorph: 	an OMenuMorph(660602880)
		anEvent: 	[85@283 82@283 mouseMove 14034459 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[85@283 82@283 mouseEnter 14034459 nil]
		aLeftMorph: 	an OMenuMorph(660602880)
		anEvent: 	[85@283 82@283 mouseMove 14034459 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(660602880)
		asMouseEnterEvent: 	[85@283 82@283 mouseMove 14034459 nil]
		anEnteredMorph: 	[85@283 82@283 mouseEnter 14034459 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(660602880))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(660602880))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[85@283 82@283 mouseMove 14034459 nil]
		asMouseEnterEvent: 	[85@283 82@283 mouseEnter 14034459 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[85@283 82@283 mouseMove 14034459 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	81@278 corner: 97@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	81@278 corner: 97@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(43515904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[81@280 81@278 mouseMove 14034587 nil]
		targetOffset: 	87@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 14034587 81 279 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(805044224) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
30 December 2011 5:20:52 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(660602880)
	Arguments and temporary variables: 
		anEvent: 	[82@283 81@283 mouseEnter 14034515 nil]
	Receiver's instance variables: 
		bounds: 	55@279 corner: 255@327
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	55@279 corner: 255@327
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (676593664) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	255@279
		lastActivity: 	14032487


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [82@283 81@283 mouseEnter 14034515 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(660602880)
	Receiver's instance variables: 
		timeStamp: 	14034515
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	81@283
		handler: 	nil
		wasHandled: 	false
		startPoint: 	82@283
		trail: 	{(81@283)}


MouseMoveEvent>>sentTo:
	Receiver: [82@283 81@283 mouseEnter 14034515 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(660602880)
	Receiver's instance variables: 
		timeStamp: 	14034515
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	81@283
		handler: 	nil
		wasHandled: 	false
		startPoint: 	82@283
		trail: 	{(81@283)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(660602880)
	Arguments and temporary variables: 
		anEvent: 	[82@283 81@283 mouseEnter 14034515 nil]
	Receiver's instance variables: 
		bounds: 	55@279 corner: 255@327
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	55@279 corner: 255@327
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (676593664) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	255@279
		lastActivity: 	14032487


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[82@283 81@283 mouseEnter 14034515 nil]
		originalEvent: 	[82@283 81@283 mouseMove 14034515 nil]
		aMorph: 	an OMenuMorph(660602880)
		transformedEvent: 	[82@283 81@283 mouseEnter 14034515 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[82@283 81@283 mouseEnter 14034515 nil]
		aLeftMorph: 	an OMenuMorph(660602880)
		anEvent: 	[82@283 81@283 mouseMove 14034515 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[82@283 81@283 mouseEnter 14034515 nil]
		aLeftMorph: 	an OMenuMorph(660602880)
		anEvent: 	[82@283 81@283 mouseMove 14034515 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(660602880)
		asMouseEnterEvent: 	[82@283 81@283 mouseMove 14034515 nil]
		anEnteredMorph: 	[82@283 81@283 mouseEnter 14034515 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(660602880))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(660602880))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[82@283 81@283 mouseMove 14034515 nil]
		asMouseEnterEvent: 	[82@283 81@283 mouseEnter 14034515 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[82@283 81@283 mouseMove 14034515 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[82@283 81@283 mouseMove 14034515 nil]
		evt: 	[82@283 81@283 mouseMove 14034515 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	81@278 corner: 97@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	81@278 corner: 97@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(432799744)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[81@280 81@278 mouseMove 14034587 nil]
		targetOffset: 	87@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 14034587 81 279 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[82@283 81@283 mouseMove 14034515 nil]
		evtBuf: 	#(1 14034515 81 283 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	81@278 corner: 97@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	81@278 corner: 97@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(432799744)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[81@280 81@278 mouseMove 14034587 nil]
		targetOffset: 	87@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 14034587 81 279 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(120586240) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
30 December 2011 5:20:52 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(660602880)
	Arguments and temporary variables: 
		anEvent: 	[81@283 81@281 mouseEnter 14034523 nil]
	Receiver's instance variables: 
		bounds: 	55@279 corner: 255@327
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	55@279 corner: 255@327
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (676593664) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	255@279
		lastActivity: 	14032487


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [81@283 81@281 mouseEnter 14034523 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(660602880)
	Receiver's instance variables: 
		timeStamp: 	14034523
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	81@281
		handler: 	nil
		wasHandled: 	false
		startPoint: 	81@283
		trail: 	{(81@282). (81@281)}


MouseMoveEvent>>sentTo:
	Receiver: [81@283 81@281 mouseEnter 14034523 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(660602880)
	Receiver's instance variables: 
		timeStamp: 	14034523
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	81@281
		handler: 	nil
		wasHandled: 	false
		startPoint: 	81@283
		trail: 	{(81@282). (81@281)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(660602880)
	Arguments and temporary variables: 
		anEvent: 	[81@283 81@281 mouseEnter 14034523 nil]
	Receiver's instance variables: 
		bounds: 	55@279 corner: 255@327
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	55@279 corner: 255@327
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (676593664) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	255@279
		lastActivity: 	14032487


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[81@283 81@281 mouseEnter 14034523 nil]
		originalEvent: 	[81@283 81@281 mouseMove 14034523 nil]
		aMorph: 	an OMenuMorph(660602880)
		transformedEvent: 	[81@283 81@281 mouseEnter 14034523 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[81@283 81@281 mouseEnter 14034523 nil]
		aLeftMorph: 	an OMenuMorph(660602880)
		anEvent: 	[81@283 81@281 mouseMove 14034523 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[81@283 81@281 mouseEnter 14034523 nil]
		aLeftMorph: 	an OMenuMorph(660602880)
		anEvent: 	[81@283 81@281 mouseMove 14034523 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(660602880)
		asMouseEnterEvent: 	[81@283 81@281 mouseMove 14034523 nil]
		anEnteredMorph: 	[81@283 81@281 mouseEnter 14034523 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(660602880))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(660602880))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[81@283 81@281 mouseMove 14034523 nil]
		asMouseEnterEvent: 	[81@283 81@281 mouseEnter 14034523 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[81@283 81@281 mouseMove 14034523 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[81@283 81@281 mouseMove 14034523 nil]
		evt: 	[81@283 81@281 mouseMove 14034523 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	81@278 corner: 97@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	81@278 corner: 97@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(296222720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[81@280 81@278 mouseMove 14034587 nil]
		targetOffset: 	87@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 14034587 81 279 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[81@283 81@281 mouseMove 14034523 nil]
		evtBuf: 	#(1 14034523 81 282 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	81@278 corner: 97@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	81@278 corner: 97@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(296222720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[81@280 81@278 mouseMove 14034587 nil]
		targetOffset: 	87@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 14034587 81 279 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1002700800) a Pr...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
30 December 2011 5:20:52 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(660602880)
	Arguments and temporary variables: 
		anEvent: 	[81@281 81@280 mouseEnter 14034563 nil]
	Receiver's instance variables: 
		bounds: 	55@279 corner: 255@327
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	55@279 corner: 255@327
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (676593664) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	255@279
		lastActivity: 	14032487


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [81@281 81@280 mouseEnter 14034563 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(660602880)
	Receiver's instance variables: 
		timeStamp: 	14034563
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	81@280
		handler: 	nil
		wasHandled: 	false
		startPoint: 	81@281
		trail: 	{(81@280)}


MouseMoveEvent>>sentTo:
	Receiver: [81@281 81@280 mouseEnter 14034563 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(660602880)
	Receiver's instance variables: 
		timeStamp: 	14034563
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	81@280
		handler: 	nil
		wasHandled: 	false
		startPoint: 	81@281
		trail: 	{(81@280)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(660602880)
	Arguments and temporary variables: 
		anEvent: 	[81@281 81@280 mouseEnter 14034563 nil]
	Receiver's instance variables: 
		bounds: 	55@279 corner: 255@327
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	55@279 corner: 255@327
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (676593664) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	255@279
		lastActivity: 	14032487


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[81@281 81@280 mouseEnter 14034563 nil]
		originalEvent: 	[81@281 81@280 mouseMove 14034563 nil]
		aMorph: 	an OMenuMorph(660602880)
		transformedEvent: 	[81@281 81@280 mouseEnter 14034563 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[81@281 81@280 mouseEnter 14034563 nil]
		aLeftMorph: 	an OMenuMorph(660602880)
		anEvent: 	[81@281 81@280 mouseMove 14034563 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[81@281 81@280 mouseEnter 14034563 nil]
		aLeftMorph: 	an OMenuMorph(660602880)
		anEvent: 	[81@281 81@280 mouseMove 14034563 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(660602880)
		asMouseEnterEvent: 	[81@281 81@280 mouseMove 14034563 nil]
		anEnteredMorph: 	[81@281 81@280 mouseEnter 14034563 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(660602880))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(660602880))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[81@281 81@280 mouseMove 14034563 nil]
		asMouseEnterEvent: 	[81@281 81@280 mouseEnter 14034563 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[81@281 81@280 mouseMove 14034563 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[81@281 81@280 mouseMove 14034563 nil]
		evt: 	[81@281 81@280 mouseMove 14034563 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	81@278 corner: 97@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	81@278 corner: 97@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(700973056)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[81@280 81@278 mouseMove 14034587 nil]
		targetOffset: 	87@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 14034587 81 279 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[81@281 81@280 mouseMove 14034563 nil]
		evtBuf: 	#(1 14034563 81 280 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	81@278 corner: 97@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	81@278 corner: 97@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(700973056)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[81@280 81@278 mouseMove 14034587 nil]
		targetOffset: 	87@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 14034587 81 279 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(339738624) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
30 December 2011 5:20:52 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(660602880)
	Arguments and temporary variables: 
		anEvent: 	[81@281 81@280 mouseEnter 14034563 nil]
	Receiver's instance variables: 
		bounds: 	55@279 corner: 255@327
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	55@279 corner: 255@327
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (676593664) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	255@279
		lastActivity: 	14032487


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [81@281 81@280 mouseEnter 14034563 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(660602880)
	Receiver's instance variables: 
		timeStamp: 	14034563
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	81@280
		handler: 	nil
		wasHandled: 	false
		startPoint: 	81@281
		trail: 	{(81@280)}


MouseMoveEvent>>sentTo:
	Receiver: [81@281 81@280 mouseEnter 14034563 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(660602880)
	Receiver's instance variables: 
		timeStamp: 	14034563
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	81@280
		handler: 	nil
		wasHandled: 	false
		startPoint: 	81@281
		trail: 	{(81@280)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(660602880)
	Arguments and temporary variables: 
		anEvent: 	[81@281 81@280 mouseEnter 14034563 nil]
	Receiver's instance variables: 
		bounds: 	55@279 corner: 255@327
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	55@279 corner: 255@327
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (676593664) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	255@279
		lastActivity: 	14032487


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[81@281 81@280 mouseEnter 14034563 nil]
		originalEvent: 	[81@281 81@280 mouseMove 14034563 nil]
		aMorph: 	an OMenuMorph(660602880)
		transformedEvent: 	[81@281 81@280 mouseEnter 14034563 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[81@281 81@280 mouseEnter 14034563 nil]
		aLeftMorph: 	an OMenuMorph(660602880)
		anEvent: 	[81@281 81@280 mouseMove 14034563 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[81@281 81@280 mouseEnter 14034563 nil]
		aLeftMorph: 	an OMenuMorph(660602880)
		anEvent: 	[81@281 81@280 mouseMove 14034563 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(660602880)
		asMouseEnterEvent: 	[81@281 81@280 mouseMove 14034563 nil]
		anEnteredMorph: 	[81@281 81@280 mouseEnter 14034563 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(660602880))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(660602880))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[81@281 81@280 mouseMove 14034563 nil]
		asMouseEnterEvent: 	[81@281 81@280 mouseEnter 14034563 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[81@281 81@280 mouseMove 14034563 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	81@278 corner: 97@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	81@278 corner: 97@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1045168128)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[81@280 81@278 mouseMove 14034587 nil]
		targetOffset: 	87@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 14034587 81 279 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(660602880))(an OMenuMorp...etc...
		lastStepTime: 	14034277
		lastStepMessage: 	nil
		lastCycleTime: 	14034607
		alarms: 	a Heap()
		lastAlarmTime: 	14034277
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(732954624) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Trait>>addInstVarNamed:
30 December 2011 5:25:30 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

Trait(Object)>>doesNotUnderstand: #addInstVarNamed:
	Receiver: TNewcomer
	Arguments and temporary variables: 
		aMessage: 	addInstVarNamed: 'anArtist'
		exception: 	MessageNotUnderstood: Trait>>addInstVarNamed:
		resumeValue: 	nil
	Receiver's instance variables: 
		methodDict: 	a MethodDictionary()
		traitComposition: 	{}
		localSelectors: 	nil
		users: 	an IdentitySet()
		organization: 	('as yet unclassified')

		name: 	#TNewcomer
		environment: 	a SystemDictionary(lots of globals)
		classTrait: 	TNewcomer classTrait
		category: 	#POOL


Parser>>declareInstVar:
	Receiver: a Parser
	Arguments and temporary variables: 
		name: 	'anArtist'
	Receiver's instance variables: 
		source: 	a ReadStream 'isValidNominee anArtist
	| anArtist |
	statements'
		mark: 	28
		hereChar: 	Character space
		aheadChar: 	$|
		token: 	'anArtist'
		tokenType: 	#word
		currentComment: 	nil
		buffer: 	a WriteStream 'anArtist'
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...
		here: 	#|
		hereType: 	#verticalBar
		hereMark: 	26
		hereEnd: 	26
		prevMark: 	16
		prevEnd: 	23
		encoder: 	{an EncoderForV3PlusClosures}
		requestor: 	an OBPluggableTextMorph(815005696)
		parseNode: 	nil
		failBlock: 	[^ failBlock value]
		requestorOffset: 	0
		tempsMark: 	16
		doitFlag: 	false
		properties: 	an AdditionalMethodState
		category: 	'as yet unclassified'


[parser declareInstVar: name] in UndeclaredVariable>>openMenuIn:
	Receiver: UndeclaredVariable
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a Parser
		signalContext: 	UndeclaredVariable(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		name: 	'anArtist'
		parser: 	a Parser
		interval: 	(16 to: 23)


Parser>>correctVariable:interval:
	Receiver: a Parser
	Arguments and temporary variables: 
		proposedVariable: 	'anArtist'
		spot: 	(16 to: 23)
		tempIvar: 	true
		binding: 	nil
		userSelection: 	(38 to: 37)
		action: 	[parser declareInstVar: name]
	Receiver's instance variables: 
		source: 	a ReadStream 'isValidNominee anArtist
	| anArtist |
	statements'
		mark: 	28
		hereChar: 	Character space
		aheadChar: 	$|
		token: 	'anArtist'
		tokenType: 	#word
		currentComment: 	nil
		buffer: 	a WriteStream 'anArtist'
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...
		here: 	#|
		hereType: 	#verticalBar
		hereMark: 	26
		hereEnd: 	26
		prevMark: 	16
		prevEnd: 	23
		encoder: 	{an EncoderForV3PlusClosures}
		requestor: 	an OBPluggableTextMorph(815005696)
		parseNode: 	nil
		failBlock: 	[^ failBlock value]
		requestorOffset: 	0
		tempsMark: 	16
		doitFlag: 	false
		properties: 	an AdditionalMethodState
		category: 	'as yet unclassified'


[self
		correctVariable: varName
		interval: (varStart to: varEnd)] in Parser>>variable
	Receiver: a Parser
	Arguments and temporary variables: 
		varName: 	'anArtist'
		varStart: 	16
		varEnd: 	23
	Receiver's instance variables: 
		source: 	a ReadStream 'isValidNominee anArtist
	| anArtist |
	statements'
		mark: 	28
		hereChar: 	Character space
		aheadChar: 	$|
		token: 	'anArtist'
		tokenType: 	#word
		currentComment: 	nil
		buffer: 	a WriteStream 'anArtist'
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...
		here: 	#|
		hereType: 	#verticalBar
		hereMark: 	26
		hereEnd: 	26
		prevMark: 	16
		prevEnd: 	23
		encoder: 	{an EncoderForV3PlusClosures}
		requestor: 	an OBPluggableTextMorph(815005696)
		parseNode: 	nil
		failBlock: 	[^ failBlock value]
		requestorOffset: 	0
		tempsMark: 	16
		doitFlag: 	false
		properties: 	an AdditionalMethodState
		category: 	'as yet unclassified'


[(self
			lookupInPools: name
			ifFound: [:assoc | varNode := self global: assoc name: name])
		ifTrue: [varNode]
		ifFalse: [^ action value]] in EncoderForV3PlusClosures(Encoder)>>encodeVariable:sourceRange:ifUnknown:
	Receiver: {an EncoderForV3PlusClosures}
	Arguments and temporary variables: 
		name: 	'anArtist'
		action: 	[self
		correctVariable: varName
		interval: (varStart to: varEnd)]
		varNode: 	#(nil)
	Receiver's instance variables: 
		comment: 	nil
		pc: 	nil
		scopeTable: 	a Dictionary('false'->{false} 'nil'->{nil} 'self'->{self} 'super'->...etc...
		nTemps: 	0
		supered: 	false
		requestor: 	a Parser
		class: 	TNewcomer
		selector: 	#isValidNominee
		literalStream: 	a WriteStream #()
		selectorSet: 	a Dictionary(#*->{*} #+->{+} #-->{-} #/->{/} #'//'->{//} #<->{<} #...etc...
		litIndSet: 	a Dictionary()
		litSet: 	a LiteralDictionary(-1->{-1} 0->{0} 1->{1} 2->{2} )
		sourceRanges: 	a Dictionary()
		globalSourceRanges: 	an OrderedCollection()
		addedSelectorAndMethodClassLiterals: 	false
		optimizedSelectors: 	a Set()
		stream: 	nil
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary('false'->{false} 'nil'->{nil} 'self'->{self} 'super'->{super} 'thisContext'->...etc...
	Arguments and temporary variables: 
		key: 	'anArtist'
		aBlock: 	[(self
			lookupInPools: name
			ifFound: [:assoc | varNode := self glo...etc...
		assoc: 	nil
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(nil nil nil 'true'->{true} 'self'->{self} 'false'->{false} 'nil...etc...


EncoderForV3PlusClosures(Encoder)>>encodeVariable:sourceRange:ifUnknown:
	Receiver: {an EncoderForV3PlusClosures}
	Arguments and temporary variables: 
		name: 	'anArtist'
		range: 	(16 to: 23)
		action: 	[self
		correctVariable: varName
		interval: (varStart to: varEnd)]
		varNode: 	#(nil)
	Receiver's instance variables: 
		comment: 	nil
		pc: 	nil
		scopeTable: 	a Dictionary('false'->{false} 'nil'->{nil} 'self'->{self} 'super'->...etc...
		nTemps: 	0
		supered: 	false
		requestor: 	a Parser
		class: 	TNewcomer
		selector: 	#isValidNominee
		literalStream: 	a WriteStream #()
		selectorSet: 	a Dictionary(#*->{*} #+->{+} #-->{-} #/->{/} #'//'->{//} #<->{<} #...etc...
		litIndSet: 	a Dictionary()
		litSet: 	a LiteralDictionary(-1->{-1} 0->{0} 1->{1} 2->{2} )
		sourceRanges: 	a Dictionary()
		globalSourceRanges: 	an OrderedCollection()
		addedSelectorAndMethodClassLiterals: 	false
		optimizedSelectors: 	a Set()
		stream: 	nil
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


Parser>>variable
	Receiver: a Parser
	Arguments and temporary variables: 
		varName: 	'anArtist'
		varStart: 	16
		varEnd: 	23
	Receiver's instance variables: 
		source: 	a ReadStream 'isValidNominee anArtist
	| anArtist |
	statements'
		mark: 	28
		hereChar: 	Character space
		aheadChar: 	$|
		token: 	'anArtist'
		tokenType: 	#word
		currentComment: 	nil
		buffer: 	a WriteStream 'anArtist'
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...
		here: 	#|
		hereType: 	#verticalBar
		hereMark: 	26
		hereEnd: 	26
		prevMark: 	16
		prevEnd: 	23
		encoder: 	{an EncoderForV3PlusClosures}
		requestor: 	an OBPluggableTextMorph(815005696)
		parseNode: 	nil
		failBlock: 	[^ failBlock value]
		requestorOffset: 	0
		tempsMark: 	16
		doitFlag: 	false
		properties: 	an AdditionalMethodState
		category: 	'as yet unclassified'


Parser>>primaryExpression
	Receiver: a Parser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		source: 	a ReadStream 'isValidNominee anArtist
	| anArtist |
	statements'
		mark: 	28
		hereChar: 	Character space
		aheadChar: 	$|
		token: 	'anArtist'
		tokenType: 	#word
		currentComment: 	nil
		buffer: 	a WriteStream 'anArtist'
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...
		here: 	#|
		hereType: 	#verticalBar
		hereMark: 	26
		hereEnd: 	26
		prevMark: 	16
		prevEnd: 	23
		encoder: 	{an EncoderForV3PlusClosures}
		requestor: 	an OBPluggableTextMorph(815005696)
		parseNode: 	nil
		failBlock: 	[^ failBlock value]
		requestorOffset: 	0
		tempsMark: 	16
		doitFlag: 	false
		properties: 	an AdditionalMethodState
		category: 	'as yet unclassified'


Parser>>expression
	Receiver: a Parser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		source: 	a ReadStream 'isValidNominee anArtist
	| anArtist |
	statements'
		mark: 	28
		hereChar: 	Character space
		aheadChar: 	$|
		token: 	'anArtist'
		tokenType: 	#word
		currentComment: 	nil
		buffer: 	a WriteStream 'anArtist'
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...
		here: 	#|
		hereType: 	#verticalBar
		hereMark: 	26
		hereEnd: 	26
		prevMark: 	16
		prevEnd: 	23
		encoder: 	{an EncoderForV3PlusClosures}
		requestor: 	an OBPluggableTextMorph(815005696)
		parseNode: 	nil
		failBlock: 	[^ failBlock value]
		requestorOffset: 	0
		tempsMark: 	16
		doitFlag: 	false
		properties: 	an AdditionalMethodState
		category: 	'as yet unclassified'


Parser>>statements:innerBlock:blockNode:
	Receiver: a Parser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		source: 	a ReadStream 'isValidNominee anArtist
	| anArtist |
	statements'
		mark: 	28
		hereChar: 	Character space
		aheadChar: 	$|
		token: 	'anArtist'
		tokenType: 	#word
		currentComment: 	nil
		buffer: 	a WriteStream 'anArtist'
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...
		here: 	#|
		hereType: 	#verticalBar
		hereMark: 	26
		hereEnd: 	26
		prevMark: 	16
		prevEnd: 	23
		encoder: 	{an EncoderForV3PlusClosures}
		requestor: 	an OBPluggableTextMorph(815005696)
		parseNode: 	nil
		failBlock: 	[^ failBlock value]
		requestorOffset: 	0
		tempsMark: 	16
		doitFlag: 	false
		properties: 	an AdditionalMethodState
		category: 	'as yet unclassified'


Parser>>statements:innerBlock:
	Receiver: a Parser
	Arguments and temporary variables: 
		argNodes: 	#()
		inner: 	false
	Receiver's instance variables: 
		source: 	a ReadStream 'isValidNominee anArtist
	| anArtist |
	statements'
		mark: 	28
		hereChar: 	Character space
		aheadChar: 	$|
		token: 	'anArtist'
		tokenType: 	#word
		currentComment: 	nil
		buffer: 	a WriteStream 'anArtist'
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...
		here: 	#|
		hereType: 	#verticalBar
		hereMark: 	26
		hereEnd: 	26
		prevMark: 	16
		prevEnd: 	23
		encoder: 	{an EncoderForV3PlusClosures}
		requestor: 	an OBPluggableTextMorph(815005696)
		parseNode: 	nil
		failBlock: 	[^ failBlock value]
		requestorOffset: 	0
		tempsMark: 	16
		doitFlag: 	false
		properties: 	an AdditionalMethodState
		category: 	'as yet unclassified'


Parser>>method:context:
	Receiver: a Parser
	Arguments and temporary variables: 
		doit: 	false
		ctxt: 	nil
		sap: 	#(#isValidNominee #() 1)
		blk: 	nil
		prim: 	0
		temps: 	#()
		messageComment: 	nil
		methodNode: 	nil
	Receiver's instance variables: 
		source: 	a ReadStream 'isValidNominee anArtist
	| anArtist |
	statements'
		mark: 	28
		hereChar: 	Character space
		aheadChar: 	$|
		token: 	'anArtist'
		tokenType: 	#word
		currentComment: 	nil
		buffer: 	a WriteStream 'anArtist'
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...
		here: 	#|
		hereType: 	#verticalBar
		hereMark: 	26
		hereEnd: 	26
		prevMark: 	16
		prevEnd: 	23
		encoder: 	{an EncoderForV3PlusClosures}
		requestor: 	an OBPluggableTextMorph(815005696)
		parseNode: 	nil
		failBlock: 	[^ failBlock value]
		requestorOffset: 	0
		tempsMark: 	16
		doitFlag: 	false
		properties: 	an AdditionalMethodState
		category: 	'as yet unclassified'


[methNode := self method: noPattern context: ctxt] in Parser>>parse:class:category:noPattern:context:notifying:ifFail:
	Receiver: a Parser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		source: 	a ReadStream 'isValidNominee anArtist
	| anArtist |
	statements'
		mark: 	28
		hereChar: 	Character space
		aheadChar: 	$|
		token: 	'anArtist'
		tokenType: 	#word
		currentComment: 	nil
		buffer: 	a WriteStream 'anArtist'
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...
		here: 	#|
		hereType: 	#verticalBar
		hereMark: 	26
		hereEnd: 	26
		prevMark: 	16
		prevEnd: 	23
		encoder: 	{an EncoderForV3PlusClosures}
		requestor: 	an OBPluggableTextMorph(815005696)
		parseNode: 	nil
		failBlock: 	[^ failBlock value]
		requestorOffset: 	0
		tempsMark: 	16
		doitFlag: 	false
		properties: 	an AdditionalMethodState
		category: 	'as yet unclassified'


BlockClosure>>on:do:
	Receiver: [methNode := self method: noPattern context: ctxt]
	Arguments and temporary variables: 
		exception: 	ReparseAfterSourceEditing
		handlerAction: 	[:ex | 
repeatNeeded := true.
	myStream := requestor text string...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	Parser>>parse:class:category:noPattern:context:notifying:ifFail:
		startpc: 	138
		numArgs: 	0


Parser>>parse:class:category:noPattern:context:notifying:ifFail:
	Receiver: a Parser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		source: 	a ReadStream 'isValidNominee anArtist
	| anArtist |
	statements'
		mark: 	28
		hereChar: 	Character space
		aheadChar: 	$|
		token: 	'anArtist'
		tokenType: 	#word
		currentComment: 	nil
		buffer: 	a WriteStream 'anArtist'
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...
		here: 	#|
		hereType: 	#verticalBar
		hereMark: 	26
		hereEnd: 	26
		prevMark: 	16
		prevEnd: 	23
		encoder: 	{an EncoderForV3PlusClosures}
		requestor: 	an OBPluggableTextMorph(815005696)
		parseNode: 	nil
		failBlock: 	[^ failBlock value]
		requestorOffset: 	0
		tempsMark: 	16
		doitFlag: 	false
		properties: 	an AdditionalMethodState
		category: 	'as yet unclassified'


Compiler>>translate:noPattern:ifFail:
	Receiver: a Compiler
	Arguments and temporary variables: 
		aStream: 	a ReadStream 'isValidNominee anArtist
	| anArtist |
	statements'
		noPattern: 	false
		failBlock: 	[^ nil]
	Receiver's instance variables: 
		sourceStream: 	a ReadStream 'isValidNominee anArtist
	| anArtist |
	statements'
		requestor: 	an OBPluggableTextMorph(815005696)
		class: 	TNewcomer
		category: 	'as yet unclassified'
		context: 	nil
		parser: 	a Parser


Compiler>>compile:in:classified:notifying:ifFail:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	'isValidNominee anArtist
	| anArtist |
	statements'
		aClass: 	TNewcomer
		aCategory: 	'as yet unclassified'
		aRequestor: 	an OBPluggableTextMorph(815005696)
		failBlock: 	[^ nil]
		methodNode: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadStream 'isValidNominee anArtist
	| anArtist |
	statements'
		requestor: 	an OBPluggableTextMorph(815005696)
		class: 	TNewcomer
		category: 	'as yet unclassified'
		context: 	nil
		parser: 	a Parser


Trait(TraitBehavior)>>compile:classified:notifying:trailer:ifFail:
	Receiver: TNewcomer
	Arguments and temporary variables: 
		code: 	'isValidNominee anArtist
	| anArtist |
	statements'
		category: 	'as yet unclassified'
		requestor: 	an OBPluggableTextMorph(815005696)
		bytes: 	a CompiledMethodTrailer
		failBlock: 	[^ nil]
		methodNode: 	nil
	Receiver's instance variables: 
		methodDict: 	a MethodDictionary()
		traitComposition: 	{}
		localSelectors: 	nil
		users: 	an IdentitySet()
		organization: 	('as yet unclassified')

		name: 	#TNewcomer
		environment: 	a SystemDictionary(lots of globals)
		classTrait: 	TNewcomer classTrait
		category: 	#POOL


Trait(TraitDescription)>>compile:classified:withStamp:notifying:logSource:
	Receiver: TNewcomer
	Arguments and temporary variables: 
		text: 	a Text for 'isValidNominee anArtist
	| anArtist |
	statements'
		category: 	'as yet unclassified'
		changeStamp: 	'JeroenHeymans 12/30/2011 17:25'
		requestor: 	an OBPluggableTextMorph(815005696)
		logSource: 	true
		methodAndNode: 	nil
	Receiver's instance variables: 
		methodDict: 	a MethodDictionary()
		traitComposition: 	{}
		localSelectors: 	nil
		users: 	an IdentitySet()
		organization: 	('as yet unclassified')

		name: 	#TNewcomer
		environment: 	a SystemDictionary(lots of globals)
		classTrait: 	TNewcomer classTrait
		category: 	#POOL


Trait(TraitDescription)>>compile:classified:withStamp:notifying:
	Receiver: TNewcomer
	Arguments and temporary variables: 
		text: 	a Text for 'isValidNominee anArtist
	| anArtist |
	statements'
		category: 	'as yet unclassified'
		changeStamp: 	'JeroenHeymans 12/30/2011 17:25'
		requestor: 	an OBPluggableTextMorph(815005696)
	Receiver's instance variables: 
		methodDict: 	a MethodDictionary()
		traitComposition: 	{}
		localSelectors: 	nil
		users: 	an IdentitySet()
		organization: 	('as yet unclassified')

		name: 	#TNewcomer
		environment: 	a SystemDictionary(lots of globals)
		classTrait: 	TNewcomer classTrait
		category: 	#POOL


Trait(TraitDescription)>>compile:classified:notifying:
	Receiver: TNewcomer
	Arguments and temporary variables: 
		text: 	a Text for 'isValidNominee anArtist
	| anArtist |
	statements'
		category: 	'as yet unclassified'
		requestor: 	an OBPluggableTextMorph(815005696)
		stamp: 	'JeroenHeymans 12/30/2011 17:25'
	Receiver's instance variables: 
		methodDict: 	a MethodDictionary()
		traitComposition: 	{}
		localSelectors: 	nil
		users: 	an IdentitySet()
		organization: 	('as yet unclassified')

		name: 	#TNewcomer
		environment: 	a SystemDictionary(lots of globals)
		classTrait: 	TNewcomer classTrait
		category: 	#POOL


RBAddMethodChange>>primitiveExecute
	Receiver: !TNewcomer methodsFor: 'as yet unclassified' stamp: 'JeroenHeymans 12/30/2011 17:25'!
isVa...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#TNewcomer
		isMeta: 	false
		source: 	a Text for 'isValidNominee anArtist
	| anArtist |
	statements'
		selector: 	#isValidNominee
		protocols: 	#('as yet unclassified')
		controller: 	an OBPluggableTextMorph(815005696)
		definedSelector: 	nil


RBAddMethodChange(RBRefactoryClassChange)>>executeNotifying:
	Receiver: !TNewcomer methodsFor: 'as yet unclassified' stamp: 'JeroenHeymans 12/30/2011 17:25'!
isVa...etc...
	Arguments and temporary variables: 
		aBlock: 	[]
		undo: 	TNewcomer removeSelector: #isValidNominee!
	Receiver's instance variables: 
		name: 	nil
		className: 	#TNewcomer
		isMeta: 	false
		source: 	a Text for 'isValidNominee anArtist
	| anArtist |
	statements'
		selector: 	#isValidNominee
		protocols: 	#('as yet unclassified')
		controller: 	an OBPluggableTextMorph(815005696)
		definedSelector: 	nil


RBAddMethodChange(RBRefactoryChange)>>execute
	Receiver: !TNewcomer methodsFor: 'as yet unclassified' stamp: 'JeroenHeymans 12/30/2011 17:25'!
isVa...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#TNewcomer
		isMeta: 	false
		source: 	a Text for 'isValidNominee anArtist
	| anArtist |
	statements'
		selector: 	#isValidNominee
		protocols: 	#('as yet unclassified')
		controller: 	an OBPluggableTextMorph(815005696)
		definedSelector: 	nil


[self addUndo: aRefactoringChange execute] in RBRefactoryChangeManager>>performChange:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aRefactoringChange: 	!TNewcomer methodsFor: 'as yet unclassified' stamp: 'Jeroen...etc...
	Receiver's instance variables: 
		undo: 	an OrderedCollection(!Band methodsFor: 'as yet unclassified' stamp: 'Jero...etc...
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


BlockClosure>>ensure:
	Receiver: [self addUndo: aRefactoringChange execute]
	Arguments and temporary variables: 
		aBlock: 	[isPerformingRefactoring := false]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RBRefactoryChangeManager>>performChange:
		startpc: 	31
		numArgs: 	0


RBRefactoryChangeManager>>ignoreChangesWhile:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aBlock: 	[self addUndo: aRefactoringChange execute]
	Receiver's instance variables: 
		undo: 	an OrderedCollection(!Band methodsFor: 'as yet unclassified' stamp: 'Jero...etc...
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


RBRefactoryChangeManager>>performChange:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aRefactoringChange: 	!TNewcomer methodsFor: 'as yet unclassified' stamp: 'Jeroen...etc...
	Receiver's instance variables: 
		undo: 	an OrderedCollection(!Band methodsFor: 'as yet unclassified' stamp: 'Jero...etc...
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


ORMethodDefinition>>compileNotifying:
	Receiver: an ORMethodDefinition
	Arguments and temporary variables: 
		aController: 	an OBPluggableTextMorph(815005696)
		change: 	!TNewcomer methodsFor: 'as yet unclassified' stamp: 'JeroenHeymans 12/3...etc...
	Receiver's instance variables: 
		theClass: 	TNewcomer
		category: 	'as yet unclassified'
		source: 	nil
		selection: 	nil
		callback: 	[:sel | OBMethodNode on: sel inClass: theClass]
		compileClass: 	TNewcomer
		compileCategory: 	'as yet unclassified'
		compileText: 	a Text for 'isValidNominee anArtist
	| anArtist |
	statements'


ORMethodDefinition(OBMethodDefinition)>>compileMethod:notifying:
	Receiver: an ORMethodDefinition
	Arguments and temporary variables: 
		aText: 	a Text for 'isValidNominee anArtist
	| anArtist |
	statements'
		aController: 	an OBPluggableTextMorph(815005696)
	Receiver's instance variables: 
		theClass: 	TNewcomer
		category: 	'as yet unclassified'
		source: 	nil
		selection: 	nil
		callback: 	[:sel | OBMethodNode on: sel inClass: theClass]
		compileClass: 	TNewcomer
		compileCategory: 	'as yet unclassified'
		compileText: 	a Text for 'isValidNominee anArtist
	| anArtist |
	statements'


ORMethodDefinition(OBMethodDefinition)>>accept:notifying:
	Receiver: an ORMethodDefinition
	Arguments and temporary variables: 
		aText: 	a Text for 'isValidNominee anArtist
	| anArtist |
	statements'
		aController: 	an OBPluggableTextMorph(815005696)
		newSelector: 	nil
	Receiver's instance variables: 
		theClass: 	TNewcomer
		category: 	'as yet unclassified'
		source: 	nil
		selection: 	nil
		callback: 	[:sel | OBMethodNode on: sel inClass: theClass]
		compileClass: 	TNewcomer
		compileCategory: 	'as yet unclassified'
		compileText: 	a Text for 'isValidNominee anArtist
	| anArtist |
	statements'


ORMethodDefinition>>accept:notifying:
	Receiver: an ORMethodDefinition
	Arguments and temporary variables: 
		aText: 	a Text for 'isValidNominee anArtist
	| anArtist |
	statements'
		aController: 	an OBPluggableTextMorph(815005696)
	Receiver's instance variables: 
		theClass: 	TNewcomer
		category: 	'as yet unclassified'
		source: 	nil
		selection: 	nil
		callback: 	[:sel | OBMethodNode on: sel inClass: theClass]
		compileClass: 	TNewcomer
		compileCategory: 	'as yet unclassified'
		compileText: 	a Text for 'isValidNominee anArtist
	| anArtist |
	statements'


[def accept: aText notifying: aController] in [:def | [def accept: aText notifying: aController]
		on: OBAnnouncerRequest
		do: [:notification | notification resume: self announcer]] in OBDefinitionPanel>>accept:notifying:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		aText: 	an ORMethodDefinition
		aController: 	a Text for 'isValidNominee anArtist
	| anArtist |
	statements'
		def: 	an OBPluggableTextMorph(815005696)
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORMethodDefinition
		selection: 	(1 to: 116)


BlockClosure>>on:do:
	Receiver: [def accept: aText notifying: aController]
	Arguments and temporary variables: 
		exception: 	OBAnnouncerRequest
		handlerAction: 	[:notification | notification resume: self announcer]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[:def | [def accept: aText notifying: aController]
		on: OBAnnoun...etc...
		startpc: 	51
		numArgs: 	0


[:def | [def accept: aText notifying: aController]
		on: OBAnnouncerRequest
		do: [:notification | notification resume: self announcer]] in OBDefinitionPanel>>accept:notifying:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		aText: 	an ORMethodDefinition
		aController: 	a Text for 'isValidNominee anArtist
	| anArtist |
	statements'
		def: 	an OBPluggableTextMorph(815005696)
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORMethodDefinition
		selection: 	(1 to: 116)


OBDefinitionPanel>>withDefinitionDo:ifNil:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		workBlock: 	[:def | [def accept: aText notifying: aController]
		on: OBAnnouncer...etc...
		nilBlock: 	[true]
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORMethodDefinition
		selection: 	(1 to: 116)


OBDefinitionPanel>>accept:notifying:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		aText: 	a Text for 'isValidNominee anArtist
	| anArtist |
	statements'
		aController: 	an OBPluggableTextMorph(815005696)
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORMethodDefinition
		selection: 	(1 to: 116)



--- The full stack ---
Trait(Object)>>doesNotUnderstand: #addInstVarNamed:
Parser>>declareInstVar:
[parser declareInstVar: name] in UndeclaredVariable>>openMenuIn:
Parser>>correctVariable:interval:
[self
		correctVariable: varName
		interval: (varStart to: varEnd)] in Parser>>variable
[(self
			lookupInPools: name
			ifFound: [:assoc | varNode := self global: assoc name: name])
		ifTrue: [varNode]
		ifFalse: [^ action value]] in EncoderForV3PlusClosures(Encoder)>>encodeVariable:sourceRange:ifUnknown:
Dictionary>>at:ifAbsent:
EncoderForV3PlusClosures(Encoder)>>encodeVariable:sourceRange:ifUnknown:
Parser>>variable
Parser>>primaryExpression
Parser>>expression
Parser>>statements:innerBlock:blockNode:
Parser>>statements:innerBlock:
Parser>>method:context:
[methNode := self method: noPattern context: ctxt] in Parser>>parse:class:category:noPattern:context:notifying:ifFail:
BlockClosure>>on:do:
Parser>>parse:class:category:noPattern:context:notifying:ifFail:
Compiler>>translate:noPattern:ifFail:
Compiler>>compile:in:classified:notifying:ifFail:
Trait(TraitBehavior)>>compile:classified:notifying:trailer:ifFail:
Trait(TraitDescription)>>compile:classified:withStamp:notifying:logSource:
Trait(TraitDescription)>>compile:classified:withStamp:notifying:
Trait(TraitDescription)>>compile:classified:notifying:
RBAddMethodChange>>primitiveExecute
RBAddMethodChange(RBRefactoryClassChange)>>executeNotifying:
RBAddMethodChange(RBRefactoryChange)>>execute
[self addUndo: aRefactoringChange execute] in RBRefactoryChangeManager>>performChange:
BlockClosure>>ensure:
RBRefactoryChangeManager>>ignoreChangesWhile:
RBRefactoryChangeManager>>performChange:
ORMethodDefinition>>compileNotifying:
ORMethodDefinition(OBMethodDefinition)>>compileMethod:notifying:
ORMethodDefinition(OBMethodDefinition)>>accept:notifying:
ORMethodDefinition>>accept:notifying:
[def accept: aText notifying: aController] in [:def | [def accept: aText notifying: aController]
		on: OBAnnouncerRequest
		do: [:notification | notification resume: self announcer]] in OBDefinitionPanel>>accept:notifying:
BlockClosure>>on:do:
[:def | [def accept: aText notifying: aController]
		on: OBAnnouncerRequest
		do: [:notification | notification resume: self announcer]] in OBDefinitionPanel>>accept:notifying:
OBDefinitionPanel>>withDefinitionDo:ifNil:
OBDefinitionPanel>>accept:notifying:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[^ setTextSelector isNil
		or: [setTextSelector numArgs = 2
				ifTrue: [model
						perform: setTextSelector
						with: acceptedText
						with: self]
				ifFalse: [model perform: setTextSelector with: acceptedText]]] in OBPluggableTextMorph(PluggableTextMorph)>>acceptTextInModel
BlockClosure>>ensure:
OBPluggableTextMorph(PluggableTextMorph)>>acceptTextInModel
OBPluggableTextMorph(PluggableTextMorph)>>acceptBasic
OBPluggableTextMorph(PluggableTextMorph)>>accept
OBTextMorphSelection>>accept
OBAcceptTextCommand>>execute
[:each | 
(each isActive
			and: [each isEnabled])
		ifTrue: [each execute.
			^ true].
	nil] in OBTextCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
OrderedCollection>>do:
OBTextCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
OBDefinitionPanel(OBTextPanel)>>keystroke:selection:
OBTextMorph>>keyStroke:
OBTextMorph(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
OBTextMorph(Morph)>>handleEvent:
OBTextMorph(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Time class>>Year
30 December 2011 5:39:46 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

Time class(Object)>>doesNotUnderstand: #Year
	Receiver: Time
	Arguments and temporary variables: 
		aMessage: 	Year
		exception: 	MessageNotUnderstood: Time class>>Year
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#<->(Time>>#< "a CompiledMethod(863240192)") #=-...etc...
		format: 	134
		instanceVariables: 	#('seconds' 'nanos')
		organization: 	('ansi protocol' < = duration hash hour hour12 hour24 meridianAbb...etc...
		subclasses: 	nil
		name: 	#Time
		classPool: 	nil
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	nil
		localSelectors: 	nil


NewcomerBandCategory>>isValidNominee:
	Receiver: a NewcomerBandCategory
	Arguments and temporary variables: 
		anArtist: 	a Band
	Receiver's instance variables: 
a NewcomerBandCategory

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		awardBestBand: 	a BandCategory
		awardBestNewcomerBand: 	a NewcomerBandCategory
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex awardBestBand awardBest...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	| clement sylvain cpex awardBestBand awardBestNewcomerBand |
...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(190578688)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex awardBestBand awardBest...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 579)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 579)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 747@178
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 747@178
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 15170043) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex awardBestBand awardBestNewcomerBand |
...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 579)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 579)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex awardBestBand awardBestNewcomerBan...etc...
		bindings: 	a Dictionary('a'->a Band 'cr'->nil )
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(391118848)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[294@278 mouseUp 15170355 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	259@268 corner: 396@286
		owner: 	a MenuMorph(384040960)
		submorphs: 	#()
		fullBounds: 	259@268 corner: 396@286
		color: 	Color black
		extension: 	a MorphExtension (401342464)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(391118848)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[294@278 mouseUp 15170355 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	259@268 corner: 396@286
		owner: 	a MenuMorph(384040960)
		submorphs: 	#()
		fullBounds: 	259@268 corner: 396@286
		color: 	Color black
		extension: 	a MorphExtension (401342464)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(391118848)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[294@278 mouseUp 15170355 nil]
	Receiver's instance variables: 
		bounds: 	259@268 corner: 396@286
		owner: 	a MenuMorph(384040960)
		submorphs: 	#()
		fullBounds: 	259@268 corner: 396@286
		color: 	Color black
		extension: 	a MorphExtension (401342464)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(391118848)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[294@278 mouseUp 15170355 nil]
	Receiver's instance variables: 
		bounds: 	259@268 corner: 396@286
		owner: 	a MenuMorph(384040960)
		submorphs: 	#()
		fullBounds: 	259@268 corner: 396@286
		color: 	Color black
		extension: 	a MorphExtension (401342464)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [294@278 mouseUp 15170355 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(391118848)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	15170355
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	294@278
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(391118848)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[294@278 mouseUp 15170355 nil]
	Receiver's instance variables: 
		bounds: 	259@268 corner: 396@286
		owner: 	a MenuMorph(384040960)
		submorphs: 	#()
		fullBounds: 	259@268 corner: 396@286
		color: 	Color black
		extension: 	a MorphExtension (401342464)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[294@278 mouseUp 15170355 nil]
		aMorph: 	a ToggleMenuItemMorph(391118848)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[294@278 mouseUp 15170355 nil]
		aMorph: 	a ToggleMenuItemMorph(391118848)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(391118848)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[294@278 mouseUp 15170355 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	259@268 corner: 396@286
		owner: 	a MenuMorph(384040960)
		submorphs: 	#()
		fullBounds: 	259@268 corner: 396@286
		color: 	Color black
		extension: 	a MorphExtension (401342464)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[294@278 mouseUp 15170355 nil]
		aMorph: 	a MenuMorph(384040960)
		localEvt: 	[294@278 mouseUp 15170355 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(391118848)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(391118848)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[294@278 mouseUp 15170355 nil]
		aMorph: 	a MenuMorph(384040960)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(384040960)
	Arguments and temporary variables: 
		anEvent: 	[294@278 mouseUp 15170355 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	254@263 corner: 401@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(391118848)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	254@263 corner: 401@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (398983168) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(391118848)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(391118848)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(384040960)
	Arguments and temporary variables: 
		anEvent: 	[294@278 mouseUp 15170355 nil]
	Receiver's instance variables: 
		bounds: 	254@263 corner: 401@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(391118848)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	254@263 corner: 401@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (398983168) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(391118848)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(391118848)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(384040960)
	Arguments and temporary variables: 
		evt: 	[294@278 mouseUp 15170355 nil]
	Receiver's instance variables: 
		bounds: 	254@263 corner: 401@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(391118848)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	254@263 corner: 401@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (398983168) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(391118848)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(391118848)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[294@278 mouseUp 15170355 nil]
		focusHolder: 	a MenuMorph(384040960)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	294@278 corner: 310@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	294@278 corner: 310@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(839385088)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[294@278 mouseUp 15170355 nil]
		targetOffset: 	34@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 15170355 294 278 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(526385152) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[294@278 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(526385152) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[294@278 mouseUp 15170355 nil]
		focusHolder: 	a MenuMorph(384040960)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	294@278 corner: 310@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	294@278 corner: 310@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(839385088)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[294@278 mouseUp 15170355 nil]
		targetOffset: 	34@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 15170355 294 278 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[294@278 mouseUp 15170355 nil]
		focusHolder: 	a MenuMorph(384040960)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	294@278 corner: 310@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	294@278 corner: 310@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(839385088)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[294@278 mouseUp 15170355 nil]
		targetOffset: 	34@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 15170355 294 278 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[294@278 mouseUp 15170355 nil]
	Receiver's instance variables: 
		bounds: 	294@278 corner: 310@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	294@278 corner: 310@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(839385088)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[294@278 mouseUp 15170355 nil]
		targetOffset: 	34@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 15170355 294 278 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[294@278 mouseUp 15170355 nil]
		evt: 	[294@278 mouseUp 15170355 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	294@278 corner: 310@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	294@278 corner: 310@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(839385088)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[294@278 mouseUp 15170355 nil]
		targetOffset: 	34@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 15170355 294 278 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[294@278 mouseUp 15170355 nil]
		evtBuf: 	#(1 15170355 294 278 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	294@278 corner: 310@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	294@278 corner: 310@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(839385088)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[294@278 mouseUp 15170355 nil]
		targetOffset: 	34@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 15170355 294 278 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil



--- The full stack ---
Time class(Object)>>doesNotUnderstand: #Year
NewcomerBandCategory>>isValidNominee:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: DateAndTime class>>year
30 December 2011 5:41:34 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

DateAndTime class(Object)>>doesNotUnderstand: #year
	Receiver: DateAndTime
	Arguments and temporary variables: 
		aMessage: 	year
		exception: 	MessageNotUnderstood: DateAndTime class>>year
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#+->(DateAndTime>>#+ "a CompiledMethod(100270080...etc...
		format: 	138
		instanceVariables: 	#('seconds' 'offset' 'jdn' 'nanos')
		organization: 	('*metacello-core' setTimestampInMetacelloVersion:)
('accessing' ...etc...
		subclasses: 	{TimeStamp}
		name: 	#DateAndTime
		classPool: 	a Dictionary(#LocalTimeZone->a TimeZone(LT) )
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


NewcomerBandCategory>>isValidNominee:
	Receiver: a NewcomerBandCategory
	Arguments and temporary variables: 
		anArtist: 	a Band
	Receiver's instance variables: 
a NewcomerBandCategory

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		awardBestBand: 	a BandCategory
		awardBestNewcomerBand: 	a NewcomerBandCategory
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex awardBestBand awardBest...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	| clement sylvain cpex awardBestBand awardBestNewcomerBand |
...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(742391808)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex awardBestBand awardBest...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 579)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 579)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 747@178
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 747@178
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 15277635) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex awardBestBand awardBestNewcomerBand |
...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 579)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 579)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex awardBestBand awardBestNewcomerBan...etc...
		bindings: 	a Dictionary('a'->a Band 'cr'->nil )
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(737148928)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[157@275 mouseUp 15278155 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	99@268 corner: 236@286
		owner: 	a MenuMorph(730071040)
		submorphs: 	#()
		fullBounds: 	99@268 corner: 236@286
		color: 	Color black
		extension: 	a MorphExtension (747372544)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(737148928)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[157@275 mouseUp 15278155 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	99@268 corner: 236@286
		owner: 	a MenuMorph(730071040)
		submorphs: 	#()
		fullBounds: 	99@268 corner: 236@286
		color: 	Color black
		extension: 	a MorphExtension (747372544)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(737148928)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[157@275 mouseUp 15278155 nil]
	Receiver's instance variables: 
		bounds: 	99@268 corner: 236@286
		owner: 	a MenuMorph(730071040)
		submorphs: 	#()
		fullBounds: 	99@268 corner: 236@286
		color: 	Color black
		extension: 	a MorphExtension (747372544)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(737148928)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[157@275 mouseUp 15278155 nil]
	Receiver's instance variables: 
		bounds: 	99@268 corner: 236@286
		owner: 	a MenuMorph(730071040)
		submorphs: 	#()
		fullBounds: 	99@268 corner: 236@286
		color: 	Color black
		extension: 	a MorphExtension (747372544)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [157@275 mouseUp 15278155 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(737148928)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	15278155
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	157@275
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(737148928)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[157@275 mouseUp 15278155 nil]
	Receiver's instance variables: 
		bounds: 	99@268 corner: 236@286
		owner: 	a MenuMorph(730071040)
		submorphs: 	#()
		fullBounds: 	99@268 corner: 236@286
		color: 	Color black
		extension: 	a MorphExtension (747372544)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[157@275 mouseUp 15278155 nil]
		aMorph: 	a ToggleMenuItemMorph(737148928)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[157@275 mouseUp 15278155 nil]
		aMorph: 	a ToggleMenuItemMorph(737148928)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(737148928)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[157@275 mouseUp 15278155 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	99@268 corner: 236@286
		owner: 	a MenuMorph(730071040)
		submorphs: 	#()
		fullBounds: 	99@268 corner: 236@286
		color: 	Color black
		extension: 	a MorphExtension (747372544)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[157@275 mouseUp 15278155 nil]
		aMorph: 	a MenuMorph(730071040)
		localEvt: 	[157@275 mouseUp 15278155 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(737148928)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(737148928)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[157@275 mouseUp 15278155 nil]
		aMorph: 	a MenuMorph(730071040)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(730071040)
	Arguments and temporary variables: 
		anEvent: 	[157@275 mouseUp 15278155 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	94@263 corner: 241@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(737148928)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	94@263 corner: 241@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (745013248) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(737148928)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(737148928)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(730071040)
	Arguments and temporary variables: 
		anEvent: 	[157@275 mouseUp 15278155 nil]
	Receiver's instance variables: 
		bounds: 	94@263 corner: 241@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(737148928)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	94@263 corner: 241@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (745013248) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(737148928)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(737148928)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(730071040)
	Arguments and temporary variables: 
		evt: 	[157@275 mouseUp 15278155 nil]
	Receiver's instance variables: 
		bounds: 	94@263 corner: 241@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(737148928)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	94@263 corner: 241@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (745013248) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(737148928)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(737148928)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[157@275 mouseUp 15278155 nil]
		focusHolder: 	a MenuMorph(730071040)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@275 corner: 172@291
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	156@275 corner: 172@291
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(289406976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[157@275 156@275 mouseMove 15278230 nil]
		targetOffset: 	57@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 15278230 156 275 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(995360768) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[157@275 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(995360768) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[157@275 mouseUp 15278155 nil]
		focusHolder: 	a MenuMorph(730071040)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@275 corner: 172@291
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	156@275 corner: 172@291
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(289406976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[157@275 156@275 mouseMove 15278230 nil]
		targetOffset: 	57@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 15278230 156 275 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[157@275 mouseUp 15278155 nil]
		focusHolder: 	a MenuMorph(730071040)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	156@275 corner: 172@291
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	156@275 corner: 172@291
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(289406976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[157@275 156@275 mouseMove 15278230 nil]
		targetOffset: 	57@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 15278230 156 275 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[157@275 mouseUp 15278155 nil]
	Receiver's instance variables: 
		bounds: 	156@275 corner: 172@291
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	156@275 corner: 172@291
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(289406976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[157@275 156@275 mouseMove 15278230 nil]
		targetOffset: 	57@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 15278230 156 275 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[157@275 mouseUp 15278155 nil]
		evt: 	[157@275 mouseUp 15278155 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	156@275 corner: 172@291
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	156@275 corner: 172@291
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(289406976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[157@275 156@275 mouseMove 15278230 nil]
		targetOffset: 	57@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 15278230 156 275 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[157@275 mouseUp 15278155 nil]
		evtBuf: 	#(1 15278155 157 275 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	156@275 corner: 172@291
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	156@275 corner: 172@291
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(289406976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[157@275 156@275 mouseMove 15278230 nil]
		targetOffset: 	57@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 15278230 156 275 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil



--- The full stack ---
DateAndTime class(Object)>>doesNotUnderstand: #year
NewcomerBandCategory>>isValidNominee:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: BandCategory>>members:
30 December 2011 5:53:53 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BandCategory(Object)>>doesNotUnderstand: #members:
	Receiver: a BandCategory
	Arguments and temporary variables: 
		aMessage: 	members: a LinkedList()
		exception: 	MessageNotUnderstood: BandCategory>>members:
		resumeValue: 	nil
	Receiver's instance variables: 
		nominees: 	nil


BandCategory(Category)>>initialize
	Receiver: a BandCategory
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nominees: 	nil


BandCategory class(Behavior)>>new
	Receiver: BandCategory
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Category
		methodDict: 	a MethodDictionary(#isValidNominee:->(BandCategory>>#isValidNominee...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('as yet unclassified' isValidNominee:)

		subclasses: 	{NewcomerBandCategory}
		name: 	#BandCategory
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#POOL
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		awardBestBand: 	nil
		awardBestNewcomerBand: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex awardBestBand awardBest...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	| clement sylvain cpex awardBestBand awardBestNewcomerBand |
...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(485490688)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex awardBestBand awardBest...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 628)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 628)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 747@194
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 747@194
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 16016677) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex awardBestBand awardBestNewcomerBand |
...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 628)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 628)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex awardBestBand awardBestNewcomerBan...etc...
		bindings: 	a Dictionary('a'->a Band 'cr'->nil )
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(772800512)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[207@276 mouseUp 16017421 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	151@268 corner: 288@286
		owner: 	a MenuMorph(765722624)
		submorphs: 	#()
		fullBounds: 	151@268 corner: 288@286
		color: 	Color black
		extension: 	a MorphExtension (783024128)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(772800512)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[207@276 mouseUp 16017421 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	151@268 corner: 288@286
		owner: 	a MenuMorph(765722624)
		submorphs: 	#()
		fullBounds: 	151@268 corner: 288@286
		color: 	Color black
		extension: 	a MorphExtension (783024128)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(772800512)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[207@276 mouseUp 16017421 nil]
	Receiver's instance variables: 
		bounds: 	151@268 corner: 288@286
		owner: 	a MenuMorph(765722624)
		submorphs: 	#()
		fullBounds: 	151@268 corner: 288@286
		color: 	Color black
		extension: 	a MorphExtension (783024128)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(772800512)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[207@276 mouseUp 16017421 nil]
	Receiver's instance variables: 
		bounds: 	151@268 corner: 288@286
		owner: 	a MenuMorph(765722624)
		submorphs: 	#()
		fullBounds: 	151@268 corner: 288@286
		color: 	Color black
		extension: 	a MorphExtension (783024128)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [207@276 mouseUp 16017421 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(772800512)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	16017421
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	207@276
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(772800512)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[207@276 mouseUp 16017421 nil]
	Receiver's instance variables: 
		bounds: 	151@268 corner: 288@286
		owner: 	a MenuMorph(765722624)
		submorphs: 	#()
		fullBounds: 	151@268 corner: 288@286
		color: 	Color black
		extension: 	a MorphExtension (783024128)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[207@276 mouseUp 16017421 nil]
		aMorph: 	a ToggleMenuItemMorph(772800512)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[207@276 mouseUp 16017421 nil]
		aMorph: 	a ToggleMenuItemMorph(772800512)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(772800512)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[207@276 mouseUp 16017421 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	151@268 corner: 288@286
		owner: 	a MenuMorph(765722624)
		submorphs: 	#()
		fullBounds: 	151@268 corner: 288@286
		color: 	Color black
		extension: 	a MorphExtension (783024128)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[207@276 mouseUp 16017421 nil]
		aMorph: 	a MenuMorph(765722624)
		localEvt: 	[207@276 mouseUp 16017421 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(772800512)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(772800512)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[207@276 mouseUp 16017421 nil]
		aMorph: 	a MenuMorph(765722624)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(765722624)
	Arguments and temporary variables: 
		anEvent: 	[207@276 mouseUp 16017421 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	146@263 corner: 293@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(772800512)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	146@263 corner: 293@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (780664832) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(772800512)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(772800512)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(765722624)
	Arguments and temporary variables: 
		anEvent: 	[207@276 mouseUp 16017421 nil]
	Receiver's instance variables: 
		bounds: 	146@263 corner: 293@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(772800512)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	146@263 corner: 293@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (780664832) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(772800512)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(772800512)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(765722624)
	Arguments and temporary variables: 
		evt: 	[207@276 mouseUp 16017421 nil]
	Receiver's instance variables: 
		bounds: 	146@263 corner: 293@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(772800512)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	146@263 corner: 293@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (780664832) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(772800512)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(772800512)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[207@276 mouseUp 16017421 nil]
		focusHolder: 	a MenuMorph(765722624)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	207@277 corner: 223@293
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	207@277 corner: 223@293
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(156762112)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[207@276 207@277 mouseMove 16017427 nil]
		targetOffset: 	56@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 16017427 207 277 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(862715904) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[207@276 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(862715904) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[207@276 mouseUp 16017421 nil]
		focusHolder: 	a MenuMorph(765722624)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	207@277 corner: 223@293
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	207@277 corner: 223@293
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(156762112)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[207@276 207@277 mouseMove 16017427 nil]
		targetOffset: 	56@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 16017427 207 277 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[207@276 mouseUp 16017421 nil]
		focusHolder: 	a MenuMorph(765722624)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	207@277 corner: 223@293
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	207@277 corner: 223@293
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(156762112)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[207@276 207@277 mouseMove 16017427 nil]
		targetOffset: 	56@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 16017427 207 277 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[207@276 mouseUp 16017421 nil]
	Receiver's instance variables: 
		bounds: 	207@277 corner: 223@293
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	207@277 corner: 223@293
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(156762112)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[207@276 207@277 mouseMove 16017427 nil]
		targetOffset: 	56@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 16017427 207 277 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[207@276 mouseUp 16017421 nil]
		evt: 	[207@276 mouseUp 16017421 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	207@277 corner: 223@293
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	207@277 corner: 223@293
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(156762112)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[207@276 207@277 mouseMove 16017427 nil]
		targetOffset: 	56@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 16017427 207 277 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil



--- The full stack ---
BandCategory(Object)>>doesNotUnderstand: #members:
BandCategory(Category)>>initialize
BandCategory class(Behavior)>>new
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
30 December 2011 5:54:11 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(673447936)
	Arguments and temporary variables: 
		anEvent: 	[143@281 143@282 mouseEnter CTRL 16035227 nil]
	Receiver's instance variables: 
		bounds: 	125@282 corner: 325@314
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	125@282 corner: 325@314
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (689438720) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	325@282
		lastActivity: 	16033159


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [143@281 143@282 mouseEnter CTRL 16035227 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(673447936)
	Receiver's instance variables: 
		timeStamp: 	16035227
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	16
		position: 	143@282
		handler: 	nil
		wasHandled: 	false
		startPoint: 	143@281
		trail: 	{(143@282)}


MouseMoveEvent>>sentTo:
	Receiver: [143@281 143@282 mouseEnter CTRL 16035227 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(673447936)
	Receiver's instance variables: 
		timeStamp: 	16035227
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	16
		position: 	143@282
		handler: 	nil
		wasHandled: 	false
		startPoint: 	143@281
		trail: 	{(143@282)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(673447936)
	Arguments and temporary variables: 
		anEvent: 	[143@281 143@282 mouseEnter CTRL 16035227 nil]
	Receiver's instance variables: 
		bounds: 	125@282 corner: 325@314
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	125@282 corner: 325@314
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (689438720) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	325@282
		lastActivity: 	16033159


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[143@281 143@282 mouseEnter CTRL 16035227 nil]
		originalEvent: 	[143@281 143@282 mouseMove CTRL 16035227 nil]
		aMorph: 	an OMenuMorph(673447936)
		transformedEvent: 	[143@281 143@282 mouseEnter CTRL 16035227 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[143@281 143@282 mouseEnter CTRL 16035227 nil]
		aLeftMorph: 	an OMenuMorph(673447936)
		anEvent: 	[143@281 143@282 mouseMove CTRL 16035227 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[143@281 143@282 mouseEnter CTRL 16035227 nil]
		aLeftMorph: 	an OMenuMorph(673447936)
		anEvent: 	[143@281 143@282 mouseMove CTRL 16035227 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(673447936)
		asMouseEnterEvent: 	[143@281 143@282 mouseMove CTRL 16035227 nil]
		anEnteredMorph: 	[143@281 143@282 mouseEnter CTRL 16035227 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(673447936))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(673447936))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[143@281 143@282 mouseMove CTRL 16035227 nil]
		asMouseEnterEvent: 	[143@281 143@282 mouseEnter CTRL 16035227 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[143@281 143@282 mouseMove CTRL 16035227 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[143@281 143@282 mouseMove CTRL 16035227 nil]
		evt: 	[143@281 143@282 mouseMove CTRL 16035227 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	184@316 corner: 200@332
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(148373504)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[169@304 184@316 mouseMove 16035338 nil]
		targetOffset: 	75@29
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 16035338 171 306 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[143@281 143@282 mouseMove CTRL 16035227 nil]
		evtBuf: 	#(1 16035227 143 282 0 2 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	184@316 corner: 200@332
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(148373504)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[169@304 184@316 mouseMove 16035338 nil]
		targetOffset: 	75@29
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 16035338 171 306 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(673447936))(an OMenuMorp...etc...
		lastStepTime: 	16035221
		lastStepMessage: 	nil
		lastCycleTime: 	16035407
		alarms: 	a Heap()
		lastAlarmTime: 	16035221
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(673447936))(an OMenuMorp...etc...
		lastStepTime: 	16035221
		lastStepMessage: 	nil
		lastCycleTime: 	16035407
		alarms: 	a Heap()
		lastAlarmTime: 	16035221
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(673447936))(an OMenuMorp...etc...
		lastStepTime: 	16035221
		lastStepMessage: 	nil
		lastCycleTime: 	16035407
		alarms: 	a Heap()
		lastAlarmTime: 	16035221
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(673447936))(an OMenuMorp...etc...
		lastStepTime: 	16035221
		lastStepMessage: 	nil
		lastCycleTime: 	16035407
		alarms: 	a Heap()
		lastAlarmTime: 	16035221
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(96993280) an OMe...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
30 December 2011 5:54:11 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(673447936)
	Arguments and temporary variables: 
		anEvent: 	[143@282 146@284 mouseEnter CTRL 16035235 nil]
	Receiver's instance variables: 
		bounds: 	125@282 corner: 325@314
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	125@282 corner: 325@314
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (689438720) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	325@282
		lastActivity: 	16033159


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [143@282 146@284 mouseEnter CTRL 16035235 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(673447936)
	Receiver's instance variables: 
		timeStamp: 	16035235
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	16
		position: 	146@284
		handler: 	nil
		wasHandled: 	false
		startPoint: 	143@282
		trail: 	{(144@282). (145@284). (146@284)}


MouseMoveEvent>>sentTo:
	Receiver: [143@282 146@284 mouseEnter CTRL 16035235 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(673447936)
	Receiver's instance variables: 
		timeStamp: 	16035235
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	16
		position: 	146@284
		handler: 	nil
		wasHandled: 	false
		startPoint: 	143@282
		trail: 	{(144@282). (145@284). (146@284)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(673447936)
	Arguments and temporary variables: 
		anEvent: 	[143@282 146@284 mouseEnter CTRL 16035235 nil]
	Receiver's instance variables: 
		bounds: 	125@282 corner: 325@314
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	125@282 corner: 325@314
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (689438720) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	325@282
		lastActivity: 	16033159


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[143@282 146@284 mouseEnter CTRL 16035235 nil]
		originalEvent: 	[143@282 146@284 mouseMove CTRL 16035235 nil]
		aMorph: 	an OMenuMorph(673447936)
		transformedEvent: 	[143@282 146@284 mouseEnter CTRL 16035235 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[143@282 146@284 mouseEnter CTRL 16035235 nil]
		aLeftMorph: 	an OMenuMorph(673447936)
		anEvent: 	[143@282 146@284 mouseMove CTRL 16035235 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[143@282 146@284 mouseEnter CTRL 16035235 nil]
		aLeftMorph: 	an OMenuMorph(673447936)
		anEvent: 	[143@282 146@284 mouseMove CTRL 16035235 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(673447936)
		asMouseEnterEvent: 	[143@282 146@284 mouseMove CTRL 16035235 nil]
		anEnteredMorph: 	[143@282 146@284 mouseEnter CTRL 16035235 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(673447936))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(673447936))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[143@282 146@284 mouseMove CTRL 16035235 nil]
		asMouseEnterEvent: 	[143@282 146@284 mouseEnter CTRL 16035235 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[143@282 146@284 mouseMove CTRL 16035235 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[143@282 146@284 mouseMove CTRL 16035235 nil]
		evt: 	[143@282 146@284 mouseMove CTRL 16035235 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	184@316 corner: 200@332
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(243793920)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[169@304 184@316 mouseMove 16035338 nil]
		targetOffset: 	75@29
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 16035338 171 306 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[143@282 146@284 mouseMove CTRL 16035235 nil]
		evtBuf: 	#(1 16035235 144 282 0 2 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	184@316 corner: 200@332
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(243793920)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[169@304 184@316 mouseMove 16035338 nil]
		targetOffset: 	75@29
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 16035338 171 306 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(673447936))(an OMenuMorp...etc...
		lastStepTime: 	16035221
		lastStepMessage: 	nil
		lastCycleTime: 	16035407
		alarms: 	a Heap()
		lastAlarmTime: 	16035221
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(673447936))(an OMenuMorp...etc...
		lastStepTime: 	16035221
		lastStepMessage: 	nil
		lastCycleTime: 	16035407
		alarms: 	a Heap()
		lastAlarmTime: 	16035221
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(673447936))(an OMenuMorp...etc...
		lastStepTime: 	16035221
		lastStepMessage: 	nil
		lastCycleTime: 	16035407
		alarms: 	a Heap()
		lastAlarmTime: 	16035221
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(673447936))(an OMenuMorp...etc...
		lastStepTime: 	16035221
		lastStepMessage: 	nil
		lastCycleTime: 	16035407
		alarms: 	a Heap()
		lastAlarmTime: 	16035221
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1005322240) a Pr...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
30 December 2011 5:54:11 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(673447936)
	Arguments and temporary variables: 
		anEvent: 	[146@284 153@290 mouseEnter CTRL 16035259 nil]
	Receiver's instance variables: 
		bounds: 	125@282 corner: 325@314
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	125@282 corner: 325@314
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (689438720) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	325@282
		lastActivity: 	16033159


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [146@284 153@290 mouseEnter CTRL 16035259 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(673447936)
	Receiver's instance variables: 
		timeStamp: 	16035259
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	16
		position: 	153@290
		handler: 	nil
		wasHandled: 	false
		startPoint: 	146@284
		trail: 	{(148@286). (150@288). (153@290)}


MouseMoveEvent>>sentTo:
	Receiver: [146@284 153@290 mouseEnter CTRL 16035259 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(673447936)
	Receiver's instance variables: 
		timeStamp: 	16035259
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	16
		position: 	153@290
		handler: 	nil
		wasHandled: 	false
		startPoint: 	146@284
		trail: 	{(148@286). (150@288). (153@290)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(673447936)
	Arguments and temporary variables: 
		anEvent: 	[146@284 153@290 mouseEnter CTRL 16035259 nil]
	Receiver's instance variables: 
		bounds: 	125@282 corner: 325@314
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	125@282 corner: 325@314
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (689438720) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	325@282
		lastActivity: 	16033159


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[146@284 153@290 mouseEnter CTRL 16035259 nil]
		originalEvent: 	[146@284 153@290 mouseMove CTRL 16035259 nil]
		aMorph: 	an OMenuMorph(673447936)
		transformedEvent: 	[146@284 153@290 mouseEnter CTRL 16035259 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[146@284 153@290 mouseEnter CTRL 16035259 nil]
		aLeftMorph: 	an OMenuMorph(673447936)
		anEvent: 	[146@284 153@290 mouseMove CTRL 16035259 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[146@284 153@290 mouseEnter CTRL 16035259 nil]
		aLeftMorph: 	an OMenuMorph(673447936)
		anEvent: 	[146@284 153@290 mouseMove CTRL 16035259 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(673447936)
		asMouseEnterEvent: 	[146@284 153@290 mouseMove CTRL 16035259 nil]
		anEnteredMorph: 	[146@284 153@290 mouseEnter CTRL 16035259 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(673447936))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(673447936))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[146@284 153@290 mouseMove CTRL 16035259 nil]
		asMouseEnterEvent: 	[146@284 153@290 mouseEnter CTRL 16035259 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[146@284 153@290 mouseMove CTRL 16035259 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[146@284 153@290 mouseMove CTRL 16035259 nil]
		evt: 	[146@284 153@290 mouseMove CTRL 16035259 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	184@316 corner: 200@332
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(856424448)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[169@304 184@316 mouseMove 16035338 nil]
		targetOffset: 	75@29
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 16035338 171 306 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[146@284 153@290 mouseMove CTRL 16035259 nil]
		evtBuf: 	#(1 16035259 148 286 0 2 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	184@316 corner: 200@332
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(856424448)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[169@304 184@316 mouseMove 16035338 nil]
		targetOffset: 	75@29
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 16035338 171 306 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(673447936))(an OMenuMorp...etc...
		lastStepTime: 	16035221
		lastStepMessage: 	nil
		lastCycleTime: 	16035407
		alarms: 	a Heap()
		lastAlarmTime: 	16035221
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(673447936))(an OMenuMorp...etc...
		lastStepTime: 	16035221
		lastStepMessage: 	nil
		lastCycleTime: 	16035407
		alarms: 	a Heap()
		lastAlarmTime: 	16035221
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(673447936))(an OMenuMorp...etc...
		lastStepTime: 	16035221
		lastStepMessage: 	nil
		lastCycleTime: 	16035407
		alarms: 	a Heap()
		lastAlarmTime: 	16035221
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(673447936))(an OMenuMorp...etc...
		lastStepTime: 	16035221
		lastStepMessage: 	nil
		lastCycleTime: 	16035407
		alarms: 	a Heap()
		lastAlarmTime: 	16035221
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(544210944) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
30 December 2011 5:54:12 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(673447936)
	Arguments and temporary variables: 
		anEvent: 	[153@290 156@292 mouseEnter CTRL 16035283 nil]
	Receiver's instance variables: 
		bounds: 	125@282 corner: 325@314
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	125@282 corner: 325@314
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (689438720) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	325@282
		lastActivity: 	16033159


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [153@290 156@292 mouseEnter CTRL 16035283 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(673447936)
	Receiver's instance variables: 
		timeStamp: 	16035283
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	16
		position: 	156@292
		handler: 	nil
		wasHandled: 	false
		startPoint: 	153@290
		trail: 	{(156@292)}


MouseMoveEvent>>sentTo:
	Receiver: [153@290 156@292 mouseEnter CTRL 16035283 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(673447936)
	Receiver's instance variables: 
		timeStamp: 	16035283
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	16
		position: 	156@292
		handler: 	nil
		wasHandled: 	false
		startPoint: 	153@290
		trail: 	{(156@292)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(673447936)
	Arguments and temporary variables: 
		anEvent: 	[153@290 156@292 mouseEnter CTRL 16035283 nil]
	Receiver's instance variables: 
		bounds: 	125@282 corner: 325@314
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	125@282 corner: 325@314
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (689438720) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	325@282
		lastActivity: 	16033159


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[153@290 156@292 mouseEnter CTRL 16035283 nil]
		originalEvent: 	[153@290 156@292 mouseMove CTRL 16035283 nil]
		aMorph: 	an OMenuMorph(673447936)
		transformedEvent: 	[153@290 156@292 mouseEnter CTRL 16035283 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[153@290 156@292 mouseEnter CTRL 16035283 nil]
		aLeftMorph: 	an OMenuMorph(673447936)
		anEvent: 	[153@290 156@292 mouseMove CTRL 16035283 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[153@290 156@292 mouseEnter CTRL 16035283 nil]
		aLeftMorph: 	an OMenuMorph(673447936)
		anEvent: 	[153@290 156@292 mouseMove CTRL 16035283 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(673447936)
		asMouseEnterEvent: 	[153@290 156@292 mouseMove CTRL 16035283 nil]
		anEnteredMorph: 	[153@290 156@292 mouseEnter CTRL 16035283 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(673447936))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(673447936))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[153@290 156@292 mouseMove CTRL 16035283 nil]
		asMouseEnterEvent: 	[153@290 156@292 mouseEnter CTRL 16035283 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[153@290 156@292 mouseMove CTRL 16035283 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[153@290 156@292 mouseMove CTRL 16035283 nil]
		evt: 	[153@290 156@292 mouseMove CTRL 16035283 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	184@316 corner: 200@332
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(845938688)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[169@304 184@316 mouseMove 16035338 nil]
		targetOffset: 	75@29
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 16035338 171 306 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[153@290 156@292 mouseMove CTRL 16035283 nil]
		evtBuf: 	#(1 16035283 156 292 0 2 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	184@316 corner: 200@332
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(845938688)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[169@304 184@316 mouseMove 16035338 nil]
		targetOffset: 	75@29
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 16035338 171 306 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(673447936))(an OMenuMorp...etc...
		lastStepTime: 	16035221
		lastStepMessage: 	nil
		lastCycleTime: 	16035407
		alarms: 	a Heap()
		lastAlarmTime: 	16035221
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(673447936))(an OMenuMorp...etc...
		lastStepTime: 	16035221
		lastStepMessage: 	nil
		lastCycleTime: 	16035407
		alarms: 	a Heap()
		lastAlarmTime: 	16035221
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(673447936))(an OMenuMorp...etc...
		lastStepTime: 	16035221
		lastStepMessage: 	nil
		lastCycleTime: 	16035407
		alarms: 	a Heap()
		lastAlarmTime: 	16035221
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(673447936))(an OMenuMorp...etc...
		lastStepTime: 	16035221
		lastStepMessage: 	nil
		lastCycleTime: 	16035407
		alarms: 	a Heap()
		lastAlarmTime: 	16035221
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(533725184) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
30 December 2011 5:54:12 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(673447936)
	Arguments and temporary variables: 
		anEvent: 	[153@290 156@292 mouseEnter CTRL 16035283 nil]
	Receiver's instance variables: 
		bounds: 	125@282 corner: 325@314
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	125@282 corner: 325@314
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (689438720) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	325@282
		lastActivity: 	16033159


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [153@290 156@292 mouseEnter CTRL 16035283 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(673447936)
	Receiver's instance variables: 
		timeStamp: 	16035283
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	16
		position: 	156@292
		handler: 	nil
		wasHandled: 	false
		startPoint: 	153@290
		trail: 	{(156@292)}


MouseMoveEvent>>sentTo:
	Receiver: [153@290 156@292 mouseEnter CTRL 16035283 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(673447936)
	Receiver's instance variables: 
		timeStamp: 	16035283
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	16
		position: 	156@292
		handler: 	nil
		wasHandled: 	false
		startPoint: 	153@290
		trail: 	{(156@292)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(673447936)
	Arguments and temporary variables: 
		anEvent: 	[153@290 156@292 mouseEnter CTRL 16035283 nil]
	Receiver's instance variables: 
		bounds: 	125@282 corner: 325@314
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	125@282 corner: 325@314
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (689438720) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	325@282
		lastActivity: 	16033159


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[153@290 156@292 mouseEnter CTRL 16035283 nil]
		originalEvent: 	[153@290 156@292 mouseMove CTRL 16035283 nil]
		aMorph: 	an OMenuMorph(673447936)
		transformedEvent: 	[153@290 156@292 mouseEnter CTRL 16035283 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[153@290 156@292 mouseEnter CTRL 16035283 nil]
		aLeftMorph: 	an OMenuMorph(673447936)
		anEvent: 	[153@290 156@292 mouseMove CTRL 16035283 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[153@290 156@292 mouseEnter CTRL 16035283 nil]
		aLeftMorph: 	an OMenuMorph(673447936)
		anEvent: 	[153@290 156@292 mouseMove CTRL 16035283 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(673447936)
		asMouseEnterEvent: 	[153@290 156@292 mouseMove CTRL 16035283 nil]
		anEnteredMorph: 	[153@290 156@292 mouseEnter CTRL 16035283 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(673447936))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(673447936))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[153@290 156@292 mouseMove CTRL 16035283 nil]
		asMouseEnterEvent: 	[153@290 156@292 mouseEnter CTRL 16035283 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[153@290 156@292 mouseMove CTRL 16035283 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keyDown '<Cmd-c>']
		evt: 	[keyDown '<Cmd-c>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	184@316 corner: 200@332
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(493092864)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[169@304 184@316 mouseMove 16035338 nil]
		targetOffset: 	75@29
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 16035338 171 306 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keyDown '<Cmd-c>']
		evtBuf: 	#(2 16035287 99 1 8 99 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	184@316 corner: 200@332
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(493092864)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[169@304 184@316 mouseMove 16035338 nil]
		targetOffset: 	75@29
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 16035338 171 306 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(673447936))(an OMenuMorp...etc...
		lastStepTime: 	16035221
		lastStepMessage: 	nil
		lastCycleTime: 	16035407
		alarms: 	a Heap()
		lastAlarmTime: 	16035221
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(673447936))(an OMenuMorp...etc...
		lastStepTime: 	16035221
		lastStepMessage: 	nil
		lastCycleTime: 	16035407
		alarms: 	a Heap()
		lastAlarmTime: 	16035221
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(673447936))(an OMenuMorp...etc...
		lastStepTime: 	16035221
		lastStepMessage: 	nil
		lastCycleTime: 	16035407
		alarms: 	a Heap()
		lastAlarmTime: 	16035221
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(673447936))(an OMenuMorp...etc...
		lastStepTime: 	16035221
		lastStepMessage: 	nil
		lastCycleTime: 	16035407
		alarms: 	a Heap()
		lastAlarmTime: 	16035221
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(180879360) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
30 December 2011 5:54:12 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(673447936)
	Arguments and temporary variables: 
		anEvent: 	[153@290 156@292 mouseEnter CTRL 16035283 nil]
	Receiver's instance variables: 
		bounds: 	125@282 corner: 325@314
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	125@282 corner: 325@314
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (689438720) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	325@282
		lastActivity: 	16033159


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [153@290 156@292 mouseEnter CTRL 16035283 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(673447936)
	Receiver's instance variables: 
		timeStamp: 	16035283
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	16
		position: 	156@292
		handler: 	nil
		wasHandled: 	false
		startPoint: 	153@290
		trail: 	{(156@292)}


MouseMoveEvent>>sentTo:
	Receiver: [153@290 156@292 mouseEnter CTRL 16035283 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(673447936)
	Receiver's instance variables: 
		timeStamp: 	16035283
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	16
		position: 	156@292
		handler: 	nil
		wasHandled: 	false
		startPoint: 	153@290
		trail: 	{(156@292)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(673447936)
	Arguments and temporary variables: 
		anEvent: 	[153@290 156@292 mouseEnter CTRL 16035283 nil]
	Receiver's instance variables: 
		bounds: 	125@282 corner: 325@314
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	125@282 corner: 325@314
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (689438720) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	325@282
		lastActivity: 	16033159


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[153@290 156@292 mouseEnter CTRL 16035283 nil]
		originalEvent: 	[153@290 156@292 mouseMove CTRL 16035283 nil]
		aMorph: 	an OMenuMorph(673447936)
		transformedEvent: 	[153@290 156@292 mouseEnter CTRL 16035283 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[153@290 156@292 mouseEnter CTRL 16035283 nil]
		aLeftMorph: 	an OMenuMorph(673447936)
		anEvent: 	[153@290 156@292 mouseMove CTRL 16035283 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[153@290 156@292 mouseEnter CTRL 16035283 nil]
		aLeftMorph: 	an OMenuMorph(673447936)
		anEvent: 	[153@290 156@292 mouseMove CTRL 16035283 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(673447936)
		asMouseEnterEvent: 	[153@290 156@292 mouseMove CTRL 16035283 nil]
		anEnteredMorph: 	[153@290 156@292 mouseEnter CTRL 16035283 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(673447936))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(673447936))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[153@290 156@292 mouseMove CTRL 16035283 nil]
		asMouseEnterEvent: 	[153@290 156@292 mouseEnter CTRL 16035283 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[153@290 156@292 mouseMove CTRL 16035283 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-c>']
		evt: 	[keystroke '<Cmd-c>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	184@316 corner: 200@332
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(408944640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[169@304 184@316 mouseMove 16035338 nil]
		targetOffset: 	75@29
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 16035338 171 306 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-c>']
		evtBuf: 	#(2 16035287 99 0 8 99 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	184@316 corner: 200@332
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(408944640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[169@304 184@316 mouseMove 16035338 nil]
		targetOffset: 	75@29
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 16035338 171 306 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(673447936))(an OMenuMorp...etc...
		lastStepTime: 	16035221
		lastStepMessage: 	nil
		lastCycleTime: 	16035407
		alarms: 	a Heap()
		lastAlarmTime: 	16035221
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(673447936))(an OMenuMorp...etc...
		lastStepTime: 	16035221
		lastStepMessage: 	nil
		lastCycleTime: 	16035407
		alarms: 	a Heap()
		lastAlarmTime: 	16035221
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(673447936))(an OMenuMorp...etc...
		lastStepTime: 	16035221
		lastStepMessage: 	nil
		lastCycleTime: 	16035407
		alarms: 	a Heap()
		lastAlarmTime: 	16035221
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(673447936))(an OMenuMorp...etc...
		lastStepTime: 	16035221
		lastStepMessage: 	nil
		lastCycleTime: 	16035407
		alarms: 	a Heap()
		lastAlarmTime: 	16035221
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(96731136) a PreD...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
30 December 2011 5:54:12 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(673447936)
	Arguments and temporary variables: 
		anEvent: 	[156@292 169@304 mouseEnter CTRL 16035291 nil]
	Receiver's instance variables: 
		bounds: 	125@282 corner: 325@314
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	125@282 corner: 325@314
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (689438720) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	325@282
		lastActivity: 	16033159


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [156@292 169@304 mouseEnter CTRL 16035291 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(673447936)
	Receiver's instance variables: 
		timeStamp: 	16035291
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	16
		position: 	169@304
		handler: 	nil
		wasHandled: 	false
		startPoint: 	156@292
		trail: 	{(158@294). (161@296). (164@299). (166@301). (169@304)}


MouseMoveEvent>>sentTo:
	Receiver: [156@292 169@304 mouseEnter CTRL 16035291 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(673447936)
	Receiver's instance variables: 
		timeStamp: 	16035291
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	16
		position: 	169@304
		handler: 	nil
		wasHandled: 	false
		startPoint: 	156@292
		trail: 	{(158@294). (161@296). (164@299). (166@301). (169@304)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(673447936)
	Arguments and temporary variables: 
		anEvent: 	[156@292 169@304 mouseEnter CTRL 16035291 nil]
	Receiver's instance variables: 
		bounds: 	125@282 corner: 325@314
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	125@282 corner: 325@314
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (689438720) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	325@282
		lastActivity: 	16033159


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[156@292 169@304 mouseEnter CTRL 16035291 nil]
		originalEvent: 	[156@292 169@304 mouseMove CTRL 16035291 nil]
		aMorph: 	an OMenuMorph(673447936)
		transformedEvent: 	[156@292 169@304 mouseEnter CTRL 16035291 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[156@292 169@304 mouseEnter CTRL 16035291 nil]
		aLeftMorph: 	an OMenuMorph(673447936)
		anEvent: 	[156@292 169@304 mouseMove CTRL 16035291 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[156@292 169@304 mouseEnter CTRL 16035291 nil]
		aLeftMorph: 	an OMenuMorph(673447936)
		anEvent: 	[156@292 169@304 mouseMove CTRL 16035291 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(673447936)
		asMouseEnterEvent: 	[156@292 169@304 mouseMove CTRL 16035291 nil]
		anEnteredMorph: 	[156@292 169@304 mouseEnter CTRL 16035291 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(673447936))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(673447936))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[156@292 169@304 mouseMove CTRL 16035291 nil]
		asMouseEnterEvent: 	[156@292 169@304 mouseEnter CTRL 16035291 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[156@292 169@304 mouseMove CTRL 16035291 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[156@292 169@304 mouseMove CTRL 16035291 nil]
		evt: 	[156@292 169@304 mouseMove CTRL 16035291 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	184@316 corner: 200@332
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1032060928)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[169@304 184@316 mouseMove 16035338 nil]
		targetOffset: 	75@29
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 16035338 171 306 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[156@292 169@304 mouseMove CTRL 16035291 nil]
		evtBuf: 	#(1 16035291 158 294 0 2 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	184@316 corner: 200@332
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1032060928)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[169@304 184@316 mouseMove 16035338 nil]
		targetOffset: 	75@29
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 16035338 171 306 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(673447936))(an OMenuMorp...etc...
		lastStepTime: 	16035221
		lastStepMessage: 	nil
		lastCycleTime: 	16035407
		alarms: 	a Heap()
		lastAlarmTime: 	16035221
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(673447936))(an OMenuMorp...etc...
		lastStepTime: 	16035221
		lastStepMessage: 	nil
		lastCycleTime: 	16035407
		alarms: 	a Heap()
		lastAlarmTime: 	16035221
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(673447936))(an OMenuMorp...etc...
		lastStepTime: 	16035221
		lastStepMessage: 	nil
		lastCycleTime: 	16035407
		alarms: 	a Heap()
		lastAlarmTime: 	16035221
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(673447936))(an OMenuMorp...etc...
		lastStepTime: 	16035221
		lastStepMessage: 	nil
		lastCycleTime: 	16035407
		alarms: 	a Heap()
		lastAlarmTime: 	16035221
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(719847424) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
30 December 2011 5:54:12 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(673447936)
	Arguments and temporary variables: 
		anEvent: 	[156@292 169@304 mouseEnter CTRL 16035291 nil]
	Receiver's instance variables: 
		bounds: 	125@282 corner: 325@314
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	125@282 corner: 325@314
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (689438720) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	325@282
		lastActivity: 	16033159


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [156@292 169@304 mouseEnter CTRL 16035291 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(673447936)
	Receiver's instance variables: 
		timeStamp: 	16035291
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	16
		position: 	169@304
		handler: 	nil
		wasHandled: 	false
		startPoint: 	156@292
		trail: 	{(158@294). (161@296). (164@299). (166@301). (169@304)}


MouseMoveEvent>>sentTo:
	Receiver: [156@292 169@304 mouseEnter CTRL 16035291 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(673447936)
	Receiver's instance variables: 
		timeStamp: 	16035291
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	16
		position: 	169@304
		handler: 	nil
		wasHandled: 	false
		startPoint: 	156@292
		trail: 	{(158@294). (161@296). (164@299). (166@301). (169@304)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(673447936)
	Arguments and temporary variables: 
		anEvent: 	[156@292 169@304 mouseEnter CTRL 16035291 nil]
	Receiver's instance variables: 
		bounds: 	125@282 corner: 325@314
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	125@282 corner: 325@314
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (689438720) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	325@282
		lastActivity: 	16033159


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[156@292 169@304 mouseEnter CTRL 16035291 nil]
		originalEvent: 	[156@292 169@304 mouseMove CTRL 16035291 nil]
		aMorph: 	an OMenuMorph(673447936)
		transformedEvent: 	[156@292 169@304 mouseEnter CTRL 16035291 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[156@292 169@304 mouseEnter CTRL 16035291 nil]
		aLeftMorph: 	an OMenuMorph(673447936)
		anEvent: 	[156@292 169@304 mouseMove CTRL 16035291 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[156@292 169@304 mouseEnter CTRL 16035291 nil]
		aLeftMorph: 	an OMenuMorph(673447936)
		anEvent: 	[156@292 169@304 mouseMove CTRL 16035291 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(673447936)
		asMouseEnterEvent: 	[156@292 169@304 mouseMove CTRL 16035291 nil]
		anEnteredMorph: 	[156@292 169@304 mouseEnter CTRL 16035291 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(673447936))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(673447936))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[156@292 169@304 mouseMove CTRL 16035291 nil]
		asMouseEnterEvent: 	[156@292 169@304 mouseEnter CTRL 16035291 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[156@292 169@304 mouseMove CTRL 16035291 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(722206720) a TransformMorph(861929472)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keyUp '?']
		evt: 	[keyUp '?']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	184@316 corner: 200@332
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(757334016)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[169@304 184@316 mouseMove 16035338 nil]
		targetOffset: 	75@29
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 16035338 171 306 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keyUp '?']
		evtBuf: 	#(2 16035325 63 2 0 0 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	184@316 corner: 200@332
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(757334016)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[169@304 184@316 mouseMove 16035338 nil]
		targetOffset: 	75@29
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 16035338 171 306 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(673447936))(an OMenuMorp...etc...
		lastStepTime: 	16035221
		lastStepMessage: 	nil
		lastCycleTime: 	16035407
		alarms: 	a Heap()
		lastAlarmTime: 	16035221
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(673447936))(an OMenuMorp...etc...
		lastStepTime: 	16035221
		lastStepMessage: 	nil
		lastCycleTime: 	16035407
		alarms: 	a Heap()
		lastAlarmTime: 	16035221
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(673447936))(an OMenuMorp...etc...
		lastStepTime: 	16035221
		lastStepMessage: 	nil
		lastCycleTime: 	16035407
		alarms: 	a Heap()
		lastAlarmTime: 	16035221
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(673447936))(an OMenuMorp...etc...
		lastStepTime: 	16035221
		lastStepMessage: 	nil
		lastCycleTime: 	16035407
		alarms: 	a Heap()
		lastAlarmTime: 	16035221
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(390070272) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: BandCategory>>members:
30 December 2011 5:54:30 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BandCategory(Object)>>doesNotUnderstand: #members:
	Receiver: a BandCategory
	Arguments and temporary variables: 
		aMessage: 	members: a LinkedList()
		exception: 	MessageNotUnderstood: BandCategory>>members:
		resumeValue: 	nil
	Receiver's instance variables: 
		nominees: 	nil


BandCategory(Category)>>initialize
	Receiver: a BandCategory
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nominees: 	nil


BandCategory class(Behavior)>>new
	Receiver: BandCategory
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Category
		methodDict: 	a MethodDictionary(#isValidNominee:->(BandCategory>>#isValidNominee...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('as yet unclassified' isValidNominee:)

		subclasses: 	{NewcomerBandCategory}
		name: 	#BandCategory
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#POOL
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		awardBestBand: 	nil
		awardBestNewcomerBand: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex awardBestBand awardBest...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	| clement sylvain cpex awardBestBand awardBestNewcomerBand |
...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(497025024)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex awardBestBand awardBest...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 628)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 628)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 747@194
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 747@194
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 16054187) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex awardBestBand awardBestNewcomerBand |
...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 628)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 628)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex awardBestBand awardBestNewcomerBan...etc...
		bindings: 	a Dictionary('a'->a Band 'cr'->nil )
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(220200960)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[146@283 mouseUp 16054347 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	121@268 corner: 258@286
		owner: 	a MenuMorph(213123072)
		submorphs: 	#()
		fullBounds: 	121@268 corner: 258@286
		color: 	Color black
		extension: 	a MorphExtension (230424576)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(220200960)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[146@283 mouseUp 16054347 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	121@268 corner: 258@286
		owner: 	a MenuMorph(213123072)
		submorphs: 	#()
		fullBounds: 	121@268 corner: 258@286
		color: 	Color black
		extension: 	a MorphExtension (230424576)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(220200960)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[146@283 mouseUp 16054347 nil]
	Receiver's instance variables: 
		bounds: 	121@268 corner: 258@286
		owner: 	a MenuMorph(213123072)
		submorphs: 	#()
		fullBounds: 	121@268 corner: 258@286
		color: 	Color black
		extension: 	a MorphExtension (230424576)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(220200960)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[146@283 mouseUp 16054347 nil]
	Receiver's instance variables: 
		bounds: 	121@268 corner: 258@286
		owner: 	a MenuMorph(213123072)
		submorphs: 	#()
		fullBounds: 	121@268 corner: 258@286
		color: 	Color black
		extension: 	a MorphExtension (230424576)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [146@283 mouseUp 16054347 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(220200960)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	16054347
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	146@283
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(220200960)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[146@283 mouseUp 16054347 nil]
	Receiver's instance variables: 
		bounds: 	121@268 corner: 258@286
		owner: 	a MenuMorph(213123072)
		submorphs: 	#()
		fullBounds: 	121@268 corner: 258@286
		color: 	Color black
		extension: 	a MorphExtension (230424576)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[146@283 mouseUp 16054347 nil]
		aMorph: 	a ToggleMenuItemMorph(220200960)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[146@283 mouseUp 16054347 nil]
		aMorph: 	a ToggleMenuItemMorph(220200960)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(220200960)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[146@283 mouseUp 16054347 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	121@268 corner: 258@286
		owner: 	a MenuMorph(213123072)
		submorphs: 	#()
		fullBounds: 	121@268 corner: 258@286
		color: 	Color black
		extension: 	a MorphExtension (230424576)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[146@283 mouseUp 16054347 nil]
		aMorph: 	a MenuMorph(213123072)
		localEvt: 	[146@283 mouseUp 16054347 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(220200960)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(220200960)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[146@283 mouseUp 16054347 nil]
		aMorph: 	a MenuMorph(213123072)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(213123072)
	Arguments and temporary variables: 
		anEvent: 	[146@283 mouseUp 16054347 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	116@263 corner: 263@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(220200960)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	116@263 corner: 263@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (228065280) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(220200960)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(220200960)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(213123072)
	Arguments and temporary variables: 
		anEvent: 	[146@283 mouseUp 16054347 nil]
	Receiver's instance variables: 
		bounds: 	116@263 corner: 263@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(220200960)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	116@263 corner: 263@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (228065280) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(220200960)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(220200960)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(213123072)
	Arguments and temporary variables: 
		evt: 	[146@283 mouseUp 16054347 nil]
	Receiver's instance variables: 
		bounds: 	116@263 corner: 263@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(220200960)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	116@263 corner: 263@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (228065280) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(220200960)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(220200960)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[146@283 mouseUp 16054347 nil]
		focusHolder: 	a MenuMorph(213123072)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	146@283 corner: 162@299
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	146@283 corner: 162@299
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(523501568)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[146@283 mouseUp 16054347 nil]
		targetOffset: 	25@15
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 16054347 146 283 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(210763776) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[146@283 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(210763776) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[146@283 mouseUp 16054347 nil]
		focusHolder: 	a MenuMorph(213123072)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	146@283 corner: 162@299
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	146@283 corner: 162@299
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(523501568)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[146@283 mouseUp 16054347 nil]
		targetOffset: 	25@15
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 16054347 146 283 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[146@283 mouseUp 16054347 nil]
		focusHolder: 	a MenuMorph(213123072)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	146@283 corner: 162@299
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	146@283 corner: 162@299
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(523501568)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[146@283 mouseUp 16054347 nil]
		targetOffset: 	25@15
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 16054347 146 283 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[146@283 mouseUp 16054347 nil]
	Receiver's instance variables: 
		bounds: 	146@283 corner: 162@299
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	146@283 corner: 162@299
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(523501568)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[146@283 mouseUp 16054347 nil]
		targetOffset: 	25@15
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 16054347 146 283 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[146@283 mouseUp 16054347 nil]
		evt: 	[146@283 mouseUp 16054347 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	146@283 corner: 162@299
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	146@283 corner: 162@299
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(523501568)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[146@283 mouseUp 16054347 nil]
		targetOffset: 	25@15
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 16054347 146 283 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil



--- The full stack ---
BandCategory(Object)>>doesNotUnderstand: #members:
BandCategory(Category)>>initialize
BandCategory class(Behavior)>>new
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "addMember:" is nil
30 December 2011 7:37:41 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #addMember:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	addMember: a Solo
		exception: 	MessageNotUnderstood: receiver of "addMember:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'clement := Solo new artistName: ''Clement Peer...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	clement := Solo new artistName: 'Clement Peerens';
				 activ...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(875823104)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'clement := Solo new artistName: ''Clement Peer...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 567)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 567)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 747@178
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 747@178
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 22244229) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'clement := Solo new artistName: ''Clement Peerens''; activeSi...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 567)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 567)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for 'clement := Solo new artistName: ''Clement Peerens''; acti...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(310116352)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[186@278 mouseUp 22244588 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	163@268 corner: 300@286
		owner: 	a MenuMorph(303038464)
		submorphs: 	#()
		fullBounds: 	163@268 corner: 300@286
		color: 	Color black
		extension: 	a MorphExtension (320339968)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(310116352)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[186@278 mouseUp 22244588 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	163@268 corner: 300@286
		owner: 	a MenuMorph(303038464)
		submorphs: 	#()
		fullBounds: 	163@268 corner: 300@286
		color: 	Color black
		extension: 	a MorphExtension (320339968)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(310116352)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[186@278 mouseUp 22244588 nil]
	Receiver's instance variables: 
		bounds: 	163@268 corner: 300@286
		owner: 	a MenuMorph(303038464)
		submorphs: 	#()
		fullBounds: 	163@268 corner: 300@286
		color: 	Color black
		extension: 	a MorphExtension (320339968)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(310116352)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[186@278 mouseUp 22244588 nil]
	Receiver's instance variables: 
		bounds: 	163@268 corner: 300@286
		owner: 	a MenuMorph(303038464)
		submorphs: 	#()
		fullBounds: 	163@268 corner: 300@286
		color: 	Color black
		extension: 	a MorphExtension (320339968)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [186@278 mouseUp 22244588 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(310116352)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	22244588
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	186@278
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(310116352)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[186@278 mouseUp 22244588 nil]
	Receiver's instance variables: 
		bounds: 	163@268 corner: 300@286
		owner: 	a MenuMorph(303038464)
		submorphs: 	#()
		fullBounds: 	163@268 corner: 300@286
		color: 	Color black
		extension: 	a MorphExtension (320339968)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[186@278 mouseUp 22244588 nil]
		aMorph: 	a ToggleMenuItemMorph(310116352)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[186@278 mouseUp 22244588 nil]
		aMorph: 	a ToggleMenuItemMorph(310116352)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(310116352)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[186@278 mouseUp 22244588 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	163@268 corner: 300@286
		owner: 	a MenuMorph(303038464)
		submorphs: 	#()
		fullBounds: 	163@268 corner: 300@286
		color: 	Color black
		extension: 	a MorphExtension (320339968)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[186@278 mouseUp 22244588 nil]
		aMorph: 	a MenuMorph(303038464)
		localEvt: 	[186@278 mouseUp 22244588 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(310116352)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(310116352)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[186@278 mouseUp 22244588 nil]
		aMorph: 	a MenuMorph(303038464)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(303038464)
	Arguments and temporary variables: 
		anEvent: 	[186@278 mouseUp 22244588 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	158@263 corner: 305@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(310116352)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	158@263 corner: 305@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (317980672) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(310116352)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(310116352)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(303038464)
	Arguments and temporary variables: 
		anEvent: 	[186@278 mouseUp 22244588 nil]
	Receiver's instance variables: 
		bounds: 	158@263 corner: 305@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(310116352)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	158@263 corner: 305@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (317980672) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(310116352)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(310116352)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(303038464)
	Arguments and temporary variables: 
		evt: 	[186@278 mouseUp 22244588 nil]
	Receiver's instance variables: 
		bounds: 	158@263 corner: 305@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(310116352)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	158@263 corner: 305@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (317980672) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(310116352)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(310116352)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[186@278 mouseUp 22244588 nil]
		focusHolder: 	a MenuMorph(303038464)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	186@278 corner: 202@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	186@278 corner: 202@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(883163136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[186@278 mouseUp 22244588 nil]
		targetOffset: 	23@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 22244588 186 278 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(514588672) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[186@278 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(514588672) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[186@278 mouseUp 22244588 nil]
		focusHolder: 	a MenuMorph(303038464)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	186@278 corner: 202@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	186@278 corner: 202@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(883163136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[186@278 mouseUp 22244588 nil]
		targetOffset: 	23@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 22244588 186 278 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[186@278 mouseUp 22244588 nil]
		focusHolder: 	a MenuMorph(303038464)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	186@278 corner: 202@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	186@278 corner: 202@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(883163136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[186@278 mouseUp 22244588 nil]
		targetOffset: 	23@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 22244588 186 278 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[186@278 mouseUp 22244588 nil]
	Receiver's instance variables: 
		bounds: 	186@278 corner: 202@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	186@278 corner: 202@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(883163136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[186@278 mouseUp 22244588 nil]
		targetOffset: 	23@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 22244588 186 278 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[186@278 mouseUp 22244588 nil]
		evt: 	[186@278 mouseUp 22244588 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	186@278 corner: 202@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	186@278 corner: 202@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(883163136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[186@278 mouseUp 22244588 nil]
		targetOffset: 	23@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 22244588 186 278 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[186@278 mouseUp 22244588 nil]
		evtBuf: 	#(1 22244588 186 278 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	186@278 corner: 202@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	186@278 corner: 202@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(883163136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[186@278 mouseUp 22244588 nil]
		targetOffset: 	23@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 22244588 186 278 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(514588672))(a PreDebu...etc...
		lastStepTime: 	22244588
		lastStepMessage: 	nil
		lastCycleTime: 	22244690
		alarms: 	a Heap()
		lastAlarmTime: 	22244588
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #addMember:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Instances of SmallInteger are not indexable
30 December 2011 7:49:02 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

SmallInteger(Object)>>error:
	Receiver: 1985
	Arguments and temporary variables: 
		aString: 	'Instances of SmallInteger are not indexable'
	Receiver's instance variables: 
1985

SmallInteger(Object)>>errorNotIndexable
	Receiver: 1985
	Arguments and temporary variables: 

	Receiver's instance variables: 
1985

SmallInteger(Object)>>size
	Receiver: 1985
	Arguments and temporary variables: 

	Receiver's instance variables: 
1985

ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
	Receiver: 'Clement Peerens active since '
	Arguments and temporary variables: 
		start: 	30
		stop: 	29
		replacementCollection: 	1985
		newSequenceableCollection: 	nil
		newSize: 	nil
		endReplacement: 	nil
	Receiver's instance variables: 
'Clement Peerens active since '

ByteString(SequenceableCollection)>>,
	Receiver: 'Clement Peerens active since '
	Arguments and temporary variables: 
		otherCollection: 	1985
	Receiver's instance variables: 
'Clement Peerens active since '

Solo(Artist)>>asString
	Receiver: a Solo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeSince: 	1985
		awardsWon: 	a LinkedList()
		artistName: 	'Clement Peerens'


ThreadSafeTranscript>>print:
	Receiver: Transcript
	Arguments and temporary variables: 
		anObject: 	a Solo
	Receiver's instance variables: 
		stream: 	a WriteStream ''
		accessSemaphore: 	a Mutex


ThreadSafeTranscript>>show:
	Receiver: Transcript
	Arguments and temporary variables: 
		anObject: 	a Solo
	Receiver's instance variables: 
		stream: 	a WriteStream ''
		accessSemaphore: 	a Mutex


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	nil
		cpex: 	nil
		hetfield: 	nil
		ulrich: 	nil
		hammett: 	nil
		trujillo: 	nil
		metallica: 	nil
		awardBestBand: 	nil
		awardBestNewcomerBand: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(377749504)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 950)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 950)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 747@338
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 747@338
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 22926059) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 950)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 950)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(558628864)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[171@276 mouseUp 22926605 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	134@268 corner: 271@286
		owner: 	a MenuMorph(551550976)
		submorphs: 	#()
		fullBounds: 	134@268 corner: 271@286
		color: 	Color black
		extension: 	a MorphExtension (568852480)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(558628864)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[171@276 mouseUp 22926605 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	134@268 corner: 271@286
		owner: 	a MenuMorph(551550976)
		submorphs: 	#()
		fullBounds: 	134@268 corner: 271@286
		color: 	Color black
		extension: 	a MorphExtension (568852480)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(558628864)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[171@276 mouseUp 22926605 nil]
	Receiver's instance variables: 
		bounds: 	134@268 corner: 271@286
		owner: 	a MenuMorph(551550976)
		submorphs: 	#()
		fullBounds: 	134@268 corner: 271@286
		color: 	Color black
		extension: 	a MorphExtension (568852480)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(558628864)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[171@276 mouseUp 22926605 nil]
	Receiver's instance variables: 
		bounds: 	134@268 corner: 271@286
		owner: 	a MenuMorph(551550976)
		submorphs: 	#()
		fullBounds: 	134@268 corner: 271@286
		color: 	Color black
		extension: 	a MorphExtension (568852480)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [171@276 mouseUp 22926605 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(558628864)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	22926605
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	171@276
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(558628864)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[171@276 mouseUp 22926605 nil]
	Receiver's instance variables: 
		bounds: 	134@268 corner: 271@286
		owner: 	a MenuMorph(551550976)
		submorphs: 	#()
		fullBounds: 	134@268 corner: 271@286
		color: 	Color black
		extension: 	a MorphExtension (568852480)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[171@276 mouseUp 22926605 nil]
		aMorph: 	a ToggleMenuItemMorph(558628864)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[171@276 mouseUp 22926605 nil]
		aMorph: 	a ToggleMenuItemMorph(558628864)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(558628864)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[171@276 mouseUp 22926605 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	134@268 corner: 271@286
		owner: 	a MenuMorph(551550976)
		submorphs: 	#()
		fullBounds: 	134@268 corner: 271@286
		color: 	Color black
		extension: 	a MorphExtension (568852480)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[171@276 mouseUp 22926605 nil]
		aMorph: 	a MenuMorph(551550976)
		localEvt: 	[171@276 mouseUp 22926605 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(558628864)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(558628864)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[171@276 mouseUp 22926605 nil]
		aMorph: 	a MenuMorph(551550976)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(551550976)
	Arguments and temporary variables: 
		anEvent: 	[171@276 mouseUp 22926605 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	129@263 corner: 276@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(558628864)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	129@263 corner: 276@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (566493184) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(558628864)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(558628864)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(551550976)
	Arguments and temporary variables: 
		anEvent: 	[171@276 mouseUp 22926605 nil]
	Receiver's instance variables: 
		bounds: 	129@263 corner: 276@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(558628864)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	129@263 corner: 276@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (566493184) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(558628864)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(558628864)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(551550976)
	Arguments and temporary variables: 
		evt: 	[171@276 mouseUp 22926605 nil]
	Receiver's instance variables: 
		bounds: 	129@263 corner: 276@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(558628864)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	129@263 corner: 276@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (566493184) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(558628864)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(558628864)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[171@276 mouseUp 22926605 nil]
		focusHolder: 	a MenuMorph(551550976)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	163@267 corner: 179@283
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(141819904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[171@276 mouseUp 22926605 nil]
		targetOffset: 	37@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	-8@ -9
		hardwareCursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
...etc...
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 22926605 171 276 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(692060160) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>error:
SmallInteger(Object)>>errorNotIndexable
SmallInteger(Object)>>size
ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
ByteString(SequenceableCollection)>>,
Solo(Artist)>>asString
ThreadSafeTranscript>>print:
ThreadSafeTranscript>>show:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
SystemWindow(Morph)>>processEvent:
[evt wasHandled: false.
	self processEvent: evt] in SystemWindow>>mouseDown:
BlockClosure>>ensure:
SystemWindow>>mouseDown:
SystemWindow(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
SystemWindow(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Instances of SmallInteger are not indexable
30 December 2011 7:49:40 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

SmallInteger(Object)>>error:
	Receiver: 1985
	Arguments and temporary variables: 
		aString: 	'Instances of SmallInteger are not indexable'
	Receiver's instance variables: 
1985

SmallInteger(Object)>>errorNotIndexable
	Receiver: 1985
	Arguments and temporary variables: 

	Receiver's instance variables: 
1985

SmallInteger(Object)>>size
	Receiver: 1985
	Arguments and temporary variables: 

	Receiver's instance variables: 
1985

ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
	Receiver: 'Clement Peerens active since '
	Arguments and temporary variables: 
		start: 	30
		stop: 	29
		replacementCollection: 	1985
		newSequenceableCollection: 	nil
		newSize: 	nil
		endReplacement: 	nil
	Receiver's instance variables: 
'Clement Peerens active since '

ByteString(SequenceableCollection)>>,
	Receiver: 'Clement Peerens active since '
	Arguments and temporary variables: 
		otherCollection: 	1985
	Receiver's instance variables: 
'Clement Peerens active since '

Solo(Artist)>>asString
	Receiver: a Solo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeSince: 	1985
		awardsWon: 	a LinkedList()
		artistName: 	'Clement Peerens'


ThreadSafeTranscript>>print:
	Receiver: Transcript
	Arguments and temporary variables: 
		anObject: 	a Solo
	Receiver's instance variables: 
		stream: 	a WriteStream ''
		accessSemaphore: 	a Mutex


ThreadSafeTranscript>>show:
	Receiver: Transcript
	Arguments and temporary variables: 
		anObject: 	a Solo
	Receiver's instance variables: 
		stream: 	a WriteStream ''
		accessSemaphore: 	a Mutex


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	nil
		cpex: 	nil
		hetfield: 	nil
		ulrich: 	nil
		hammett: 	nil
		trujillo: 	nil
		metallica: 	nil
		awardBestBand: 	nil
		awardBestNewcomerBand: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(7602176)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 950)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 950)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 747@338
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 747@338
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 22963667) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 950)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 950)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(575143936)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[171@279 mouseUp 22964085 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	123@268 corner: 260@286
		owner: 	a MenuMorph(568066048)
		submorphs: 	#()
		fullBounds: 	123@268 corner: 260@286
		color: 	Color black
		extension: 	a MorphExtension (585367552)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(575143936)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[171@279 mouseUp 22964085 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	123@268 corner: 260@286
		owner: 	a MenuMorph(568066048)
		submorphs: 	#()
		fullBounds: 	123@268 corner: 260@286
		color: 	Color black
		extension: 	a MorphExtension (585367552)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(575143936)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[171@279 mouseUp 22964085 nil]
	Receiver's instance variables: 
		bounds: 	123@268 corner: 260@286
		owner: 	a MenuMorph(568066048)
		submorphs: 	#()
		fullBounds: 	123@268 corner: 260@286
		color: 	Color black
		extension: 	a MorphExtension (585367552)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(575143936)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[171@279 mouseUp 22964085 nil]
	Receiver's instance variables: 
		bounds: 	123@268 corner: 260@286
		owner: 	a MenuMorph(568066048)
		submorphs: 	#()
		fullBounds: 	123@268 corner: 260@286
		color: 	Color black
		extension: 	a MorphExtension (585367552)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [171@279 mouseUp 22964085 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(575143936)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	22964085
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	171@279
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(575143936)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[171@279 mouseUp 22964085 nil]
	Receiver's instance variables: 
		bounds: 	123@268 corner: 260@286
		owner: 	a MenuMorph(568066048)
		submorphs: 	#()
		fullBounds: 	123@268 corner: 260@286
		color: 	Color black
		extension: 	a MorphExtension (585367552)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[171@279 mouseUp 22964085 nil]
		aMorph: 	a ToggleMenuItemMorph(575143936)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[171@279 mouseUp 22964085 nil]
		aMorph: 	a ToggleMenuItemMorph(575143936)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(575143936)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[171@279 mouseUp 22964085 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	123@268 corner: 260@286
		owner: 	a MenuMorph(568066048)
		submorphs: 	#()
		fullBounds: 	123@268 corner: 260@286
		color: 	Color black
		extension: 	a MorphExtension (585367552)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[171@279 mouseUp 22964085 nil]
		aMorph: 	a MenuMorph(568066048)
		localEvt: 	[171@279 mouseUp 22964085 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(575143936)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(575143936)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[171@279 mouseUp 22964085 nil]
		aMorph: 	a MenuMorph(568066048)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(568066048)
	Arguments and temporary variables: 
		anEvent: 	[171@279 mouseUp 22964085 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	118@263 corner: 265@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(575143936)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	118@263 corner: 265@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (583008256) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(575143936)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(575143936)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(568066048)
	Arguments and temporary variables: 
		anEvent: 	[171@279 mouseUp 22964085 nil]
	Receiver's instance variables: 
		bounds: 	118@263 corner: 265@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(575143936)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	118@263 corner: 265@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (583008256) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(575143936)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(575143936)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(568066048)
	Arguments and temporary variables: 
		evt: 	[171@279 mouseUp 22964085 nil]
	Receiver's instance variables: 
		bounds: 	118@263 corner: 265@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(575143936)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	118@263 corner: 265@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (583008256) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(575143936)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(575143936)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[171@279 mouseUp 22964085 nil]
		focusHolder: 	a MenuMorph(568066048)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	171@279 corner: 187@295
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	171@279 corner: 187@295
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(152305664)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[171@279 mouseUp 22964085 nil]
		targetOffset: 	48@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 22964085 171 279 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(861405184) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>error:
SmallInteger(Object)>>errorNotIndexable
SmallInteger(Object)>>size
ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
ByteString(SequenceableCollection)>>,
Solo(Artist)>>asString
ThreadSafeTranscript>>print:
ThreadSafeTranscript>>show:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Instances of SmallInteger are not indexable
30 December 2011 7:51:04 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

SmallInteger(Object)>>error:
	Receiver: 1985
	Arguments and temporary variables: 
		aString: 	'Instances of SmallInteger are not indexable'
	Receiver's instance variables: 
1985

SmallInteger(Object)>>errorNotIndexable
	Receiver: 1985
	Arguments and temporary variables: 

	Receiver's instance variables: 
1985

SmallInteger(Object)>>size
	Receiver: 1985
	Arguments and temporary variables: 

	Receiver's instance variables: 
1985

ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
	Receiver: 'Clement Peerens active since '
	Arguments and temporary variables: 
		start: 	30
		stop: 	29
		replacementCollection: 	1985
		newSequenceableCollection: 	nil
		newSize: 	nil
		endReplacement: 	nil
	Receiver's instance variables: 
'Clement Peerens active since '

ByteString(SequenceableCollection)>>,
	Receiver: 'Clement Peerens active since '
	Arguments and temporary variables: 
		otherCollection: 	1985
	Receiver's instance variables: 
'Clement Peerens active since '

Solo(Artist)>>asString
	Receiver: a Solo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeSince: 	1985
		awardsWon: 	a LinkedList()
		artistName: 	'Clement Peerens'


ThreadSafeTranscript>>print:
	Receiver: Transcript
	Arguments and temporary variables: 
		anObject: 	a Solo
	Receiver's instance variables: 
		stream: 	a WriteStream ''
		accessSemaphore: 	a Mutex


ThreadSafeTranscript>>show:
	Receiver: Transcript
	Arguments and temporary variables: 
		anObject: 	a Solo
	Receiver's instance variables: 
		stream: 	a WriteStream ''
		accessSemaphore: 	a Mutex


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	nil
		cpex: 	nil
		hetfield: 	nil
		ulrich: 	nil
		hammett: 	nil
		trujillo: 	nil
		metallica: 	nil
		awardBestBand: 	nil
		awardBestNewcomerBand: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(190840832)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 950)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 950)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 747@338
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 747@338
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 23047397) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 950)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 950)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(243007488)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[169@282 mouseUp 23047829 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	135@268 corner: 272@286
		owner: 	a MenuMorph(235929600)
		submorphs: 	#()
		fullBounds: 	135@268 corner: 272@286
		color: 	Color black
		extension: 	a MorphExtension (253231104)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(243007488)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[169@282 mouseUp 23047829 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	135@268 corner: 272@286
		owner: 	a MenuMorph(235929600)
		submorphs: 	#()
		fullBounds: 	135@268 corner: 272@286
		color: 	Color black
		extension: 	a MorphExtension (253231104)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(243007488)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[169@282 mouseUp 23047829 nil]
	Receiver's instance variables: 
		bounds: 	135@268 corner: 272@286
		owner: 	a MenuMorph(235929600)
		submorphs: 	#()
		fullBounds: 	135@268 corner: 272@286
		color: 	Color black
		extension: 	a MorphExtension (253231104)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(243007488)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[169@282 mouseUp 23047829 nil]
	Receiver's instance variables: 
		bounds: 	135@268 corner: 272@286
		owner: 	a MenuMorph(235929600)
		submorphs: 	#()
		fullBounds: 	135@268 corner: 272@286
		color: 	Color black
		extension: 	a MorphExtension (253231104)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [169@282 mouseUp 23047829 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(243007488)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	23047829
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	169@282
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(243007488)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[169@282 mouseUp 23047829 nil]
	Receiver's instance variables: 
		bounds: 	135@268 corner: 272@286
		owner: 	a MenuMorph(235929600)
		submorphs: 	#()
		fullBounds: 	135@268 corner: 272@286
		color: 	Color black
		extension: 	a MorphExtension (253231104)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[169@282 mouseUp 23047829 nil]
		aMorph: 	a ToggleMenuItemMorph(243007488)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[169@282 mouseUp 23047829 nil]
		aMorph: 	a ToggleMenuItemMorph(243007488)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(243007488)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[169@282 mouseUp 23047829 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	135@268 corner: 272@286
		owner: 	a MenuMorph(235929600)
		submorphs: 	#()
		fullBounds: 	135@268 corner: 272@286
		color: 	Color black
		extension: 	a MorphExtension (253231104)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[169@282 mouseUp 23047829 nil]
		aMorph: 	a MenuMorph(235929600)
		localEvt: 	[169@282 mouseUp 23047829 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(243007488)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(243007488)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[169@282 mouseUp 23047829 nil]
		aMorph: 	a MenuMorph(235929600)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(235929600)
	Arguments and temporary variables: 
		anEvent: 	[169@282 mouseUp 23047829 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	130@263 corner: 277@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(243007488)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	130@263 corner: 277@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (250871808) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(243007488)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(243007488)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(235929600)
	Arguments and temporary variables: 
		anEvent: 	[169@282 mouseUp 23047829 nil]
	Receiver's instance variables: 
		bounds: 	130@263 corner: 277@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(243007488)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	130@263 corner: 277@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (250871808) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(243007488)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(243007488)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(235929600)
	Arguments and temporary variables: 
		evt: 	[169@282 mouseUp 23047829 nil]
	Receiver's instance variables: 
		bounds: 	130@263 corner: 277@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(243007488)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	130@263 corner: 277@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (250871808) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(243007488)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(243007488)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[169@282 mouseUp 23047829 nil]
		focusHolder: 	a MenuMorph(235929600)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	169@282 corner: 185@298
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	169@282 corner: 185@298
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(281804800)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[169@282 mouseUp 23047829 nil]
		targetOffset: 	34@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 23047829 169 282 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1045954560) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>error:
SmallInteger(Object)>>errorNotIndexable
SmallInteger(Object)>>size
ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
ByteString(SequenceableCollection)>>,
Solo(Artist)>>asString
ThreadSafeTranscript>>print:
ThreadSafeTranscript>>show:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Instances of Solo are not indexable
30 December 2011 7:52:48 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

Solo(Object)>>error:
	Receiver: a Solo
	Arguments and temporary variables: 
		aString: 	'Instances of Solo are not indexable'
	Receiver's instance variables: 
		activeSince: 	1985
		awardsWon: 	a LinkedList()
		artistName: 	'Clement Peerens'


Solo(Object)>>errorNotIndexable
	Receiver: a Solo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeSince: 	1985
		awardsWon: 	a LinkedList()
		artistName: 	'Clement Peerens'


Solo(Object)>>size
	Receiver: a Solo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeSince: 	1985
		awardsWon: 	a LinkedList()
		artistName: 	'Clement Peerens'


ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
	Receiver: 'Created artist '
	Arguments and temporary variables: 
		start: 	16
		stop: 	15
		replacementCollection: 	a Solo
		newSequenceableCollection: 	nil
		newSize: 	nil
		endReplacement: 	nil
	Receiver's instance variables: 
'Created artist '

ByteString(SequenceableCollection)>>,
	Receiver: 'Created artist '
	Arguments and temporary variables: 
		otherCollection: 	a Solo
	Receiver's instance variables: 
'Created artist '

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	nil
		cpex: 	nil
		hetfield: 	nil
		ulrich: 	nil
		hammett: 	nil
		trujillo: 	nil
		metallica: 	nil
		awardBestBand: 	nil
		awardBestNewcomerBand: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(1002700800)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1014)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1014)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 747@354
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 747@354
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 23152153) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1014)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1014)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(911736832)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[193@278 mouseUp 23152510 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	159@268 corner: 296@286
		owner: 	a MenuMorph(904658944)
		submorphs: 	#()
		fullBounds: 	159@268 corner: 296@286
		color: 	Color black
		extension: 	a MorphExtension (921960448)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(911736832)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[193@278 mouseUp 23152510 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	159@268 corner: 296@286
		owner: 	a MenuMorph(904658944)
		submorphs: 	#()
		fullBounds: 	159@268 corner: 296@286
		color: 	Color black
		extension: 	a MorphExtension (921960448)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(911736832)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[193@278 mouseUp 23152510 nil]
	Receiver's instance variables: 
		bounds: 	159@268 corner: 296@286
		owner: 	a MenuMorph(904658944)
		submorphs: 	#()
		fullBounds: 	159@268 corner: 296@286
		color: 	Color black
		extension: 	a MorphExtension (921960448)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(911736832)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[193@278 mouseUp 23152510 nil]
	Receiver's instance variables: 
		bounds: 	159@268 corner: 296@286
		owner: 	a MenuMorph(904658944)
		submorphs: 	#()
		fullBounds: 	159@268 corner: 296@286
		color: 	Color black
		extension: 	a MorphExtension (921960448)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [193@278 mouseUp 23152510 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(911736832)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	23152510
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	193@278
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(911736832)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[193@278 mouseUp 23152510 nil]
	Receiver's instance variables: 
		bounds: 	159@268 corner: 296@286
		owner: 	a MenuMorph(904658944)
		submorphs: 	#()
		fullBounds: 	159@268 corner: 296@286
		color: 	Color black
		extension: 	a MorphExtension (921960448)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[193@278 mouseUp 23152510 nil]
		aMorph: 	a ToggleMenuItemMorph(911736832)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[193@278 mouseUp 23152510 nil]
		aMorph: 	a ToggleMenuItemMorph(911736832)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(911736832)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[193@278 mouseUp 23152510 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	159@268 corner: 296@286
		owner: 	a MenuMorph(904658944)
		submorphs: 	#()
		fullBounds: 	159@268 corner: 296@286
		color: 	Color black
		extension: 	a MorphExtension (921960448)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[193@278 mouseUp 23152510 nil]
		aMorph: 	a MenuMorph(904658944)
		localEvt: 	[193@278 mouseUp 23152510 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(911736832)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(911736832)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[193@278 mouseUp 23152510 nil]
		aMorph: 	a MenuMorph(904658944)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(904658944)
	Arguments and temporary variables: 
		anEvent: 	[193@278 mouseUp 23152510 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	154@263 corner: 301@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(911736832)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	154@263 corner: 301@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (919601152) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(911736832)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(911736832)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(904658944)
	Arguments and temporary variables: 
		anEvent: 	[193@278 mouseUp 23152510 nil]
	Receiver's instance variables: 
		bounds: 	154@263 corner: 301@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(911736832)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	154@263 corner: 301@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (919601152) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(911736832)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(911736832)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(904658944)
	Arguments and temporary variables: 
		evt: 	[193@278 mouseUp 23152510 nil]
	Receiver's instance variables: 
		bounds: 	154@263 corner: 301@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(911736832)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	154@263 corner: 301@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (919601152) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(911736832)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(911736832)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[193@278 mouseUp 23152510 nil]
		focusHolder: 	a MenuMorph(904658944)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	193@278 corner: 209@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	193@278 corner: 209@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(97255424)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[193@278 mouseUp 23152510 nil]
		targetOffset: 	34@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 23152510 193 278 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(795869184) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[193@278 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(795869184) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[193@278 mouseUp 23152510 nil]
		focusHolder: 	a MenuMorph(904658944)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	193@278 corner: 209@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	193@278 corner: 209@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(97255424)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[193@278 mouseUp 23152510 nil]
		targetOffset: 	34@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 23152510 193 278 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[193@278 mouseUp 23152510 nil]
		focusHolder: 	a MenuMorph(904658944)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	193@278 corner: 209@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	193@278 corner: 209@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(97255424)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[193@278 mouseUp 23152510 nil]
		targetOffset: 	34@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 23152510 193 278 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil



--- The full stack ---
Solo(Object)>>error:
Solo(Object)>>errorNotIndexable
Solo(Object)>>size
ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
ByteString(SequenceableCollection)>>,
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Instances of Solo are not indexable
30 December 2011 7:53:13 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

Solo(Object)>>error:
	Receiver: a Solo
	Arguments and temporary variables: 
		aString: 	'Instances of Solo are not indexable'
	Receiver's instance variables: 
		activeSince: 	1985
		awardsWon: 	a LinkedList()
		artistName: 	'Clement Peerens'


Solo(Object)>>errorNotIndexable
	Receiver: a Solo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeSince: 	1985
		awardsWon: 	a LinkedList()
		artistName: 	'Clement Peerens'


Solo(Object)>>size
	Receiver: a Solo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeSince: 	1985
		awardsWon: 	a LinkedList()
		artistName: 	'Clement Peerens'


ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
	Receiver: 'Created artist '
	Arguments and temporary variables: 
		start: 	16
		stop: 	15
		replacementCollection: 	a Solo
		newSequenceableCollection: 	nil
		newSize: 	nil
		endReplacement: 	nil
	Receiver's instance variables: 
'Created artist '

ByteString(SequenceableCollection)>>,
	Receiver: 'Created artist '
	Arguments and temporary variables: 
		otherCollection: 	a Solo
	Receiver's instance variables: 
'Created artist '

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	nil
		cpex: 	nil
		hetfield: 	nil
		ulrich: 	nil
		hammett: 	nil
		trujillo: 	nil
		metallica: 	nil
		awardBestBand: 	nil
		awardBestNewcomerBand: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(839647232)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1018)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1018)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 747@354
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 747@354
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 23177371) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1018)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1018)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(573571072)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[165@278 mouseUp 23177509 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	145@268 corner: 282@286
		owner: 	a MenuMorph(566493184)
		submorphs: 	#()
		fullBounds: 	145@268 corner: 282@286
		color: 	Color black
		extension: 	a MorphExtension (583794688)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(573571072)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[165@278 mouseUp 23177509 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	145@268 corner: 282@286
		owner: 	a MenuMorph(566493184)
		submorphs: 	#()
		fullBounds: 	145@268 corner: 282@286
		color: 	Color black
		extension: 	a MorphExtension (583794688)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(573571072)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[165@278 mouseUp 23177509 nil]
	Receiver's instance variables: 
		bounds: 	145@268 corner: 282@286
		owner: 	a MenuMorph(566493184)
		submorphs: 	#()
		fullBounds: 	145@268 corner: 282@286
		color: 	Color black
		extension: 	a MorphExtension (583794688)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(573571072)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[165@278 mouseUp 23177509 nil]
	Receiver's instance variables: 
		bounds: 	145@268 corner: 282@286
		owner: 	a MenuMorph(566493184)
		submorphs: 	#()
		fullBounds: 	145@268 corner: 282@286
		color: 	Color black
		extension: 	a MorphExtension (583794688)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [165@278 mouseUp 23177509 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(573571072)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	23177509
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	165@278
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(573571072)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[165@278 mouseUp 23177509 nil]
	Receiver's instance variables: 
		bounds: 	145@268 corner: 282@286
		owner: 	a MenuMorph(566493184)
		submorphs: 	#()
		fullBounds: 	145@268 corner: 282@286
		color: 	Color black
		extension: 	a MorphExtension (583794688)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[165@278 mouseUp 23177509 nil]
		aMorph: 	a ToggleMenuItemMorph(573571072)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[165@278 mouseUp 23177509 nil]
		aMorph: 	a ToggleMenuItemMorph(573571072)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(573571072)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[165@278 mouseUp 23177509 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	145@268 corner: 282@286
		owner: 	a MenuMorph(566493184)
		submorphs: 	#()
		fullBounds: 	145@268 corner: 282@286
		color: 	Color black
		extension: 	a MorphExtension (583794688)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[165@278 mouseUp 23177509 nil]
		aMorph: 	a MenuMorph(566493184)
		localEvt: 	[165@278 mouseUp 23177509 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(573571072)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(573571072)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[165@278 mouseUp 23177509 nil]
		aMorph: 	a MenuMorph(566493184)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(566493184)
	Arguments and temporary variables: 
		anEvent: 	[165@278 mouseUp 23177509 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	140@263 corner: 287@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(573571072)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	140@263 corner: 287@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (581435392) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(573571072)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(573571072)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(566493184)
	Arguments and temporary variables: 
		anEvent: 	[165@278 mouseUp 23177509 nil]
	Receiver's instance variables: 
		bounds: 	140@263 corner: 287@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(573571072)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	140@263 corner: 287@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (581435392) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(573571072)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(573571072)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(566493184)
	Arguments and temporary variables: 
		evt: 	[165@278 mouseUp 23177509 nil]
	Receiver's instance variables: 
		bounds: 	140@263 corner: 287@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(573571072)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	140@263 corner: 287@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (581435392) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(573571072)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(573571072)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[165@278 mouseUp 23177509 nil]
		focusHolder: 	a MenuMorph(566493184)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	165@278 corner: 181@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	165@278 corner: 181@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(245628928)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[165@278 mouseUp 23177509 nil]
		targetOffset: 	20@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 23177509 165 278 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(603455488) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[165@278 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(603455488) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[165@278 mouseUp 23177509 nil]
		focusHolder: 	a MenuMorph(566493184)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	165@278 corner: 181@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	165@278 corner: 181@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(245628928)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[165@278 mouseUp 23177509 nil]
		targetOffset: 	20@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 23177509 165 278 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[165@278 mouseUp 23177509 nil]
		focusHolder: 	a MenuMorph(566493184)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	165@278 corner: 181@294
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	165@278 corner: 181@294
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(245628928)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[165@278 mouseUp 23177509 nil]
		targetOffset: 	20@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 23177509 165 278 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil



--- The full stack ---
Solo(Object)>>error:
Solo(Object)>>errorNotIndexable
Solo(Object)>>size
ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
ByteString(SequenceableCollection)>>,
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ThreadSafeTranscript>>new
30 December 2011 8:01:45 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

ThreadSafeTranscript(Object)>>doesNotUnderstand: #new
	Receiver: Transcript
	Arguments and temporary variables: 
		aMessage: 	new
		exception: 	MessageNotUnderstood: ThreadSafeTranscript>>new
		resumeValue: 	nil
	Receiver's instance variables: 
		stream: 	a WriteStream '
'
		accessSemaphore: 	a Mutex


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ Transcript new
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(620232704)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(120 to: 119)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(120 to: 119)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 734@562
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 734@562
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 23688303) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(120 to: 119)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(120 to: 119)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(56885248)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[186@268 mouseUp 23689325 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	176@261 corner: 313@279
		owner: 	a MenuMorph(49807360)
		submorphs: 	#()
		fullBounds: 	176@261 corner: 313@279
		color: 	Color black
		extension: 	a MorphExtension (67108864)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(56885248)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[186@268 mouseUp 23689325 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	176@261 corner: 313@279
		owner: 	a MenuMorph(49807360)
		submorphs: 	#()
		fullBounds: 	176@261 corner: 313@279
		color: 	Color black
		extension: 	a MorphExtension (67108864)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(56885248)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[186@268 mouseUp 23689325 nil]
	Receiver's instance variables: 
		bounds: 	176@261 corner: 313@279
		owner: 	a MenuMorph(49807360)
		submorphs: 	#()
		fullBounds: 	176@261 corner: 313@279
		color: 	Color black
		extension: 	a MorphExtension (67108864)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(56885248)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[186@268 mouseUp 23689325 nil]
	Receiver's instance variables: 
		bounds: 	176@261 corner: 313@279
		owner: 	a MenuMorph(49807360)
		submorphs: 	#()
		fullBounds: 	176@261 corner: 313@279
		color: 	Color black
		extension: 	a MorphExtension (67108864)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [186@268 mouseUp 23689325 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(56885248)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	23689325
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	186@268
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(56885248)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[186@268 mouseUp 23689325 nil]
	Receiver's instance variables: 
		bounds: 	176@261 corner: 313@279
		owner: 	a MenuMorph(49807360)
		submorphs: 	#()
		fullBounds: 	176@261 corner: 313@279
		color: 	Color black
		extension: 	a MorphExtension (67108864)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[186@268 mouseUp 23689325 nil]
		aMorph: 	a ToggleMenuItemMorph(56885248)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[186@268 mouseUp 23689325 nil]
		aMorph: 	a ToggleMenuItemMorph(56885248)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(56885248)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[186@268 mouseUp 23689325 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	176@261 corner: 313@279
		owner: 	a MenuMorph(49807360)
		submorphs: 	#()
		fullBounds: 	176@261 corner: 313@279
		color: 	Color black
		extension: 	a MorphExtension (67108864)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[186@268 mouseUp 23689325 nil]
		aMorph: 	a MenuMorph(49807360)
		localEvt: 	[186@268 mouseUp 23689325 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(56885248)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(56885248)'Do it (d)' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[186@268 mouseUp 23689325 nil]
		aMorph: 	a MenuMorph(49807360)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(49807360)
	Arguments and temporary variables: 
		anEvent: 	[186@268 mouseUp 23689325 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	171@256 corner: 318@603
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(56885248)'Do it (d)' a ToggleMenuItem...etc...
		fullBounds: 	171@256 corner: 318@603
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (64749568) [other:  (basicColor -> (Color r: 0.745 ...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(56885248)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(56885248)'Do it (d)' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(49807360)
	Arguments and temporary variables: 
		anEvent: 	[186@268 mouseUp 23689325 nil]
	Receiver's instance variables: 
		bounds: 	171@256 corner: 318@603
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(56885248)'Do it (d)' a ToggleMenuItem...etc...
		fullBounds: 	171@256 corner: 318@603
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (64749568) [other:  (basicColor -> (Color r: 0.745 ...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(56885248)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(56885248)'Do it (d)' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(49807360)
	Arguments and temporary variables: 
		evt: 	[186@268 mouseUp 23689325 nil]
	Receiver's instance variables: 
		bounds: 	171@256 corner: 318@603
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(56885248)'Do it (d)' a ToggleMenuItem...etc...
		fullBounds: 	171@256 corner: 318@603
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (64749568) [other:  (basicColor -> (Color r: 0.745 ...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(56885248)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(56885248)'Do it (d)' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[186@268 mouseUp 23689325 nil]
		focusHolder: 	a MenuMorph(49807360)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	186@268 corner: 202@284
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	186@268 corner: 202@284
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(800849920)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[186@268 mouseUp 23689325 nil]
		targetOffset: 	9@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 23689325 186 268 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(433061888) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[186@268 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(433061888) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[186@268 mouseUp 23689325 nil]
		focusHolder: 	a MenuMorph(49807360)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	186@268 corner: 202@284
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	186@268 corner: 202@284
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(800849920)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[186@268 mouseUp 23689325 nil]
		targetOffset: 	9@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 23689325 186 268 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[186@268 mouseUp 23689325 nil]
		focusHolder: 	a MenuMorph(49807360)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	186@268 corner: 202@284
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	186@268 corner: 202@284
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(800849920)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[186@268 mouseUp 23689325 nil]
		targetOffset: 	9@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 23689325 186 268 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[186@268 mouseUp 23689325 nil]
	Receiver's instance variables: 
		bounds: 	186@268 corner: 202@284
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	186@268 corner: 202@284
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(800849920)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[186@268 mouseUp 23689325 nil]
		targetOffset: 	9@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 23689325 186 268 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[186@268 mouseUp 23689325 nil]
		evt: 	[186@268 mouseUp 23689325 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	186@268 corner: 202@284
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	186@268 corner: 202@284
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(800849920)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[186@268 mouseUp 23689325 nil]
		targetOffset: 	9@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 23689325 186 268 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[186@268 mouseUp 23689325 nil]
		evtBuf: 	#(1 23689325 186 268 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	186@268 corner: 202@284
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	186@268 corner: 202@284
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(800849920)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[186@268 mouseUp 23689325 nil]
		targetOffset: 	9@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 23689325 186 268 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(433061888))(a PreDebu...etc...
		lastStepTime: 	23689324
		lastStepMessage: 	nil
		lastCycleTime: 	23689373
		alarms: 	a Heap()
		lastAlarmTime: 	23689324
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
ThreadSafeTranscript(Object)>>doesNotUnderstand: #new
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ThreadSafeTranscript>>new
30 December 2011 8:01:50 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

ThreadSafeTranscript(Object)>>doesNotUnderstand: #new
	Receiver: Transcript
	Arguments and temporary variables: 
		aMessage: 	new
		exception: 	MessageNotUnderstood: ThreadSafeTranscript>>new
		resumeValue: 	nil
	Receiver's instance variables: 
		stream: 	a WriteStream '
'
		accessSemaphore: 	a Mutex


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	nil
		sylvain: 	nil
		cpex: 	nil
		hetfield: 	nil
		ulrich: 	nil
		hammett: 	nil
		trujillo: 	nil
		metallica: 	nil
		awardBestBand: 	nil
		awardBestNewcomerBand: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(1063780352)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 2320)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 2320)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 734@562
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 734@562
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 23693313) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 2320)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 2320)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(597688320)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[211@277 mouseUp 23693661 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	184@268 corner: 321@286
		owner: 	a MenuMorph(590610432)
		submorphs: 	#()
		fullBounds: 	184@268 corner: 321@286
		color: 	Color black
		extension: 	a MorphExtension (607911936)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(597688320)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[211@277 mouseUp 23693661 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	184@268 corner: 321@286
		owner: 	a MenuMorph(590610432)
		submorphs: 	#()
		fullBounds: 	184@268 corner: 321@286
		color: 	Color black
		extension: 	a MorphExtension (607911936)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(597688320)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[211@277 mouseUp 23693661 nil]
	Receiver's instance variables: 
		bounds: 	184@268 corner: 321@286
		owner: 	a MenuMorph(590610432)
		submorphs: 	#()
		fullBounds: 	184@268 corner: 321@286
		color: 	Color black
		extension: 	a MorphExtension (607911936)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(597688320)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[211@277 mouseUp 23693661 nil]
	Receiver's instance variables: 
		bounds: 	184@268 corner: 321@286
		owner: 	a MenuMorph(590610432)
		submorphs: 	#()
		fullBounds: 	184@268 corner: 321@286
		color: 	Color black
		extension: 	a MorphExtension (607911936)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [211@277 mouseUp 23693661 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(597688320)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	23693661
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	211@277
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(597688320)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[211@277 mouseUp 23693661 nil]
	Receiver's instance variables: 
		bounds: 	184@268 corner: 321@286
		owner: 	a MenuMorph(590610432)
		submorphs: 	#()
		fullBounds: 	184@268 corner: 321@286
		color: 	Color black
		extension: 	a MorphExtension (607911936)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[211@277 mouseUp 23693661 nil]
		aMorph: 	a ToggleMenuItemMorph(597688320)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[211@277 mouseUp 23693661 nil]
		aMorph: 	a ToggleMenuItemMorph(597688320)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(597688320)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[211@277 mouseUp 23693661 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	184@268 corner: 321@286
		owner: 	a MenuMorph(590610432)
		submorphs: 	#()
		fullBounds: 	184@268 corner: 321@286
		color: 	Color black
		extension: 	a MorphExtension (607911936)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[211@277 mouseUp 23693661 nil]
		aMorph: 	a MenuMorph(590610432)
		localEvt: 	[211@277 mouseUp 23693661 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(597688320)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(597688320)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[211@277 mouseUp 23693661 nil]
		aMorph: 	a MenuMorph(590610432)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(590610432)
	Arguments and temporary variables: 
		anEvent: 	[211@277 mouseUp 23693661 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	179@263 corner: 326@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(597688320)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	179@263 corner: 326@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (605552640) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(597688320)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(597688320)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(590610432)
	Arguments and temporary variables: 
		anEvent: 	[211@277 mouseUp 23693661 nil]
	Receiver's instance variables: 
		bounds: 	179@263 corner: 326@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(597688320)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	179@263 corner: 326@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (605552640) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(597688320)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(597688320)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(590610432)
	Arguments and temporary variables: 
		evt: 	[211@277 mouseUp 23693661 nil]
	Receiver's instance variables: 
		bounds: 	179@263 corner: 326@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(597688320)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	179@263 corner: 326@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (605552640) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(597688320)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(597688320)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[211@277 mouseUp 23693661 nil]
		focusHolder: 	a MenuMorph(590610432)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	211@277 corner: 227@293
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	211@277 corner: 227@293
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(370933760)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[211@277 mouseUp 23693661 nil]
		targetOffset: 	27@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 23693661 211 277 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(58195968) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[211@277 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(58195968) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[211@277 mouseUp 23693661 nil]
		focusHolder: 	a MenuMorph(590610432)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	211@277 corner: 227@293
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	211@277 corner: 227@293
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(370933760)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[211@277 mouseUp 23693661 nil]
		targetOffset: 	27@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 23693661 211 277 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[211@277 mouseUp 23693661 nil]
		focusHolder: 	a MenuMorph(590610432)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	211@277 corner: 227@293
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	211@277 corner: 227@293
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(370933760)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[211@277 mouseUp 23693661 nil]
		targetOffset: 	27@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 23693661 211 277 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[211@277 mouseUp 23693661 nil]
	Receiver's instance variables: 
		bounds: 	211@277 corner: 227@293
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	211@277 corner: 227@293
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(370933760)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[211@277 mouseUp 23693661 nil]
		targetOffset: 	27@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 23693661 211 277 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[211@277 mouseUp 23693661 nil]
		evt: 	[211@277 mouseUp 23693661 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	211@277 corner: 227@293
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	211@277 corner: 227@293
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(370933760)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[211@277 mouseUp 23693661 nil]
		targetOffset: 	27@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 23693661 211 277 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[211@277 mouseUp 23693661 nil]
		evtBuf: 	#(1 23693661 211 277 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	211@277 corner: 227@293
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	211@277 corner: 227@293
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(370933760)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[211@277 mouseUp 23693661 nil]
		targetOffset: 	27@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 23693661 211 277 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(58195968))(a PreDebug...etc...
		lastStepTime: 	23693667
		lastStepMessage: 	nil
		lastCycleTime: 	23693717
		alarms: 	a Heap()
		lastAlarmTime: 	23693667
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
ThreadSafeTranscript(Object)>>doesNotUnderstand: #new
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ThreadSafeTranscript>>new
30 December 2011 8:08:15 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

ThreadSafeTranscript(Object)>>doesNotUnderstand: #new
	Receiver: Transcript
	Arguments and temporary variables: 
		aMessage: 	new
		exception: 	MessageNotUnderstood: ThreadSafeTranscript>>new
		resumeValue: 	nil
	Receiver's instance variables: 
		stream: 	a WriteStream '
'
		accessSemaphore: 	a Mutex


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	nil
		sylvain: 	nil
		cpex: 	nil
		hetfield: 	nil
		ulrich: 	nil
		hammett: 	nil
		trujillo: 	nil
		metallica: 	nil
		awardBestBand: 	nil
		awardBestNewcomerBand: 	nil
		ceremony: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(359399424)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 2452)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 2452)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 734@594
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 734@594
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 24078341) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 2452)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 2452)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(992477184)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[374@280 mouseUp 24078837 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	328@268 corner: 465@286
		owner: 	a MenuMorph(985399296)
		submorphs: 	#()
		fullBounds: 	328@268 corner: 465@286
		color: 	Color black
		extension: 	a MorphExtension (1002700800)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(992477184)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[374@280 mouseUp 24078837 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	328@268 corner: 465@286
		owner: 	a MenuMorph(985399296)
		submorphs: 	#()
		fullBounds: 	328@268 corner: 465@286
		color: 	Color black
		extension: 	a MorphExtension (1002700800)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(992477184)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[374@280 mouseUp 24078837 nil]
	Receiver's instance variables: 
		bounds: 	328@268 corner: 465@286
		owner: 	a MenuMorph(985399296)
		submorphs: 	#()
		fullBounds: 	328@268 corner: 465@286
		color: 	Color black
		extension: 	a MorphExtension (1002700800)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(992477184)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[374@280 mouseUp 24078837 nil]
	Receiver's instance variables: 
		bounds: 	328@268 corner: 465@286
		owner: 	a MenuMorph(985399296)
		submorphs: 	#()
		fullBounds: 	328@268 corner: 465@286
		color: 	Color black
		extension: 	a MorphExtension (1002700800)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [374@280 mouseUp 24078837 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(992477184)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	24078837
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	374@280
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(992477184)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[374@280 mouseUp 24078837 nil]
	Receiver's instance variables: 
		bounds: 	328@268 corner: 465@286
		owner: 	a MenuMorph(985399296)
		submorphs: 	#()
		fullBounds: 	328@268 corner: 465@286
		color: 	Color black
		extension: 	a MorphExtension (1002700800)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[374@280 mouseUp 24078837 nil]
		aMorph: 	a ToggleMenuItemMorph(992477184)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[374@280 mouseUp 24078837 nil]
		aMorph: 	a ToggleMenuItemMorph(992477184)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(992477184)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[374@280 mouseUp 24078837 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	328@268 corner: 465@286
		owner: 	a MenuMorph(985399296)
		submorphs: 	#()
		fullBounds: 	328@268 corner: 465@286
		color: 	Color black
		extension: 	a MorphExtension (1002700800)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[374@280 mouseUp 24078837 nil]
		aMorph: 	a MenuMorph(985399296)
		localEvt: 	[374@280 mouseUp 24078837 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(992477184)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(992477184)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[374@280 mouseUp 24078837 nil]
		aMorph: 	a MenuMorph(985399296)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(985399296)
	Arguments and temporary variables: 
		anEvent: 	[374@280 mouseUp 24078837 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	323@263 corner: 470@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(992477184)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	323@263 corner: 470@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (1000341504) [other:  (basicColor -> (Color r: 0.74...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(992477184)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(992477184)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(985399296)
	Arguments and temporary variables: 
		anEvent: 	[374@280 mouseUp 24078837 nil]
	Receiver's instance variables: 
		bounds: 	323@263 corner: 470@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(992477184)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	323@263 corner: 470@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (1000341504) [other:  (basicColor -> (Color r: 0.74...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(992477184)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(992477184)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(985399296)
	Arguments and temporary variables: 
		evt: 	[374@280 mouseUp 24078837 nil]
	Receiver's instance variables: 
		bounds: 	323@263 corner: 470@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(992477184)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	323@263 corner: 470@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (1000341504) [other:  (basicColor -> (Color r: 0.74...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(992477184)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(992477184)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[374@280 mouseUp 24078837 nil]
		focusHolder: 	a MenuMorph(985399296)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	374@280 corner: 390@296
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	374@280 corner: 390@296
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(806617088)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[374@280 mouseUp 24078837 nil]
		targetOffset: 	45@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 24078837 374 280 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(493879296) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[374@280 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(493879296) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[374@280 mouseUp 24078837 nil]
		focusHolder: 	a MenuMorph(985399296)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	374@280 corner: 390@296
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	374@280 corner: 390@296
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(806617088)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[374@280 mouseUp 24078837 nil]
		targetOffset: 	45@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 24078837 374 280 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[374@280 mouseUp 24078837 nil]
		focusHolder: 	a MenuMorph(985399296)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	374@280 corner: 390@296
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	374@280 corner: 390@296
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(806617088)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[374@280 mouseUp 24078837 nil]
		targetOffset: 	45@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 24078837 374 280 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[374@280 mouseUp 24078837 nil]
	Receiver's instance variables: 
		bounds: 	374@280 corner: 390@296
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	374@280 corner: 390@296
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(806617088)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[374@280 mouseUp 24078837 nil]
		targetOffset: 	45@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 24078837 374 280 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[374@280 mouseUp 24078837 nil]
		evt: 	[374@280 mouseUp 24078837 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	374@280 corner: 390@296
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	374@280 corner: 390@296
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(806617088)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[374@280 mouseUp 24078837 nil]
		targetOffset: 	45@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 24078837 374 280 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[374@280 mouseUp 24078837 nil]
		evtBuf: 	#(1 24078837 374 280 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	374@280 corner: 390@296
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	374@280 corner: 390@296
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(806617088)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[374@280 mouseUp 24078837 nil]
		targetOffset: 	45@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 24078837 374 280 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(493879296))(a PreDebu...etc...
		lastStepTime: 	24078847
		lastStepMessage: 	nil
		lastCycleTime: 	24078891
		alarms: 	a Heap()
		lastAlarmTime: 	24078847
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
ThreadSafeTranscript(Object)>>doesNotUnderstand: #new
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ThreadSafeTranscript>>new
30 December 2011 8:09:20 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

ThreadSafeTranscript(Object)>>doesNotUnderstand: #new
	Receiver: Transcript
	Arguments and temporary variables: 
		aMessage: 	new
		exception: 	MessageNotUnderstood: ThreadSafeTranscript>>new
		resumeValue: 	nil
	Receiver's instance variables: 
		stream: 	a WriteStream '
'
		accessSemaphore: 	a Mutex


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	nil
		sylvain: 	nil
		cpex: 	nil
		hetfield: 	nil
		ulrich: 	nil
		hammett: 	nil
		trujillo: 	nil
		metallica: 	nil
		awardBestBand: 	nil
		awardBestNewcomerBand: 	nil
		ceremony: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(22806528)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 2452)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 2452)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 734@594
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 734@594
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 24143367) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 2452)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	24@233 corner: 779@631
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	24@233 corner: 779@631
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 2452)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(962068480)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[141@276 mouseUp 24143797 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	107@268 corner: 244@286
		owner: 	a MenuMorph(954990592)
		submorphs: 	#()
		fullBounds: 	107@268 corner: 244@286
		color: 	Color black
		extension: 	a MorphExtension (972292096)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(962068480)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[141@276 mouseUp 24143797 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	107@268 corner: 244@286
		owner: 	a MenuMorph(954990592)
		submorphs: 	#()
		fullBounds: 	107@268 corner: 244@286
		color: 	Color black
		extension: 	a MorphExtension (972292096)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(962068480)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[141@276 mouseUp 24143797 nil]
	Receiver's instance variables: 
		bounds: 	107@268 corner: 244@286
		owner: 	a MenuMorph(954990592)
		submorphs: 	#()
		fullBounds: 	107@268 corner: 244@286
		color: 	Color black
		extension: 	a MorphExtension (972292096)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(962068480)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[141@276 mouseUp 24143797 nil]
	Receiver's instance variables: 
		bounds: 	107@268 corner: 244@286
		owner: 	a MenuMorph(954990592)
		submorphs: 	#()
		fullBounds: 	107@268 corner: 244@286
		color: 	Color black
		extension: 	a MorphExtension (972292096)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [141@276 mouseUp 24143797 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(962068480)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	24143797
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	141@276
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(962068480)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[141@276 mouseUp 24143797 nil]
	Receiver's instance variables: 
		bounds: 	107@268 corner: 244@286
		owner: 	a MenuMorph(954990592)
		submorphs: 	#()
		fullBounds: 	107@268 corner: 244@286
		color: 	Color black
		extension: 	a MorphExtension (972292096)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[141@276 mouseUp 24143797 nil]
		aMorph: 	a ToggleMenuItemMorph(962068480)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[141@276 mouseUp 24143797 nil]
		aMorph: 	a ToggleMenuItemMorph(962068480)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(962068480)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[141@276 mouseUp 24143797 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	107@268 corner: 244@286
		owner: 	a MenuMorph(954990592)
		submorphs: 	#()
		fullBounds: 	107@268 corner: 244@286
		color: 	Color black
		extension: 	a MorphExtension (972292096)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[141@276 mouseUp 24143797 nil]
		aMorph: 	a MenuMorph(954990592)
		localEvt: 	[141@276 mouseUp 24143797 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(962068480)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(962068480)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[141@276 mouseUp 24143797 nil]
		aMorph: 	a MenuMorph(954990592)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(954990592)
	Arguments and temporary variables: 
		anEvent: 	[141@276 mouseUp 24143797 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	102@263 corner: 249@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(962068480)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	102@263 corner: 249@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (969932800) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(962068480)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(962068480)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(954990592)
	Arguments and temporary variables: 
		anEvent: 	[141@276 mouseUp 24143797 nil]
	Receiver's instance variables: 
		bounds: 	102@263 corner: 249@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(962068480)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	102@263 corner: 249@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (969932800) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(962068480)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(962068480)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(954990592)
	Arguments and temporary variables: 
		evt: 	[141@276 mouseUp 24143797 nil]
	Receiver's instance variables: 
		bounds: 	102@263 corner: 249@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(962068480)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	102@263 corner: 249@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (969932800) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(962068480)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(962068480)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[141@276 mouseUp 24143797 nil]
		focusHolder: 	a MenuMorph(954990592)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	141@276 corner: 157@292
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	141@276 corner: 157@292
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1004535808)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[141@276 mouseUp 24143797 nil]
		targetOffset: 	34@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 24143797 141 276 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(691798016) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[141@276 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 756@628
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(691798016) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[141@276 mouseUp 24143797 nil]
		focusHolder: 	a MenuMorph(954990592)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	141@276 corner: 157@292
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	141@276 corner: 157@292
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1004535808)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[141@276 mouseUp 24143797 nil]
		targetOffset: 	34@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 24143797 141 276 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[141@276 mouseUp 24143797 nil]
		focusHolder: 	a MenuMorph(954990592)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	141@276 corner: 157@292
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	141@276 corner: 157@292
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1004535808)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[141@276 mouseUp 24143797 nil]
		targetOffset: 	34@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 24143797 141 276 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[141@276 mouseUp 24143797 nil]
	Receiver's instance variables: 
		bounds: 	141@276 corner: 157@292
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	141@276 corner: 157@292
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1004535808)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[141@276 mouseUp 24143797 nil]
		targetOffset: 	34@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 24143797 141 276 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[141@276 mouseUp 24143797 nil]
		evt: 	[141@276 mouseUp 24143797 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	141@276 corner: 157@292
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	141@276 corner: 157@292
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1004535808)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[141@276 mouseUp 24143797 nil]
		targetOffset: 	34@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 24143797 141 276 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[141@276 mouseUp 24143797 nil]
		evtBuf: 	#(1 24143797 141 276 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	141@276 corner: 157@292
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	141@276 corner: 157@292
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1004535808)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[141@276 mouseUp 24143797 nil]
		targetOffset: 	34@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 24143797 141 276 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 756@628
		canvas: 	a FormCanvas on: DisplayScreen(756x628x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(691798016))(a PreDebu...etc...
		lastStepTime: 	24143783
		lastStepMessage: 	nil
		lastCycleTime: 	24143831
		alarms: 	a Heap()
		lastAlarmTime: 	24143783
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
ThreadSafeTranscript(Object)>>doesNotUnderstand: #new
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: This block accepts 0 arguments, but was called with 1 argument.
30 December 2011 8:39:05 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure(Object)>>error:
	Receiver: [nominee
			| (awardBestMaleSinger addNominee: nominee)
		ifTrue: [Transcript show: 'Nomin...etc...
	Arguments and temporary variables: 
		aString: 	'This block accepts 0 arguments, but was called with 1 argument.'
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	704
		numArgs: 	0


BlockClosure>>numArgsError:
	Receiver: [nominee
			| (awardBestMaleSinger addNominee: nominee)
		ifTrue: [Transcript show: 'Nomin...etc...
	Arguments and temporary variables: 
		numArgsForInvocation: 	1
		printNArgs: 	[:n | n printString , ' argument'
		, (n = 1
				ifTrue: ['']
				i...etc...
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	704
		numArgs: 	0


BlockClosure>>value:
	Receiver: [nominee
			| (awardBestMaleSinger addNominee: nominee)
		ifTrue: [Transcript show: 'Nomin...etc...
	Arguments and temporary variables: 
		anArg: 	a Solo
		newContext: 	nil
		ncv: 	nil
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	704
		numArgs: 	0


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		hetfield: 	a Solo
		ulrich: 	a Solo
		hammett: 	a Solo
		trujillo: 	a Solo
		metallica: 	a Band
		awardBestMaleSinger: 	a SoloCategory
		awardBestNewcomerMaleSinger: 	nil
		ceremony: 	a Ceremony
		test: 	[nominee
			| (awardBestMaleSinger addNominee: nominee)
		ifTrue: [Transc...etc...
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(667942912)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	429@186 corner: 1184@584
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	429@186 corner: 1184@584
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3369)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	429@186 corner: 1184@584
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	429@186 corner: 1184@584
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3369)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 734@786
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 734@786
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 25927095) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	429@186 corner: 1184@584
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	429@186 corner: 1184@584
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3369)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	429@186 corner: 1184@584
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	429@186 corner: 1184@584
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3369)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(294912000)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[571@381 mouseUp 25927533 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	548@367 corner: 685@385
		owner: 	a MenuMorph(287834112)
		submorphs: 	#()
		fullBounds: 	548@367 corner: 685@385
		color: 	Color black
		extension: 	a MorphExtension (305135616)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(294912000)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[571@381 mouseUp 25927533 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	548@367 corner: 685@385
		owner: 	a MenuMorph(287834112)
		submorphs: 	#()
		fullBounds: 	548@367 corner: 685@385
		color: 	Color black
		extension: 	a MorphExtension (305135616)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(294912000)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[571@381 mouseUp 25927533 nil]
	Receiver's instance variables: 
		bounds: 	548@367 corner: 685@385
		owner: 	a MenuMorph(287834112)
		submorphs: 	#()
		fullBounds: 	548@367 corner: 685@385
		color: 	Color black
		extension: 	a MorphExtension (305135616)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(294912000)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[571@381 mouseUp 25927533 nil]
	Receiver's instance variables: 
		bounds: 	548@367 corner: 685@385
		owner: 	a MenuMorph(287834112)
		submorphs: 	#()
		fullBounds: 	548@367 corner: 685@385
		color: 	Color black
		extension: 	a MorphExtension (305135616)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [571@381 mouseUp 25927533 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(294912000)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	25927533
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	571@381
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(294912000)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[571@381 mouseUp 25927533 nil]
	Receiver's instance variables: 
		bounds: 	548@367 corner: 685@385
		owner: 	a MenuMorph(287834112)
		submorphs: 	#()
		fullBounds: 	548@367 corner: 685@385
		color: 	Color black
		extension: 	a MorphExtension (305135616)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[571@381 mouseUp 25927533 nil]
		aMorph: 	a ToggleMenuItemMorph(294912000)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[571@381 mouseUp 25927533 nil]
		aMorph: 	a ToggleMenuItemMorph(294912000)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(294912000)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[571@381 mouseUp 25927533 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	548@367 corner: 685@385
		owner: 	a MenuMorph(287834112)
		submorphs: 	#()
		fullBounds: 	548@367 corner: 685@385
		color: 	Color black
		extension: 	a MorphExtension (305135616)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[571@381 mouseUp 25927533 nil]
		aMorph: 	a MenuMorph(287834112)
		localEvt: 	[571@381 mouseUp 25927533 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(294912000)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(294912000)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[571@381 mouseUp 25927533 nil]
		aMorph: 	a MenuMorph(287834112)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(287834112)
	Arguments and temporary variables: 
		anEvent: 	[571@381 mouseUp 25927533 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	543@362 corner: 690@709
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(294912000)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	543@362 corner: 690@709
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (302776320) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(294912000)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(294912000)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(287834112)
	Arguments and temporary variables: 
		anEvent: 	[571@381 mouseUp 25927533 nil]
	Receiver's instance variables: 
		bounds: 	543@362 corner: 690@709
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(294912000)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	543@362 corner: 690@709
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (302776320) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(294912000)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(294912000)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(287834112)
	Arguments and temporary variables: 
		evt: 	[571@381 mouseUp 25927533 nil]
	Receiver's instance variables: 
		bounds: 	543@362 corner: 690@709
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(294912000)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	543@362 corner: 690@709
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (302776320) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(294912000)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(294912000)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[571@381 mouseUp 25927533 nil]
		focusHolder: 	a MenuMorph(287834112)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	344@455 corner: 360@471
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(714604544)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[571@381 344@455 mouseMove 25928013 nil]
		targetOffset: 	23@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 25928013 570 381 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(349700096) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[571@381 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(349700096) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[571@381 mouseUp 25927533 nil]
		focusHolder: 	a MenuMorph(287834112)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	344@455 corner: 360@471
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(714604544)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[571@381 344@455 mouseMove 25928013 nil]
		targetOffset: 	23@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 25928013 570 381 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[571@381 mouseUp 25927533 nil]
		focusHolder: 	a MenuMorph(287834112)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	344@455 corner: 360@471
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(714604544)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[571@381 344@455 mouseMove 25928013 nil]
		targetOffset: 	23@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 25928013 570 381 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[571@381 mouseUp 25927533 nil]
	Receiver's instance variables: 
		bounds: 	344@455 corner: 360@471
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(714604544)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[571@381 344@455 mouseMove 25928013 nil]
		targetOffset: 	23@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 25928013 570 381 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[571@381 mouseUp 25927533 nil]
		evt: 	[571@381 mouseUp 25927533 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	344@455 corner: 360@471
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(714604544)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[571@381 344@455 mouseMove 25928013 nil]
		targetOffset: 	23@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 25928013 570 381 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil



--- The full stack ---
BlockClosure(Object)>>error:
BlockClosure>>numArgsError:
BlockClosure>>value:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NonBooleanReceiver: proceed for truth.
30 December 2011 8:42:52 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

SoloCategory(Object)>>mustBeBooleanIn:
	Receiver: a SoloCategory
	Arguments and temporary variables: 
		context: 	UndefinedObject>>DoIt
		proceedValue: 	nil
	Receiver's instance variables: 
		nominees: 	a LinkedList(a Solo a Solo)
		jury: 	a LinkedList(a Solo)
		awardName: 	'Best male singer'


SoloCategory(Object)>>mustBeBoolean
	Receiver: a SoloCategory
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nominees: 	a LinkedList(a Solo a Solo)
		jury: 	a LinkedList(a Solo)
		awardName: 	'Best male singer'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		hetfield: 	a Solo
		ulrich: 	a Solo
		hammett: 	a Solo
		trujillo: 	a Solo
		metallica: 	a Band
		awardBestMaleSinger: 	a SoloCategory
		awardBestNewcomerMaleSinger: 	nil
		ceremony: 	a Ceremony
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(72351744)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	314@186 corner: 1184@584
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	314@186 corner: 1184@584
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 4212)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	314@186 corner: 1184@584
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	314@186 corner: 1184@584
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 4212)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 849@882
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 849@882
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 26154415) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	314@186 corner: 1184@584
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	314@186 corner: 1184@584
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 4212)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	314@186 corner: 1184@584
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	314@186 corner: 1184@584
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 4212)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(702808064)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[443@380 mouseUp 26154685 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	417@367 corner: 554@385
		owner: 	a MenuMorph(695730176)
		submorphs: 	#()
		fullBounds: 	417@367 corner: 554@385
		color: 	Color black
		extension: 	a MorphExtension (713031680)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(702808064)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[443@380 mouseUp 26154685 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	417@367 corner: 554@385
		owner: 	a MenuMorph(695730176)
		submorphs: 	#()
		fullBounds: 	417@367 corner: 554@385
		color: 	Color black
		extension: 	a MorphExtension (713031680)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(702808064)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[443@380 mouseUp 26154685 nil]
	Receiver's instance variables: 
		bounds: 	417@367 corner: 554@385
		owner: 	a MenuMorph(695730176)
		submorphs: 	#()
		fullBounds: 	417@367 corner: 554@385
		color: 	Color black
		extension: 	a MorphExtension (713031680)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(702808064)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[443@380 mouseUp 26154685 nil]
	Receiver's instance variables: 
		bounds: 	417@367 corner: 554@385
		owner: 	a MenuMorph(695730176)
		submorphs: 	#()
		fullBounds: 	417@367 corner: 554@385
		color: 	Color black
		extension: 	a MorphExtension (713031680)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [443@380 mouseUp 26154685 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(702808064)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	26154685
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	443@380
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(702808064)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[443@380 mouseUp 26154685 nil]
	Receiver's instance variables: 
		bounds: 	417@367 corner: 554@385
		owner: 	a MenuMorph(695730176)
		submorphs: 	#()
		fullBounds: 	417@367 corner: 554@385
		color: 	Color black
		extension: 	a MorphExtension (713031680)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[443@380 mouseUp 26154685 nil]
		aMorph: 	a ToggleMenuItemMorph(702808064)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[443@380 mouseUp 26154685 nil]
		aMorph: 	a ToggleMenuItemMorph(702808064)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(702808064)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[443@380 mouseUp 26154685 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	417@367 corner: 554@385
		owner: 	a MenuMorph(695730176)
		submorphs: 	#()
		fullBounds: 	417@367 corner: 554@385
		color: 	Color black
		extension: 	a MorphExtension (713031680)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[443@380 mouseUp 26154685 nil]
		aMorph: 	a MenuMorph(695730176)
		localEvt: 	[443@380 mouseUp 26154685 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(702808064)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(702808064)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[443@380 mouseUp 26154685 nil]
		aMorph: 	a MenuMorph(695730176)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(695730176)
	Arguments and temporary variables: 
		anEvent: 	[443@380 mouseUp 26154685 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	412@362 corner: 559@709
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(702808064)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	412@362 corner: 559@709
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (710672384) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(702808064)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(702808064)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(695730176)
	Arguments and temporary variables: 
		anEvent: 	[443@380 mouseUp 26154685 nil]
	Receiver's instance variables: 
		bounds: 	412@362 corner: 559@709
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(702808064)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	412@362 corner: 559@709
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (710672384) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(702808064)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(702808064)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(695730176)
	Arguments and temporary variables: 
		evt: 	[443@380 mouseUp 26154685 nil]
	Receiver's instance variables: 
		bounds: 	412@362 corner: 559@709
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(702808064)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	412@362 corner: 559@709
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (710672384) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(702808064)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(702808064)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[443@380 mouseUp 26154685 nil]
		focusHolder: 	a MenuMorph(695730176)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	443@380 corner: 459@396
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	443@380 corner: 459@396
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(948961280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[443@380 mouseUp 26154685 nil]
		targetOffset: 	24@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 26154685 443 380 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(639631360) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[443@380 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(639631360) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[443@380 mouseUp 26154685 nil]
		focusHolder: 	a MenuMorph(695730176)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	443@380 corner: 459@396
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	443@380 corner: 459@396
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(948961280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[443@380 mouseUp 26154685 nil]
		targetOffset: 	24@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 26154685 443 380 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[443@380 mouseUp 26154685 nil]
		focusHolder: 	a MenuMorph(695730176)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	443@380 corner: 459@396
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	443@380 corner: 459@396
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(948961280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[443@380 mouseUp 26154685 nil]
		targetOffset: 	24@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 26154685 443 380 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[443@380 mouseUp 26154685 nil]
	Receiver's instance variables: 
		bounds: 	443@380 corner: 459@396
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	443@380 corner: 459@396
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(948961280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[443@380 mouseUp 26154685 nil]
		targetOffset: 	24@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 26154685 443 380 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[443@380 mouseUp 26154685 nil]
		evt: 	[443@380 mouseUp 26154685 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	443@380 corner: 459@396
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	443@380 corner: 459@396
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(948961280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[443@380 mouseUp 26154685 nil]
		targetOffset: 	24@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 26154685 443 380 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[443@380 mouseUp 26154685 nil]
		evtBuf: 	#(1 26154685 443 380 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	443@380 corner: 459@396
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	443@380 corner: 459@396
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(948961280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[443@380 mouseUp 26154685 nil]
		targetOffset: 	24@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 26154685 443 380 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil



--- The full stack ---
SoloCategory(Object)>>mustBeBooleanIn:
SoloCategory(Object)>>mustBeBoolean
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ThreadSafeTranscript>>awardBestMaleSinger
31 December 2011 11:52:36 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

ThreadSafeTranscript(Object)>>doesNotUnderstand: #awardBestMaleSinger
	Receiver: Transcript
	Arguments and temporary variables: 
		aMessage: 	awardBestMaleSinger
		exception: 	MessageNotUnderstood: ThreadSafeTranscript>>awardBestMaleSinger
		resumeValue: 	nil
	Receiver's instance variables: 
		stream: 	a WriteStream ''
		accessSemaphore: 	a Mutex


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		hetfield: 	a Solo
		ulrich: 	a Solo
		hammett: 	a Solo
		trujillo: 	a Solo
		metallica: 	a Band
		awardBestMaleSinger: 	a SoloCategory
		awardBestNewcomerMaleSinger: 	nil
		ceremony: 	a Ceremony
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(406585344)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	314@186 corner: 1184@584
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	314@186 corner: 1184@584
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 5006)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	314@186 corner: 1184@584
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	314@186 corner: 1184@584
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 5006)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 849@1074
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 849@1074
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 80737296) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	314@186 corner: 1184@584
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	314@186 corner: 1184@584
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 5006)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	314@186 corner: 1184@584
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	314@186 corner: 1184@584
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 5006)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(755761152)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[674@373 mouseUp 80738105 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	630@367 corner: 767@385
		owner: 	a MenuMorph(748683264)
		submorphs: 	#()
		fullBounds: 	630@367 corner: 767@385
		color: 	Color black
		extension: 	a MorphExtension (765984768)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(755761152)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[674@373 mouseUp 80738105 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	630@367 corner: 767@385
		owner: 	a MenuMorph(748683264)
		submorphs: 	#()
		fullBounds: 	630@367 corner: 767@385
		color: 	Color black
		extension: 	a MorphExtension (765984768)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(755761152)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[674@373 mouseUp 80738105 nil]
	Receiver's instance variables: 
		bounds: 	630@367 corner: 767@385
		owner: 	a MenuMorph(748683264)
		submorphs: 	#()
		fullBounds: 	630@367 corner: 767@385
		color: 	Color black
		extension: 	a MorphExtension (765984768)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(755761152)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[674@373 mouseUp 80738105 nil]
	Receiver's instance variables: 
		bounds: 	630@367 corner: 767@385
		owner: 	a MenuMorph(748683264)
		submorphs: 	#()
		fullBounds: 	630@367 corner: 767@385
		color: 	Color black
		extension: 	a MorphExtension (765984768)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [674@373 mouseUp 80738105 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(755761152)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	80738105
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	674@373
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(755761152)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[674@373 mouseUp 80738105 nil]
	Receiver's instance variables: 
		bounds: 	630@367 corner: 767@385
		owner: 	a MenuMorph(748683264)
		submorphs: 	#()
		fullBounds: 	630@367 corner: 767@385
		color: 	Color black
		extension: 	a MorphExtension (765984768)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[674@373 mouseUp 80738105 nil]
		aMorph: 	a ToggleMenuItemMorph(755761152)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[674@373 mouseUp 80738105 nil]
		aMorph: 	a ToggleMenuItemMorph(755761152)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(755761152)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[674@373 mouseUp 80738105 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	630@367 corner: 767@385
		owner: 	a MenuMorph(748683264)
		submorphs: 	#()
		fullBounds: 	630@367 corner: 767@385
		color: 	Color black
		extension: 	a MorphExtension (765984768)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[674@373 mouseUp 80738105 nil]
		aMorph: 	a MenuMorph(748683264)
		localEvt: 	[674@373 mouseUp 80738105 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(755761152)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(755761152)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[674@373 mouseUp 80738105 nil]
		aMorph: 	a MenuMorph(748683264)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(748683264)
	Arguments and temporary variables: 
		anEvent: 	[674@373 mouseUp 80738105 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	625@362 corner: 772@709
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(755761152)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	625@362 corner: 772@709
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (763625472) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(755761152)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(755761152)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(748683264)
	Arguments and temporary variables: 
		anEvent: 	[674@373 mouseUp 80738105 nil]
	Receiver's instance variables: 
		bounds: 	625@362 corner: 772@709
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(755761152)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	625@362 corner: 772@709
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (763625472) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(755761152)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(755761152)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(748683264)
	Arguments and temporary variables: 
		evt: 	[674@373 mouseUp 80738105 nil]
	Receiver's instance variables: 
		bounds: 	625@362 corner: 772@709
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(755761152)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	625@362 corner: 772@709
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (763625472) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(755761152)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(755761152)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[674@373 mouseUp 80738105 nil]
		focusHolder: 	a MenuMorph(748683264)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	164@373 corner: 180@389
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(418643968)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[674@373 164@373 mouseMove 80738454 nil]
		targetOffset: 	44@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 80738454 673 373 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(50593792) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[674@373 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(50593792) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[674@373 mouseUp 80738105 nil]
		focusHolder: 	a MenuMorph(748683264)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	164@373 corner: 180@389
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(418643968)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[674@373 164@373 mouseMove 80738454 nil]
		targetOffset: 	44@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 80738454 673 373 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[674@373 mouseUp 80738105 nil]
		focusHolder: 	a MenuMorph(748683264)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	164@373 corner: 180@389
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(418643968)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[674@373 164@373 mouseMove 80738454 nil]
		targetOffset: 	44@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 80738454 673 373 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[674@373 mouseUp 80738105 nil]
	Receiver's instance variables: 
		bounds: 	164@373 corner: 180@389
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(418643968)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[674@373 164@373 mouseMove 80738454 nil]
		targetOffset: 	44@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 80738454 673 373 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[674@373 mouseUp 80738105 nil]
		evt: 	[674@373 mouseUp 80738105 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	164@373 corner: 180@389
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(418643968)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[674@373 164@373 mouseMove 80738454 nil]
		targetOffset: 	44@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 80738454 673 373 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[674@373 mouseUp 80738105 nil]
		evtBuf: 	#(1 80738105 674 373 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	164@373 corner: 180@389
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(418643968)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[674@373 164@373 mouseMove 80738454 nil]
		targetOffset: 	44@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 80738454 673 373 0 0 0 1)
		lastKeyScanCode: 	99
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1280@727
		canvas: 	a FormCanvas on: DisplayScreen(1280x727x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(274726912))(an OBSys...etc...
		lastStepTime: 	80738090
		lastStepMessage: 	nil
		lastCycleTime: 	80740551
		alarms: 	a Heap()
		lastAlarmTime: 	80738090
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
ThreadSafeTranscript(Object)>>doesNotUnderstand: #awardBestMaleSinger
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "add:" is nil
11 January 2012 9:53:30 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #add:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	add: a Solo
		exception: 	MessageNotUnderstood: receiver of "add:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Band>>addMember:
	Receiver: a Band
	Arguments and temporary variables: 
		member: 	a Solo
	Receiver's instance variables: 
		activeSince: 	1990
		awardsWon: 	a LinkedList()
		artistName: 	'Clement Peerens Explosition'
		members: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		hetfield: 	nil
		ulrich: 	nil
		hammett: 	nil
		trujillo: 	nil
		metallica: 	nil
		martin: 	nil
		fakefigures: 	nil
		awardBestMaleSinger: 	nil
		awardBestNewcomerBand: 	nil
		ceremony: 	nil
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(646184960)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 6202)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 6202)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 979@1282
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 979@1282
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 1193596) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 6202)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 6202)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(894959616)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[430@219 mouseUp 1193642 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	409@209 corner: 546@227
		owner: 	a MenuMorph(887881728)
		submorphs: 	#()
		fullBounds: 	409@209 corner: 546@227
		color: 	Color black
		extension: 	a MorphExtension (905183232)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(894959616)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[430@219 mouseUp 1193642 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	409@209 corner: 546@227
		owner: 	a MenuMorph(887881728)
		submorphs: 	#()
		fullBounds: 	409@209 corner: 546@227
		color: 	Color black
		extension: 	a MorphExtension (905183232)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(894959616)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[430@219 mouseUp 1193642 nil]
	Receiver's instance variables: 
		bounds: 	409@209 corner: 546@227
		owner: 	a MenuMorph(887881728)
		submorphs: 	#()
		fullBounds: 	409@209 corner: 546@227
		color: 	Color black
		extension: 	a MorphExtension (905183232)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(894959616)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[430@219 mouseUp 1193642 nil]
	Receiver's instance variables: 
		bounds: 	409@209 corner: 546@227
		owner: 	a MenuMorph(887881728)
		submorphs: 	#()
		fullBounds: 	409@209 corner: 546@227
		color: 	Color black
		extension: 	a MorphExtension (905183232)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [430@219 mouseUp 1193642 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(894959616)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	1193642
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	430@219
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(894959616)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[430@219 mouseUp 1193642 nil]
	Receiver's instance variables: 
		bounds: 	409@209 corner: 546@227
		owner: 	a MenuMorph(887881728)
		submorphs: 	#()
		fullBounds: 	409@209 corner: 546@227
		color: 	Color black
		extension: 	a MorphExtension (905183232)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[430@219 mouseUp 1193642 nil]
		aMorph: 	a ToggleMenuItemMorph(894959616)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[430@219 mouseUp 1193642 nil]
		aMorph: 	a ToggleMenuItemMorph(894959616)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(894959616)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[430@219 mouseUp 1193642 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	409@209 corner: 546@227
		owner: 	a MenuMorph(887881728)
		submorphs: 	#()
		fullBounds: 	409@209 corner: 546@227
		color: 	Color black
		extension: 	a MorphExtension (905183232)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[430@219 mouseUp 1193642 nil]
		aMorph: 	a MenuMorph(887881728)
		localEvt: 	[430@219 mouseUp 1193642 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(894959616)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(894959616)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[430@219 mouseUp 1193642 nil]
		aMorph: 	a MenuMorph(887881728)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(887881728)
	Arguments and temporary variables: 
		anEvent: 	[430@219 mouseUp 1193642 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	404@204 corner: 551@551
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(894959616)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	404@204 corner: 551@551
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (902823936) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(894959616)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(894959616)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(887881728)
	Arguments and temporary variables: 
		anEvent: 	[430@219 mouseUp 1193642 nil]
	Receiver's instance variables: 
		bounds: 	404@204 corner: 551@551
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(894959616)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	404@204 corner: 551@551
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (902823936) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(894959616)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(894959616)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(887881728)
	Arguments and temporary variables: 
		evt: 	[430@219 mouseUp 1193642 nil]
	Receiver's instance variables: 
		bounds: 	404@204 corner: 551@551
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(894959616)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	404@204 corner: 551@551
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (902823936) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(894959616)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(894959616)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[430@219 mouseUp 1193642 nil]
		focusHolder: 	a MenuMorph(887881728)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	422@283 corner: 438@299
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	422@283 corner: 438@299
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(583270400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[430@219 422@283 mouseMove 1193962 nil]
		targetOffset: 	21@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1193962 430 222 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(270008320) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[430@219 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(270008320) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[430@219 mouseUp 1193642 nil]
		focusHolder: 	a MenuMorph(887881728)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	422@283 corner: 438@299
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	422@283 corner: 438@299
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(583270400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[430@219 422@283 mouseMove 1193962 nil]
		targetOffset: 	21@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1193962 430 222 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[430@219 mouseUp 1193642 nil]
		focusHolder: 	a MenuMorph(887881728)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	422@283 corner: 438@299
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	422@283 corner: 438@299
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(583270400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[430@219 422@283 mouseMove 1193962 nil]
		targetOffset: 	21@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1193962 430 222 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[430@219 mouseUp 1193642 nil]
	Receiver's instance variables: 
		bounds: 	422@283 corner: 438@299
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	422@283 corner: 438@299
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(583270400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[430@219 422@283 mouseMove 1193962 nil]
		targetOffset: 	21@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1193962 430 222 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[430@219 mouseUp 1193642 nil]
		evt: 	[430@219 mouseUp 1193642 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	422@283 corner: 438@299
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	422@283 corner: 438@299
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(583270400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[430@219 422@283 mouseMove 1193962 nil]
		targetOffset: 	21@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1193962 430 222 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[430@219 mouseUp 1193642 nil]
		evtBuf: 	#(1 1193642 430 219 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	422@283 corner: 438@299
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	422@283 corner: 438@299
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(583270400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[430@219 422@283 mouseMove 1193962 nil]
		targetOffset: 	21@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1193962 430 222 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #add:
Band>>addMember:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
11 January 2012 9:56:25 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(659292160)
	Arguments and temporary variables: 
		anEvent: 	[819@480 846@467 mouseEnter 1368786 nil]
	Receiver's instance variables: 
		bounds: 	837@455 corner: 1037@503
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	837@455 corner: 1037@503
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (675282944) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	1037@455
		lastActivity: 	1367126


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [819@480 846@467 mouseEnter 1368786 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(659292160)
	Receiver's instance variables: 
		timeStamp: 	1368786
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	846@467
		handler: 	nil
		wasHandled: 	false
		startPoint: 	819@480
		trail: 	{(828@476). (837@471). (846@467)}


MouseMoveEvent>>sentTo:
	Receiver: [819@480 846@467 mouseEnter 1368786 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(659292160)
	Receiver's instance variables: 
		timeStamp: 	1368786
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	846@467
		handler: 	nil
		wasHandled: 	false
		startPoint: 	819@480
		trail: 	{(828@476). (837@471). (846@467)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(659292160)
	Arguments and temporary variables: 
		anEvent: 	[819@480 846@467 mouseEnter 1368786 nil]
	Receiver's instance variables: 
		bounds: 	837@455 corner: 1037@503
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	837@455 corner: 1037@503
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (675282944) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	1037@455
		lastActivity: 	1367126


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[819@480 846@467 mouseEnter 1368786 nil]
		originalEvent: 	[819@480 846@467 mouseMove 1368786 nil]
		aMorph: 	an OMenuMorph(659292160)
		transformedEvent: 	[819@480 846@467 mouseEnter 1368786 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(330039296) a TransformMorph(469762048)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[819@480 846@467 mouseEnter 1368786 nil]
		aLeftMorph: 	an OMenuMorph(659292160)
		anEvent: 	[819@480 846@467 mouseMove 1368786 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(330039296) a TransformMorph(469762048)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[819@480 846@467 mouseEnter 1368786 nil]
		aLeftMorph: 	an OMenuMorph(659292160)
		anEvent: 	[819@480 846@467 mouseMove 1368786 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(330039296) a TransformMorph(469762048)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(659292160)
		asMouseEnterEvent: 	[819@480 846@467 mouseMove 1368786 nil]
		anEnteredMorph: 	[819@480 846@467 mouseEnter 1368786 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(330039296) a TransformMorph(469762048)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(659292160))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(659292160))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[819@480 846@467 mouseMove 1368786 nil]
		asMouseEnterEvent: 	[819@480 846@467 mouseEnter 1368786 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(330039296) a TransformMorph(469762048)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[819@480 846@467 mouseMove 1368786 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(330039296) a TransformMorph(469762048)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[819@480 846@467 mouseMove 1368786 nil]
		evt: 	[819@480 846@467 mouseMove 1368786 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	905@439 corner: 921@455
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(615776256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[865@459 905@439 mouseMove 1368830 nil]
		targetOffset: 	204@59
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1368830 876 454 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[819@480 846@467 mouseMove 1368786 nil]
		evtBuf: 	#(1 1368786 828 476 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	905@439 corner: 921@455
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(615776256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[865@459 905@439 mouseMove 1368830 nil]
		targetOffset: 	204@59
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1368830 876 454 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1280@727
		canvas: 	a FormCanvas on: DisplayScreen(1280x727x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(659292160))(an OMenuMorp...etc...
		lastStepTime: 	1368792
		lastStepMessage: 	nil
		lastCycleTime: 	1368854
		alarms: 	a Heap()
		lastAlarmTime: 	1368792
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1280@727
		canvas: 	a FormCanvas on: DisplayScreen(1280x727x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(659292160))(an OMenuMorp...etc...
		lastStepTime: 	1368792
		lastStepMessage: 	nil
		lastCycleTime: 	1368854
		alarms: 	a Heap()
		lastAlarmTime: 	1368792
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1280@727
		canvas: 	a FormCanvas on: DisplayScreen(1280x727x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(659292160))(an OMenuMorp...etc...
		lastStepTime: 	1368792
		lastStepMessage: 	nil
		lastCycleTime: 	1368854
		alarms: 	a Heap()
		lastAlarmTime: 	1368792
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1280@727
		canvas: 	a FormCanvas on: DisplayScreen(1280x727x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(659292160))(an OMenuMorp...etc...
		lastStepTime: 	1368792
		lastStepMessage: 	nil
		lastCycleTime: 	1368854
		alarms: 	a Heap()
		lastAlarmTime: 	1368792
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(303562752) an OM...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
11 January 2012 9:56:25 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(659292160)
	Arguments and temporary variables: 
		anEvent: 	[846@467 865@459 mouseEnter 1368826 nil]
	Receiver's instance variables: 
		bounds: 	837@455 corner: 1037@503
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	837@455 corner: 1037@503
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (675282944) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	1037@455
		lastActivity: 	1367126


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [846@467 865@459 mouseEnter 1368826 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(659292160)
	Receiver's instance variables: 
		timeStamp: 	1368826
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	865@459
		handler: 	nil
		wasHandled: 	false
		startPoint: 	846@467
		trail: 	{(856@464). (865@459)}


MouseMoveEvent>>sentTo:
	Receiver: [846@467 865@459 mouseEnter 1368826 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(659292160)
	Receiver's instance variables: 
		timeStamp: 	1368826
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	865@459
		handler: 	nil
		wasHandled: 	false
		startPoint: 	846@467
		trail: 	{(856@464). (865@459)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(659292160)
	Arguments and temporary variables: 
		anEvent: 	[846@467 865@459 mouseEnter 1368826 nil]
	Receiver's instance variables: 
		bounds: 	837@455 corner: 1037@503
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	837@455 corner: 1037@503
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (675282944) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	1037@455
		lastActivity: 	1367126


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[846@467 865@459 mouseEnter 1368826 nil]
		originalEvent: 	[846@467 865@459 mouseMove 1368826 nil]
		aMorph: 	an OMenuMorph(659292160)
		transformedEvent: 	[846@467 865@459 mouseEnter 1368826 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(330039296) a TransformMorph(469762048)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[846@467 865@459 mouseEnter 1368826 nil]
		aLeftMorph: 	an OMenuMorph(659292160)
		anEvent: 	[846@467 865@459 mouseMove 1368826 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(330039296) a TransformMorph(469762048)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[846@467 865@459 mouseEnter 1368826 nil]
		aLeftMorph: 	an OMenuMorph(659292160)
		anEvent: 	[846@467 865@459 mouseMove 1368826 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(330039296) a TransformMorph(469762048)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(659292160)
		asMouseEnterEvent: 	[846@467 865@459 mouseMove 1368826 nil]
		anEnteredMorph: 	[846@467 865@459 mouseEnter 1368826 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(330039296) a TransformMorph(469762048)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(659292160))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(659292160))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[846@467 865@459 mouseMove 1368826 nil]
		asMouseEnterEvent: 	[846@467 865@459 mouseEnter 1368826 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(330039296) a TransformMorph(469762048)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[846@467 865@459 mouseMove 1368826 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(330039296) a TransformMorph(469762048)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[846@467 865@459 mouseMove 1368826 nil]
		evt: 	[846@467 865@459 mouseMove 1368826 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	905@439 corner: 921@455
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(850657280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[865@459 905@439 mouseMove 1368830 nil]
		targetOffset: 	204@59
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1368830 876 454 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[846@467 865@459 mouseMove 1368826 nil]
		evtBuf: 	#(1 1368826 856 464 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	905@439 corner: 921@455
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(850657280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[865@459 905@439 mouseMove 1368830 nil]
		targetOffset: 	204@59
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1368830 876 454 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1280@727
		canvas: 	a FormCanvas on: DisplayScreen(1280x727x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(659292160))(an OMenuMorp...etc...
		lastStepTime: 	1368792
		lastStepMessage: 	nil
		lastCycleTime: 	1368854
		alarms: 	a Heap()
		lastAlarmTime: 	1368792
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1280@727
		canvas: 	a FormCanvas on: DisplayScreen(1280x727x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(659292160))(an OMenuMorp...etc...
		lastStepTime: 	1368792
		lastStepMessage: 	nil
		lastCycleTime: 	1368854
		alarms: 	a Heap()
		lastAlarmTime: 	1368792
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1280@727
		canvas: 	a FormCanvas on: DisplayScreen(1280x727x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(659292160))(an OMenuMorp...etc...
		lastStepTime: 	1368792
		lastStepMessage: 	nil
		lastCycleTime: 	1368854
		alarms: 	a Heap()
		lastAlarmTime: 	1368792
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1280@727
		canvas: 	a FormCanvas on: DisplayScreen(1280x727x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(659292160))(an OMenuMorp...etc...
		lastStepTime: 	1368792
		lastStepMessage: 	nil
		lastCycleTime: 	1368854
		alarms: 	a Heap()
		lastAlarmTime: 	1368792
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(538443776) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Solo>>,
11 January 2012 10:03:50 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

Solo(Object)>>doesNotUnderstand: #,
	Receiver: a Solo
	Arguments and temporary variables: 
		aMessage: 	, ' voted for '
		exception: 	MessageNotUnderstood: Solo>>,
		resumeValue: 	nil
	Receiver's instance variables: 
		activeSince: 	1981
		awardsWon: 	nil
		artistName: 	'Lars Ulrich'


SoloCategory(Category)>>vote:by:
	Receiver: a SoloCategory
	Arguments and temporary variables: 
		aVotee: 	a Solo
		aVoter: 	a Solo
		vote: 	a Vote
	Receiver's instance variables: 
		nominees: 	a LinkedList(a Solo a Band a Solo)
		jury: 	a LinkedList(a Solo)
		awardName: 	'Best male singer'
		votes: 	a Set(a Vote)


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		hetfield: 	a Solo
		ulrich: 	a Solo
		hammett: 	a Solo
		trujillo: 	a Solo
		metallica: 	a Band
		martin: 	a Solo
		fakefigures: 	a Band
		awardBestMaleSinger: 	a SoloCategory
		awardBestNewcomerBand: 	nil
		ceremony: 	a Ceremony
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(823394304)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 5620)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 5620)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 979@1218
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 979@1218
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 1812700) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 5620)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 5620)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(1044643840)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[583@256 mouseUp 1812674 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	569@248 corner: 706@266
		owner: 	a MenuMorph(1037565952)
		submorphs: 	#()
		fullBounds: 	569@248 corner: 706@266
		color: 	Color black
		extension: 	a MorphExtension (1054867456)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(1044643840)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[583@256 mouseUp 1812674 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	569@248 corner: 706@266
		owner: 	a MenuMorph(1037565952)
		submorphs: 	#()
		fullBounds: 	569@248 corner: 706@266
		color: 	Color black
		extension: 	a MorphExtension (1054867456)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(1044643840)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[583@256 mouseUp 1812674 nil]
	Receiver's instance variables: 
		bounds: 	569@248 corner: 706@266
		owner: 	a MenuMorph(1037565952)
		submorphs: 	#()
		fullBounds: 	569@248 corner: 706@266
		color: 	Color black
		extension: 	a MorphExtension (1054867456)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(1044643840)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[583@256 mouseUp 1812674 nil]
	Receiver's instance variables: 
		bounds: 	569@248 corner: 706@266
		owner: 	a MenuMorph(1037565952)
		submorphs: 	#()
		fullBounds: 	569@248 corner: 706@266
		color: 	Color black
		extension: 	a MorphExtension (1054867456)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [583@256 mouseUp 1812674 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(1044643840)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	1812674
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	583@256
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(1044643840)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[583@256 mouseUp 1812674 nil]
	Receiver's instance variables: 
		bounds: 	569@248 corner: 706@266
		owner: 	a MenuMorph(1037565952)
		submorphs: 	#()
		fullBounds: 	569@248 corner: 706@266
		color: 	Color black
		extension: 	a MorphExtension (1054867456)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[583@256 mouseUp 1812674 nil]
		aMorph: 	a ToggleMenuItemMorph(1044643840)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[583@256 mouseUp 1812674 nil]
		aMorph: 	a ToggleMenuItemMorph(1044643840)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(1044643840)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[583@256 mouseUp 1812674 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	569@248 corner: 706@266
		owner: 	a MenuMorph(1037565952)
		submorphs: 	#()
		fullBounds: 	569@248 corner: 706@266
		color: 	Color black
		extension: 	a MorphExtension (1054867456)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[583@256 mouseUp 1812674 nil]
		aMorph: 	a MenuMorph(1037565952)
		localEvt: 	[583@256 mouseUp 1812674 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(1044643840)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(1044643840)'Do it (d)' a ToggleMenuItemM...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[583@256 mouseUp 1812674 nil]
		aMorph: 	a MenuMorph(1037565952)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(1037565952)
	Arguments and temporary variables: 
		anEvent: 	[583@256 mouseUp 1812674 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	564@243 corner: 711@590
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1044643840)'Do it (d)' a ToggleMenuIt...etc...
		fullBounds: 	564@243 corner: 711@590
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (1052508160) [other:  (basicColor -> (Color r: 0.74...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(1044643840)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(1044643840)'Do it (d)' a ...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(1037565952)
	Arguments and temporary variables: 
		anEvent: 	[583@256 mouseUp 1812674 nil]
	Receiver's instance variables: 
		bounds: 	564@243 corner: 711@590
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1044643840)'Do it (d)' a ToggleMenuIt...etc...
		fullBounds: 	564@243 corner: 711@590
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (1052508160) [other:  (basicColor -> (Color r: 0.74...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(1044643840)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(1044643840)'Do it (d)' a ...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(1037565952)
	Arguments and temporary variables: 
		evt: 	[583@256 mouseUp 1812674 nil]
	Receiver's instance variables: 
		bounds: 	564@243 corner: 711@590
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1044643840)'Do it (d)' a ToggleMenuIt...etc...
		fullBounds: 	564@243 corner: 711@590
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (1052508160) [other:  (basicColor -> (Color r: 0.74...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(1044643840)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(1044643840)'Do it (d)' a ...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[583@256 mouseUp 1812674 nil]
		focusHolder: 	a MenuMorph(1037565952)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	684@568 corner: 700@584
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(436731904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[583@256 684@568 mouseMove 1813268 nil]
		targetOffset: 	14@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1813268 583 257 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(69206016) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[583@256 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(69206016) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[583@256 mouseUp 1812674 nil]
		focusHolder: 	a MenuMorph(1037565952)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	684@568 corner: 700@584
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(436731904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[583@256 684@568 mouseMove 1813268 nil]
		targetOffset: 	14@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1813268 583 257 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[583@256 mouseUp 1812674 nil]
		focusHolder: 	a MenuMorph(1037565952)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	684@568 corner: 700@584
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(436731904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[583@256 684@568 mouseMove 1813268 nil]
		targetOffset: 	14@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1813268 583 257 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[583@256 mouseUp 1812674 nil]
	Receiver's instance variables: 
		bounds: 	684@568 corner: 700@584
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(436731904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[583@256 684@568 mouseMove 1813268 nil]
		targetOffset: 	14@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1813268 583 257 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[583@256 mouseUp 1812674 nil]
		evt: 	[583@256 mouseUp 1812674 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	684@568 corner: 700@584
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(436731904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[583@256 684@568 mouseMove 1813268 nil]
		targetOffset: 	14@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1813268 583 257 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[583@256 mouseUp 1812674 nil]
		evtBuf: 	#(1 1812674 583 256 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	684@568 corner: 700@584
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(436731904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[583@256 684@568 mouseMove 1813268 nil]
		targetOffset: 	14@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1813268 583 257 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil



--- The full stack ---
Solo(Object)>>doesNotUnderstand: #,
SoloCategory(Category)>>vote:by:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: SoloCategory>>aVoter
11 January 2012 10:07:02 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

SoloCategory(Object)>>doesNotUnderstand: #aVoter
	Receiver: a SoloCategory
	Arguments and temporary variables: 
		aMessage: 	aVoter
		exception: 	MessageNotUnderstood: SoloCategory>>aVoter
		resumeValue: 	nil
	Receiver's instance variables: 
		nominees: 	a LinkedList(a Solo a Band a Solo)
		jury: 	a LinkedList(a Solo)
		awardName: 	'Best male singer'
		votes: 	a Set(a Vote)


SoloCategory(Category)>>vote:by:
	Receiver: a SoloCategory
	Arguments and temporary variables: 
		aVotee: 	a Solo
		aVoter: 	a Solo
		vote: 	a Vote
	Receiver's instance variables: 
		nominees: 	a LinkedList(a Solo a Band a Solo)
		jury: 	a LinkedList(a Solo)
		awardName: 	'Best male singer'
		votes: 	a Set(a Vote)


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		hetfield: 	a Solo
		ulrich: 	a Solo
		hammett: 	a Solo
		trujillo: 	a Solo
		metallica: 	a Band
		martin: 	a Solo
		fakefigures: 	a Band
		awardBestMaleSinger: 	a SoloCategory
		awardBestNewcomerBand: 	nil
		ceremony: 	a Ceremony
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(500695040)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 5620)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 5620)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 979@1218
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 979@1218
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 2004454) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 5620)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 5620)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(430178304)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[421@376 mouseUp 2004538 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	396@367 corner: 533@385
		owner: 	a MenuMorph(423100416)
		submorphs: 	#()
		fullBounds: 	396@367 corner: 533@385
		color: 	Color black
		extension: 	a MorphExtension (440401920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(430178304)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[421@376 mouseUp 2004538 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	396@367 corner: 533@385
		owner: 	a MenuMorph(423100416)
		submorphs: 	#()
		fullBounds: 	396@367 corner: 533@385
		color: 	Color black
		extension: 	a MorphExtension (440401920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(430178304)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[421@376 mouseUp 2004538 nil]
	Receiver's instance variables: 
		bounds: 	396@367 corner: 533@385
		owner: 	a MenuMorph(423100416)
		submorphs: 	#()
		fullBounds: 	396@367 corner: 533@385
		color: 	Color black
		extension: 	a MorphExtension (440401920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(430178304)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[421@376 mouseUp 2004538 nil]
	Receiver's instance variables: 
		bounds: 	396@367 corner: 533@385
		owner: 	a MenuMorph(423100416)
		submorphs: 	#()
		fullBounds: 	396@367 corner: 533@385
		color: 	Color black
		extension: 	a MorphExtension (440401920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [421@376 mouseUp 2004538 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(430178304)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	2004538
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	421@376
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(430178304)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[421@376 mouseUp 2004538 nil]
	Receiver's instance variables: 
		bounds: 	396@367 corner: 533@385
		owner: 	a MenuMorph(423100416)
		submorphs: 	#()
		fullBounds: 	396@367 corner: 533@385
		color: 	Color black
		extension: 	a MorphExtension (440401920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[421@376 mouseUp 2004538 nil]
		aMorph: 	a ToggleMenuItemMorph(430178304)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[421@376 mouseUp 2004538 nil]
		aMorph: 	a ToggleMenuItemMorph(430178304)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(430178304)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[421@376 mouseUp 2004538 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	396@367 corner: 533@385
		owner: 	a MenuMorph(423100416)
		submorphs: 	#()
		fullBounds: 	396@367 corner: 533@385
		color: 	Color black
		extension: 	a MorphExtension (440401920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[421@376 mouseUp 2004538 nil]
		aMorph: 	a MenuMorph(423100416)
		localEvt: 	[421@376 mouseUp 2004538 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(430178304)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(430178304)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[421@376 mouseUp 2004538 nil]
		aMorph: 	a MenuMorph(423100416)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(423100416)
	Arguments and temporary variables: 
		anEvent: 	[421@376 mouseUp 2004538 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	391@362 corner: 538@709
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(430178304)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	391@362 corner: 538@709
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (438042624) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(430178304)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(430178304)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(423100416)
	Arguments and temporary variables: 
		anEvent: 	[421@376 mouseUp 2004538 nil]
	Receiver's instance variables: 
		bounds: 	391@362 corner: 538@709
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(430178304)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	391@362 corner: 538@709
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (438042624) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(430178304)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(430178304)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(423100416)
	Arguments and temporary variables: 
		evt: 	[421@376 mouseUp 2004538 nil]
	Receiver's instance variables: 
		bounds: 	391@362 corner: 538@709
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(430178304)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	391@362 corner: 538@709
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (438042624) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(430178304)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(430178304)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[421@376 mouseUp 2004538 nil]
		focusHolder: 	a MenuMorph(423100416)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	539@526 corner: 555@542
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	539@526 corner: 555@542
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(793772032)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[421@376 539@526 mouseMove 2005054 nil]
		targetOffset: 	25@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2005054 422 376 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(480509952) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[421@376 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(480509952) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[421@376 mouseUp 2004538 nil]
		focusHolder: 	a MenuMorph(423100416)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	539@526 corner: 555@542
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	539@526 corner: 555@542
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(793772032)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[421@376 539@526 mouseMove 2005054 nil]
		targetOffset: 	25@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2005054 422 376 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[421@376 mouseUp 2004538 nil]
		focusHolder: 	a MenuMorph(423100416)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	539@526 corner: 555@542
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	539@526 corner: 555@542
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(793772032)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[421@376 539@526 mouseMove 2005054 nil]
		targetOffset: 	25@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2005054 422 376 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[421@376 mouseUp 2004538 nil]
	Receiver's instance variables: 
		bounds: 	539@526 corner: 555@542
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	539@526 corner: 555@542
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(793772032)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[421@376 539@526 mouseMove 2005054 nil]
		targetOffset: 	25@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2005054 422 376 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[421@376 mouseUp 2004538 nil]
		evt: 	[421@376 mouseUp 2004538 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	539@526 corner: 555@542
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	539@526 corner: 555@542
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(793772032)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[421@376 539@526 mouseMove 2005054 nil]
		targetOffset: 	25@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2005054 422 376 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[421@376 mouseUp 2004538 nil]
		evtBuf: 	#(1 2004538 421 376 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	539@526 corner: 555@542
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	539@526 corner: 555@542
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(793772032)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[421@376 539@526 mouseMove 2005054 nil]
		targetOffset: 	25@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2005054 422 376 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil



--- The full stack ---
SoloCategory(Object)>>doesNotUnderstand: #aVoter
SoloCategory(Category)>>vote:by:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
13 January 2012 11:50:16 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(70254592)
	Arguments and temporary variables: 
		anEvent: 	[723@493 732@465 mouseEnter 1959268 nil]
	Receiver's instance variables: 
		bounds: 	687@455 corner: 887@471
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	687@455 corner: 887@471
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (86245376) [eventHandler = an EventHandler; mouseDo...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	887@455
		lastActivity: 	1957472


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [723@493 732@465 mouseEnter 1959268 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(70254592)
	Receiver's instance variables: 
		timeStamp: 	1959268
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	732@465
		handler: 	nil
		wasHandled: 	false
		startPoint: 	723@493
		trail: 	{(727@482). (729@473). (732@465)}


MouseMoveEvent>>sentTo:
	Receiver: [723@493 732@465 mouseEnter 1959268 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(70254592)
	Receiver's instance variables: 
		timeStamp: 	1959268
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	732@465
		handler: 	nil
		wasHandled: 	false
		startPoint: 	723@493
		trail: 	{(727@482). (729@473). (732@465)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(70254592)
	Arguments and temporary variables: 
		anEvent: 	[723@493 732@465 mouseEnter 1959268 nil]
	Receiver's instance variables: 
		bounds: 	687@455 corner: 887@471
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	687@455 corner: 887@471
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (86245376) [eventHandler = an EventHandler; mouseDo...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	887@455
		lastActivity: 	1957472


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[723@493 732@465 mouseEnter 1959268 nil]
		originalEvent: 	[723@493 732@465 mouseMove 1959268 nil]
		aMorph: 	an OMenuMorph(70254592)
		transformedEvent: 	[723@493 732@465 mouseEnter 1959268 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(330039296) a TransformMorph(469762048)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[723@493 732@465 mouseEnter 1959268 nil]
		aLeftMorph: 	an OMenuMorph(70254592)
		anEvent: 	[723@493 732@465 mouseMove 1959268 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(330039296) a TransformMorph(469762048)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[723@493 732@465 mouseEnter 1959268 nil]
		aLeftMorph: 	an OMenuMorph(70254592)
		anEvent: 	[723@493 732@465 mouseMove 1959268 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(330039296) a TransformMorph(469762048)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(70254592)
		asMouseEnterEvent: 	[723@493 732@465 mouseMove 1959268 nil]
		anEnteredMorph: 	[723@493 732@465 mouseEnter 1959268 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(330039296) a TransformMorph(469762048)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(70254592))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(70254592))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[723@493 732@465 mouseMove 1959268 nil]
		asMouseEnterEvent: 	[723@493 732@465 mouseEnter 1959268 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(330039296) a TransformMorph(469762048)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[723@493 732@465 mouseMove 1959268 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(330039296) a TransformMorph(469762048)...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[723@493 732@465 mouseMove 1959268 nil]
		evt: 	[723@493 732@465 mouseMove 1959268 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	743@445 corner: 759@461
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(306970624)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[732@465 743@445 mouseMove 1959292 nil]
		targetOffset: 	132@164
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1959292 737 458 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[723@493 732@465 mouseMove 1959268 nil]
		evtBuf: 	#(1 1959268 727 482 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	743@445 corner: 759@461
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(306970624)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[732@465 743@445 mouseMove 1959292 nil]
		targetOffset: 	132@164
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1959292 737 458 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1280@727
		canvas: 	a FormCanvas on: DisplayScreen(1280x727x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(274726912))(an OBSys...etc...
		lastStepTime: 	1959266
		lastStepMessage: 	nil
		lastCycleTime: 	1959308
		alarms: 	a Heap()
		lastAlarmTime: 	1959266
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1280@727
		canvas: 	a FormCanvas on: DisplayScreen(1280x727x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(274726912))(an OBSys...etc...
		lastStepTime: 	1959266
		lastStepMessage: 	nil
		lastCycleTime: 	1959308
		alarms: 	a Heap()
		lastAlarmTime: 	1959266
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1280@727
		canvas: 	a FormCanvas on: DisplayScreen(1280x727x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(274726912))(an OBSys...etc...
		lastStepTime: 	1959266
		lastStepMessage: 	nil
		lastCycleTime: 	1959308
		alarms: 	a Heap()
		lastAlarmTime: 	1959266
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1280@727
		canvas: 	a FormCanvas on: DisplayScreen(1280x727x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(274726912))(an OBSys...etc...
		lastStepTime: 	1959266
		lastStepMessage: 	nil
		lastCycleTime: 	1959308
		alarms: 	a Heap()
		lastAlarmTime: 	1959266
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1068498944) an O...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NonBooleanReceiver: proceed for truth.
13 January 2012 11:50:28 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

Solo(Object)>>mustBeBooleanIn:
	Receiver: a Solo
	Arguments and temporary variables: 
		context: 	UndefinedObject>>DoIt
		proceedValue: 	nil
	Receiver's instance variables: 
		activeSince: 	1981
		awardsWon: 	nil
		artistName: 	'Lars Ulrich'


Solo(Object)>>mustBeBoolean
	Receiver: a Solo
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeSince: 	1981
		awardsWon: 	nil
		artistName: 	'Lars Ulrich'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		hetfield: 	a Solo
		ulrich: 	a Solo
		hammett: 	a Solo
		trujillo: 	a Solo
		metallica: 	a Band
		martin: 	a Solo
		fakefigures: 	a Band
		awardBestMaleSinger: 	a SoloCategory
		awardBestNewcomerBand: 	nil
		ceremony: 	a Ceremony
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(484966400)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 5620)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 5620)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 979@1218
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 979@1218
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 1969746) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 5620)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 5620)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(789577728)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[436@380 mouseUp 1970188 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	394@367 corner: 531@385
		owner: 	a MenuMorph(782499840)
		submorphs: 	#()
		fullBounds: 	394@367 corner: 531@385
		color: 	Color black
		extension: 	a MorphExtension (799801344)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(789577728)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[436@380 mouseUp 1970188 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	394@367 corner: 531@385
		owner: 	a MenuMorph(782499840)
		submorphs: 	#()
		fullBounds: 	394@367 corner: 531@385
		color: 	Color black
		extension: 	a MorphExtension (799801344)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(789577728)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[436@380 mouseUp 1970188 nil]
	Receiver's instance variables: 
		bounds: 	394@367 corner: 531@385
		owner: 	a MenuMorph(782499840)
		submorphs: 	#()
		fullBounds: 	394@367 corner: 531@385
		color: 	Color black
		extension: 	a MorphExtension (799801344)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(789577728)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[436@380 mouseUp 1970188 nil]
	Receiver's instance variables: 
		bounds: 	394@367 corner: 531@385
		owner: 	a MenuMorph(782499840)
		submorphs: 	#()
		fullBounds: 	394@367 corner: 531@385
		color: 	Color black
		extension: 	a MorphExtension (799801344)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [436@380 mouseUp 1970188 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(789577728)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	1970188
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	436@380
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(789577728)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[436@380 mouseUp 1970188 nil]
	Receiver's instance variables: 
		bounds: 	394@367 corner: 531@385
		owner: 	a MenuMorph(782499840)
		submorphs: 	#()
		fullBounds: 	394@367 corner: 531@385
		color: 	Color black
		extension: 	a MorphExtension (799801344)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[436@380 mouseUp 1970188 nil]
		aMorph: 	a ToggleMenuItemMorph(789577728)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[436@380 mouseUp 1970188 nil]
		aMorph: 	a ToggleMenuItemMorph(789577728)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(789577728)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[436@380 mouseUp 1970188 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	394@367 corner: 531@385
		owner: 	a MenuMorph(782499840)
		submorphs: 	#()
		fullBounds: 	394@367 corner: 531@385
		color: 	Color black
		extension: 	a MorphExtension (799801344)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[436@380 mouseUp 1970188 nil]
		aMorph: 	a MenuMorph(782499840)
		localEvt: 	[436@380 mouseUp 1970188 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(789577728)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(789577728)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[436@380 mouseUp 1970188 nil]
		aMorph: 	a MenuMorph(782499840)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(782499840)
	Arguments and temporary variables: 
		anEvent: 	[436@380 mouseUp 1970188 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	389@362 corner: 536@709
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(789577728)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	389@362 corner: 536@709
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (797442048) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(789577728)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(789577728)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(782499840)
	Arguments and temporary variables: 
		anEvent: 	[436@380 mouseUp 1970188 nil]
	Receiver's instance variables: 
		bounds: 	389@362 corner: 536@709
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(789577728)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	389@362 corner: 536@709
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (797442048) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(789577728)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(789577728)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(782499840)
	Arguments and temporary variables: 
		evt: 	[436@380 mouseUp 1970188 nil]
	Receiver's instance variables: 
		bounds: 	389@362 corner: 536@709
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(789577728)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	389@362 corner: 536@709
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (797442048) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(789577728)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(789577728)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[436@380 mouseUp 1970188 nil]
		focusHolder: 	a MenuMorph(782499840)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	597@579 corner: 613@595
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(552075264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[436@380 597@579 mouseMove 1970667 nil]
		targetOffset: 	42@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1970667 436 381 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(240123904) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[436@380 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(240123904) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[436@380 mouseUp 1970188 nil]
		focusHolder: 	a MenuMorph(782499840)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	597@579 corner: 613@595
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(552075264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[436@380 597@579 mouseMove 1970667 nil]
		targetOffset: 	42@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1970667 436 381 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[436@380 mouseUp 1970188 nil]
		focusHolder: 	a MenuMorph(782499840)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	597@579 corner: 613@595
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(552075264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[436@380 597@579 mouseMove 1970667 nil]
		targetOffset: 	42@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1970667 436 381 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[436@380 mouseUp 1970188 nil]
	Receiver's instance variables: 
		bounds: 	597@579 corner: 613@595
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(552075264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[436@380 597@579 mouseMove 1970667 nil]
		targetOffset: 	42@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1970667 436 381 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[436@380 mouseUp 1970188 nil]
		evt: 	[436@380 mouseUp 1970188 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	597@579 corner: 613@595
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(552075264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[436@380 597@579 mouseMove 1970667 nil]
		targetOffset: 	42@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1970667 436 381 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[436@380 mouseUp 1970188 nil]
		evtBuf: 	#(1 1970188 436 380 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	597@579 corner: 613@595
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(552075264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[436@380 597@579 mouseMove 1970667 nil]
		targetOffset: 	42@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1970667 436 381 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil



--- The full stack ---
Solo(Object)>>mustBeBooleanIn:
Solo(Object)>>mustBeBoolean
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Jury members must be solo artists
13 January 2012 11:52:47 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

Trait(Object)>>error:
	Receiver: TOutput
	Arguments and temporary variables: 
		aString: 	'Jury members must be solo artists'
	Receiver's instance variables: 
		methodDict: 	a MethodDictionary(#error:->(TOutput>>#error: "a CompiledMethod(680...etc...
		traitComposition: 	{}
		localSelectors: 	nil
		users: 	an IdentitySet(Artist Category)
		organization: 	('as yet unclassified' error: notice:)

		name: 	#TOutput
		environment: 	a SystemDictionary(lots of globals)
		classTrait: 	TOutput classTrait
		category: 	#POOL


Band(Artist)>>addToJury:
	Receiver: a Band
	Arguments and temporary variables: 
		category: 	a SoloCategory
	Receiver's instance variables: 
		activeSince: 	1990
		awardsWon: 	nil
		artistName: 	'Clement Peerens Explosition'
		members: 	a Bag(a Solo a Solo)


SoloCategory(Category)>>addJuryMember:
	Receiver: a SoloCategory
	Arguments and temporary variables: 
		anArtist: 	a Band
	Receiver's instance variables: 
		nominees: 	a LinkedList(a Solo a Band a Solo)
		jury: 	a LinkedList(a Solo)
		awardName: 	'Best male singer'
		votes: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		hetfield: 	a Solo
		ulrich: 	a Solo
		hammett: 	a Solo
		trujillo: 	a Solo
		metallica: 	a Band
		martin: 	a Solo
		fakefigures: 	a Band
		awardBestMaleSinger: 	a SoloCategory
		awardBestNewcomerBand: 	nil
		ceremony: 	a Ceremony
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(366739456)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 4831)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 4831)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 979@1122
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 979@1122
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 2109110) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 4831)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 4831)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(359923712)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[481@369 mouseUp 2109484 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	430@367 corner: 567@385
		owner: 	a MenuMorph(352845824)
		submorphs: 	#()
		fullBounds: 	430@367 corner: 567@385
		color: 	Color black
		extension: 	a MorphExtension (370147328)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(359923712)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[481@369 mouseUp 2109484 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	430@367 corner: 567@385
		owner: 	a MenuMorph(352845824)
		submorphs: 	#()
		fullBounds: 	430@367 corner: 567@385
		color: 	Color black
		extension: 	a MorphExtension (370147328)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(359923712)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[481@369 mouseUp 2109484 nil]
	Receiver's instance variables: 
		bounds: 	430@367 corner: 567@385
		owner: 	a MenuMorph(352845824)
		submorphs: 	#()
		fullBounds: 	430@367 corner: 567@385
		color: 	Color black
		extension: 	a MorphExtension (370147328)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(359923712)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[481@369 mouseUp 2109484 nil]
	Receiver's instance variables: 
		bounds: 	430@367 corner: 567@385
		owner: 	a MenuMorph(352845824)
		submorphs: 	#()
		fullBounds: 	430@367 corner: 567@385
		color: 	Color black
		extension: 	a MorphExtension (370147328)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [481@369 mouseUp 2109484 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(359923712)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	2109484
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	481@369
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(359923712)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[481@369 mouseUp 2109484 nil]
	Receiver's instance variables: 
		bounds: 	430@367 corner: 567@385
		owner: 	a MenuMorph(352845824)
		submorphs: 	#()
		fullBounds: 	430@367 corner: 567@385
		color: 	Color black
		extension: 	a MorphExtension (370147328)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[481@369 mouseUp 2109484 nil]
		aMorph: 	a ToggleMenuItemMorph(359923712)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[481@369 mouseUp 2109484 nil]
		aMorph: 	a ToggleMenuItemMorph(359923712)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(359923712)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[481@369 mouseUp 2109484 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	430@367 corner: 567@385
		owner: 	a MenuMorph(352845824)
		submorphs: 	#()
		fullBounds: 	430@367 corner: 567@385
		color: 	Color black
		extension: 	a MorphExtension (370147328)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[481@369 mouseUp 2109484 nil]
		aMorph: 	a MenuMorph(352845824)
		localEvt: 	[481@369 mouseUp 2109484 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(359923712)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(359923712)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[481@369 mouseUp 2109484 nil]
		aMorph: 	a MenuMorph(352845824)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(352845824)
	Arguments and temporary variables: 
		anEvent: 	[481@369 mouseUp 2109484 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	425@362 corner: 572@709
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(359923712)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	425@362 corner: 572@709
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (367788032) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(359923712)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(359923712)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(352845824)
	Arguments and temporary variables: 
		anEvent: 	[481@369 mouseUp 2109484 nil]
	Receiver's instance variables: 
		bounds: 	425@362 corner: 572@709
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(359923712)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	425@362 corner: 572@709
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (367788032) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(359923712)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(359923712)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(352845824)
	Arguments and temporary variables: 
		evt: 	[481@369 mouseUp 2109484 nil]
	Receiver's instance variables: 
		bounds: 	425@362 corner: 572@709
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(359923712)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	425@362 corner: 572@709
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (367788032) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(359923712)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(359923712)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[481@369 mouseUp 2109484 nil]
		focusHolder: 	a MenuMorph(352845824)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	514@569 corner: 530@585
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(186646528)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[481@369 514@569 mouseMove 2109612 nil]
		targetOffset: 	51@2
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2109612 481 370 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(874512384) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[481@369 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(874512384) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[481@369 mouseUp 2109484 nil]
		focusHolder: 	a MenuMorph(352845824)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	514@569 corner: 530@585
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(186646528)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[481@369 514@569 mouseMove 2109612 nil]
		targetOffset: 	51@2
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2109612 481 370 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[481@369 mouseUp 2109484 nil]
		focusHolder: 	a MenuMorph(352845824)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	514@569 corner: 530@585
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(186646528)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[481@369 514@569 mouseMove 2109612 nil]
		targetOffset: 	51@2
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2109612 481 370 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[481@369 mouseUp 2109484 nil]
	Receiver's instance variables: 
		bounds: 	514@569 corner: 530@585
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(186646528)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[481@369 514@569 mouseMove 2109612 nil]
		targetOffset: 	51@2
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2109612 481 370 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[481@369 mouseUp 2109484 nil]
		evt: 	[481@369 mouseUp 2109484 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	514@569 corner: 530@585
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(186646528)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[481@369 514@569 mouseMove 2109612 nil]
		targetOffset: 	51@2
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2109612 481 370 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil



--- The full stack ---
Trait(Object)>>error:
Band(Artist)>>addToJury:
SoloCategory(Category)>>addJuryMember:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Jury members must be solo artists
13 January 2012 11:54:46 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

Trait(Object)>>error:
	Receiver: TOutput
	Arguments and temporary variables: 
		aString: 	'Jury members must be solo artists'
	Receiver's instance variables: 
		methodDict: 	a MethodDictionary(#error:->(TOutput>>#error: "a CompiledMethod(680...etc...
		traitComposition: 	{}
		localSelectors: 	nil
		users: 	an IdentitySet(Artist Category)
		organization: 	('as yet unclassified' error: notice:)

		name: 	#TOutput
		environment: 	a SystemDictionary(lots of globals)
		classTrait: 	TOutput classTrait
		category: 	#POOL


Band(Artist)>>addToJury:
	Receiver: a Band
	Arguments and temporary variables: 
		category: 	a SoloCategory
	Receiver's instance variables: 
		activeSince: 	1990
		awardsWon: 	nil
		artistName: 	'Clement Peerens Explosition'
		members: 	a Bag(a Solo a Solo)


SoloCategory(Category)>>addJuryMember:
	Receiver: a SoloCategory
	Arguments and temporary variables: 
		anArtist: 	a Band
	Receiver's instance variables: 
		nominees: 	a LinkedList(a Solo a Band a Solo)
		jury: 	a LinkedList(a Solo)
		awardName: 	'Best male singer'
		votes: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		hetfield: 	a Solo
		ulrich: 	a Solo
		hammett: 	a Solo
		trujillo: 	a Solo
		metallica: 	a Band
		martin: 	a Solo
		fakefigures: 	a Band
		awardBestMaleSinger: 	a SoloCategory
		awardBestNewcomerBand: 	nil
		ceremony: 	a Ceremony
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(824180736)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 4831)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 4831)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 979@1122
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 979@1122
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 2227200) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 4831)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 4831)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#inspectIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(110362624)'Inspect it (i)'
	Arguments and temporary variables: 
		evt: 	[622@402 mouseUp 2228820 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	574@389 corner: 711@407
		owner: 	a MenuMorph(1014235136)
		submorphs: 	#()
		fullBounds: 	574@389 corner: 711@407
		color: 	Color black
		extension: 	a MorphExtension (120586240)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it (i)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(110362624)'Inspect it (i)'
	Arguments and temporary variables: 
		evt: 	[622@402 mouseUp 2228820 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	574@389 corner: 711@407
		owner: 	a MenuMorph(1014235136)
		submorphs: 	#()
		fullBounds: 	574@389 corner: 711@407
		color: 	Color black
		extension: 	a MorphExtension (120586240)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it (i)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(110362624)'Inspect it (i)'
	Arguments and temporary variables: 
		evt: 	[622@402 mouseUp 2228820 nil]
	Receiver's instance variables: 
		bounds: 	574@389 corner: 711@407
		owner: 	a MenuMorph(1014235136)
		submorphs: 	#()
		fullBounds: 	574@389 corner: 711@407
		color: 	Color black
		extension: 	a MorphExtension (120586240)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it (i)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(110362624)'Inspect it (i)'
	Arguments and temporary variables: 
		anEvent: 	[622@402 mouseUp 2228820 nil]
	Receiver's instance variables: 
		bounds: 	574@389 corner: 711@407
		owner: 	a MenuMorph(1014235136)
		submorphs: 	#()
		fullBounds: 	574@389 corner: 711@407
		color: 	Color black
		extension: 	a MorphExtension (120586240)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it (i)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [622@402 mouseUp 2228820 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(110362624)'Inspect it (i)'
	Receiver's instance variables: 
		timeStamp: 	2228820
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	622@402
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(110362624)'Inspect it (i)'
	Arguments and temporary variables: 
		anEvent: 	[622@402 mouseUp 2228820 nil]
	Receiver's instance variables: 
		bounds: 	574@389 corner: 711@407
		owner: 	a MenuMorph(1014235136)
		submorphs: 	#()
		fullBounds: 	574@389 corner: 711@407
		color: 	Color black
		extension: 	a MorphExtension (120586240)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it (i)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[622@402 mouseUp 2228820 nil]
		aMorph: 	a ToggleMenuItemMorph(110362624)'Inspect it (i)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[622@402 mouseUp 2228820 nil]
		aMorph: 	a ToggleMenuItemMorph(110362624)'Inspect it (i)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(110362624)'Inspect it (i)'
	Arguments and temporary variables: 
		anEvent: 	[622@402 mouseUp 2228820 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	574@389 corner: 711@407
		owner: 	a MenuMorph(1014235136)
		submorphs: 	#()
		fullBounds: 	574@389 corner: 711@407
		color: 	Color black
		extension: 	a MorphExtension (120586240)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it (i)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[622@402 mouseUp 2228820 nil]
		aMorph: 	a MenuMorph(1014235136)
		localEvt: 	[622@402 mouseUp 2228820 nil]
		index: 	3
		child: 	a ToggleMenuItemMorph(110362624)'Inspect it (i)'
		morphs: 	an Array(a ToggleMenuItemMorph(1021313024)'Do it (d)' a ToggleMenuItemM...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[622@402 mouseUp 2228820 nil]
		aMorph: 	a MenuMorph(1014235136)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(1014235136)
	Arguments and temporary variables: 
		anEvent: 	[622@402 mouseUp 2228820 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	569@346 corner: 716@693
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1021313024)'Do it (d)' a ToggleMenuIt...etc...
		fullBounds: 	569@346 corner: 716@693
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (1029177344) [other:  (basicColor -> (Color r: 0.74...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(110362624)'Inspect it (i)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(1021313024)'Do it (d)' a ...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(1014235136)
	Arguments and temporary variables: 
		anEvent: 	[622@402 mouseUp 2228820 nil]
	Receiver's instance variables: 
		bounds: 	569@346 corner: 716@693
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1021313024)'Do it (d)' a ToggleMenuIt...etc...
		fullBounds: 	569@346 corner: 716@693
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (1029177344) [other:  (basicColor -> (Color r: 0.74...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(110362624)'Inspect it (i)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(1021313024)'Do it (d)' a ...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(1014235136)
	Arguments and temporary variables: 
		evt: 	[622@402 mouseUp 2228820 nil]
	Receiver's instance variables: 
		bounds: 	569@346 corner: 716@693
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1021313024)'Do it (d)' a ToggleMenuIt...etc...
		fullBounds: 	569@346 corner: 716@693
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (1029177344) [other:  (basicColor -> (Color r: 0.74...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(110362624)'Inspect it (i)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(1021313024)'Do it (d)' a ...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[622@402 mouseUp 2228820 nil]
		focusHolder: 	a MenuMorph(1014235136)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	526@683 corner: 542@699
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(673710080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[622@402 526@683 mouseMove 2229468 nil]
		targetOffset: 	48@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2229468 622 405 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(363593728) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[622@402 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(363593728) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[622@402 mouseUp 2228820 nil]
		focusHolder: 	a MenuMorph(1014235136)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	526@683 corner: 542@699
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(673710080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[622@402 526@683 mouseMove 2229468 nil]
		targetOffset: 	48@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2229468 622 405 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[622@402 mouseUp 2228820 nil]
		focusHolder: 	a MenuMorph(1014235136)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	526@683 corner: 542@699
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(673710080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[622@402 526@683 mouseMove 2229468 nil]
		targetOffset: 	48@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2229468 622 405 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[622@402 mouseUp 2228820 nil]
	Receiver's instance variables: 
		bounds: 	526@683 corner: 542@699
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(673710080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[622@402 526@683 mouseMove 2229468 nil]
		targetOffset: 	48@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2229468 622 405 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[622@402 mouseUp 2228820 nil]
		evt: 	[622@402 mouseUp 2228820 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	526@683 corner: 542@699
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(673710080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[622@402 526@683 mouseMove 2229468 nil]
		targetOffset: 	48@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2229468 622 405 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[622@402 mouseUp 2228820 nil]
		evtBuf: 	#(1 2228820 622 402 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	526@683 corner: 542@699
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(673710080)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[622@402 526@683 mouseMove 2229468 nil]
		targetOffset: 	48@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2229468 622 405 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil



--- The full stack ---
Trait(Object)>>error:
Band(Artist)>>addToJury:
SoloCategory(Category)>>addJuryMember:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "includes:" is nil
13 January 2012 11:55:40 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #includes:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	includes: a Vote
		exception: 	MessageNotUnderstood: receiver of "includes:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

SoloCategory(Category)>>vote:by:
	Receiver: a SoloCategory
	Arguments and temporary variables: 
		aVotee: 	a Solo
		aVoter: 	a Solo
		vote: 	a Vote
	Receiver's instance variables: 
		nominees: 	a LinkedList(a Solo a Band a Solo)
		jury: 	a LinkedList(a Solo)
		awardName: 	'Best male singer'
		votes: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		hetfield: 	a Solo
		ulrich: 	a Solo
		hammett: 	a Solo
		trujillo: 	a Solo
		metallica: 	a Band
		martin: 	a Solo
		fakefigures: 	a Band
		awardBestMaleSinger: 	a SoloCategory
		awardBestNewcomerBand: 	nil
		ceremony: 	a Ceremony
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(258736128)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 4831)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 4831)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 979@1122
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 979@1122
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 2282542) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 4831)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 4831)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(301465600)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[508@376 mouseUp 2282828 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	464@367 corner: 601@385
		owner: 	a MenuMorph(294387712)
		submorphs: 	#()
		fullBounds: 	464@367 corner: 601@385
		color: 	Color black
		extension: 	a MorphExtension (311689216)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(301465600)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[508@376 mouseUp 2282828 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	464@367 corner: 601@385
		owner: 	a MenuMorph(294387712)
		submorphs: 	#()
		fullBounds: 	464@367 corner: 601@385
		color: 	Color black
		extension: 	a MorphExtension (311689216)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(301465600)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[508@376 mouseUp 2282828 nil]
	Receiver's instance variables: 
		bounds: 	464@367 corner: 601@385
		owner: 	a MenuMorph(294387712)
		submorphs: 	#()
		fullBounds: 	464@367 corner: 601@385
		color: 	Color black
		extension: 	a MorphExtension (311689216)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(301465600)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[508@376 mouseUp 2282828 nil]
	Receiver's instance variables: 
		bounds: 	464@367 corner: 601@385
		owner: 	a MenuMorph(294387712)
		submorphs: 	#()
		fullBounds: 	464@367 corner: 601@385
		color: 	Color black
		extension: 	a MorphExtension (311689216)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [508@376 mouseUp 2282828 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(301465600)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	2282828
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	508@376
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(301465600)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[508@376 mouseUp 2282828 nil]
	Receiver's instance variables: 
		bounds: 	464@367 corner: 601@385
		owner: 	a MenuMorph(294387712)
		submorphs: 	#()
		fullBounds: 	464@367 corner: 601@385
		color: 	Color black
		extension: 	a MorphExtension (311689216)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[508@376 mouseUp 2282828 nil]
		aMorph: 	a ToggleMenuItemMorph(301465600)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[508@376 mouseUp 2282828 nil]
		aMorph: 	a ToggleMenuItemMorph(301465600)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(301465600)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[508@376 mouseUp 2282828 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	464@367 corner: 601@385
		owner: 	a MenuMorph(294387712)
		submorphs: 	#()
		fullBounds: 	464@367 corner: 601@385
		color: 	Color black
		extension: 	a MorphExtension (311689216)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[508@376 mouseUp 2282828 nil]
		aMorph: 	a MenuMorph(294387712)
		localEvt: 	[508@376 mouseUp 2282828 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(301465600)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(301465600)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[508@376 mouseUp 2282828 nil]
		aMorph: 	a MenuMorph(294387712)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(294387712)
	Arguments and temporary variables: 
		anEvent: 	[508@376 mouseUp 2282828 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	459@362 corner: 606@709
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(301465600)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	459@362 corner: 606@709
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (309329920) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(301465600)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(301465600)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(294387712)
	Arguments and temporary variables: 
		anEvent: 	[508@376 mouseUp 2282828 nil]
	Receiver's instance variables: 
		bounds: 	459@362 corner: 606@709
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(301465600)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	459@362 corner: 606@709
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (309329920) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(301465600)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(301465600)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(294387712)
	Arguments and temporary variables: 
		evt: 	[508@376 mouseUp 2282828 nil]
	Receiver's instance variables: 
		bounds: 	459@362 corner: 606@709
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(301465600)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	459@362 corner: 606@709
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (309329920) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(301465600)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(301465600)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[508@376 mouseUp 2282828 nil]
		focusHolder: 	a MenuMorph(294387712)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	499@593 corner: 515@609
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(148373504)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[508@376 499@593 mouseMove 2283168 nil]
		targetOffset: 	44@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2283168 508 377 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(908853248) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[508@376 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(908853248) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[508@376 mouseUp 2282828 nil]
		focusHolder: 	a MenuMorph(294387712)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	499@593 corner: 515@609
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(148373504)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[508@376 499@593 mouseMove 2283168 nil]
		targetOffset: 	44@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2283168 508 377 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[508@376 mouseUp 2282828 nil]
		focusHolder: 	a MenuMorph(294387712)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	499@593 corner: 515@609
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(148373504)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[508@376 499@593 mouseMove 2283168 nil]
		targetOffset: 	44@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2283168 508 377 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[508@376 mouseUp 2282828 nil]
	Receiver's instance variables: 
		bounds: 	499@593 corner: 515@609
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(148373504)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[508@376 499@593 mouseMove 2283168 nil]
		targetOffset: 	44@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2283168 508 377 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[508@376 mouseUp 2282828 nil]
		evt: 	[508@376 mouseUp 2282828 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	499@593 corner: 515@609
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(148373504)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[508@376 499@593 mouseMove 2283168 nil]
		targetOffset: 	44@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2283168 508 377 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[508@376 mouseUp 2282828 nil]
		evtBuf: 	#(1 2282828 508 376 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	499@593 corner: 515@609
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(148373504)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[508@376 499@593 mouseMove 2283168 nil]
		targetOffset: 	44@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2283168 508 377 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #includes:
SoloCategory(Category)>>vote:by:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Solo class>>artistName:
14 January 2012 12:41:36 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

Solo class(Object)>>doesNotUnderstand: #artistName:
	Receiver: Solo
	Arguments and temporary variables: 
		aMessage: 	artistName: 'Clement Peerens'
		exception: 	MessageNotUnderstood: Solo class>>artistName:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Artist
		methodDict: 	a MethodDictionary(#addToJury:->(Solo>>#addToJury: "a CompiledMetho...etc...
		format: 	136
		instanceVariables: 	nil
		organization: 	('accessing' awardsWon)
('as yet unclassified' addToJury:)

		subclasses: 	nil
		name: 	#Solo
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#POOL
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	nil
		sylvain: 	nil
		cpex: 	nil
		hetfield: 	nil
		ulrich: 	nil
		hammett: 	nil
		trujillo: 	nil
		metallica: 	nil
		martin: 	nil
		fakefigures: 	nil
		awardBestMaleSinger: 	nil
		awardBestNewcomerBand: 	nil
		ceremony: 	nil
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(306184192)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1958)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1958)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 979@706
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 979@706
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 5039144) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1958)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1958)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(386400256)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[661@304 mouseUp 5039252 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	639@291 corner: 776@309
		owner: 	a MenuMorph(330301440)
		submorphs: 	#()
		fullBounds: 	639@291 corner: 776@309
		color: 	Color black
		extension: 	a MorphExtension (396623872)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(386400256)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[661@304 mouseUp 5039252 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	639@291 corner: 776@309
		owner: 	a MenuMorph(330301440)
		submorphs: 	#()
		fullBounds: 	639@291 corner: 776@309
		color: 	Color black
		extension: 	a MorphExtension (396623872)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(386400256)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[661@304 mouseUp 5039252 nil]
	Receiver's instance variables: 
		bounds: 	639@291 corner: 776@309
		owner: 	a MenuMorph(330301440)
		submorphs: 	#()
		fullBounds: 	639@291 corner: 776@309
		color: 	Color black
		extension: 	a MorphExtension (396623872)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(386400256)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[661@304 mouseUp 5039252 nil]
	Receiver's instance variables: 
		bounds: 	639@291 corner: 776@309
		owner: 	a MenuMorph(330301440)
		submorphs: 	#()
		fullBounds: 	639@291 corner: 776@309
		color: 	Color black
		extension: 	a MorphExtension (396623872)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [661@304 mouseUp 5039252 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(386400256)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	5039252
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	661@304
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(386400256)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[661@304 mouseUp 5039252 nil]
	Receiver's instance variables: 
		bounds: 	639@291 corner: 776@309
		owner: 	a MenuMorph(330301440)
		submorphs: 	#()
		fullBounds: 	639@291 corner: 776@309
		color: 	Color black
		extension: 	a MorphExtension (396623872)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[661@304 mouseUp 5039252 nil]
		aMorph: 	a ToggleMenuItemMorph(386400256)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[661@304 mouseUp 5039252 nil]
		aMorph: 	a ToggleMenuItemMorph(386400256)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(386400256)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[661@304 mouseUp 5039252 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	639@291 corner: 776@309
		owner: 	a MenuMorph(330301440)
		submorphs: 	#()
		fullBounds: 	639@291 corner: 776@309
		color: 	Color black
		extension: 	a MorphExtension (396623872)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[661@304 mouseUp 5039252 nil]
		aMorph: 	a MenuMorph(330301440)
		localEvt: 	[661@304 mouseUp 5039252 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(386400256)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(386400256)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[661@304 mouseUp 5039252 nil]
		aMorph: 	a MenuMorph(330301440)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(330301440)
	Arguments and temporary variables: 
		anEvent: 	[661@304 mouseUp 5039252 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	634@286 corner: 781@633
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(386400256)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	634@286 corner: 781@633
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (345243648) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(386400256)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(386400256)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(330301440)
	Arguments and temporary variables: 
		anEvent: 	[661@304 mouseUp 5039252 nil]
	Receiver's instance variables: 
		bounds: 	634@286 corner: 781@633
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(386400256)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	634@286 corner: 781@633
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (345243648) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(386400256)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(386400256)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(330301440)
	Arguments and temporary variables: 
		evt: 	[661@304 mouseUp 5039252 nil]
	Receiver's instance variables: 
		bounds: 	634@286 corner: 781@633
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(386400256)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	634@286 corner: 781@633
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (345243648) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(386400256)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(386400256)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[661@304 mouseUp 5039252 nil]
		focusHolder: 	a MenuMorph(330301440)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	661@304 corner: 677@320
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	661@304 corner: 677@320
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(205258752)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[661@304 mouseUp 5039252 nil]
		targetOffset: 	22@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5039252 661 304 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(195297280) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[661@304 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(195297280) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[661@304 mouseUp 5039252 nil]
		focusHolder: 	a MenuMorph(330301440)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	661@304 corner: 677@320
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	661@304 corner: 677@320
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(205258752)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[661@304 mouseUp 5039252 nil]
		targetOffset: 	22@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5039252 661 304 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[661@304 mouseUp 5039252 nil]
		focusHolder: 	a MenuMorph(330301440)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	661@304 corner: 677@320
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	661@304 corner: 677@320
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(205258752)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[661@304 mouseUp 5039252 nil]
		targetOffset: 	22@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5039252 661 304 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[661@304 mouseUp 5039252 nil]
	Receiver's instance variables: 
		bounds: 	661@304 corner: 677@320
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	661@304 corner: 677@320
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(205258752)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[661@304 mouseUp 5039252 nil]
		targetOffset: 	22@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5039252 661 304 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[661@304 mouseUp 5039252 nil]
		evt: 	[661@304 mouseUp 5039252 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	661@304 corner: 677@320
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	661@304 corner: 677@320
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(205258752)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[661@304 mouseUp 5039252 nil]
		targetOffset: 	22@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5039252 661 304 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[661@304 mouseUp 5039252 nil]
		evtBuf: 	#(1 5039252 661 304 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	661@304 corner: 677@320
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	661@304 corner: 677@320
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(205258752)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[661@304 mouseUp 5039252 nil]
		targetOffset: 	22@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5039252 661 304 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1280@727
		canvas: 	a FormCanvas on: DisplayScreen(1280x727x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(195297280))(a PreDebu...etc...
		lastStepTime: 	5039252
		lastStepMessage: 	nil
		lastCycleTime: 	5039294
		alarms: 	a Heap()
		lastAlarmTime: 	5039252
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
Solo class(Object)>>doesNotUnderstand: #artistName:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Solo class>>artistName:activeSince:
14 January 2012 12:42:31 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

Solo class(Object)>>doesNotUnderstand: #artistName:activeSince:
	Receiver: Solo
	Arguments and temporary variables: 
		aMessage: 	artistName: 'Clement Peerens' activeSince: 1985
		exception: 	MessageNotUnderstood: Solo class>>artistName:activeSince:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Artist
		methodDict: 	a MethodDictionary(#addToJury:->(Solo>>#addToJury: "a CompiledMetho...etc...
		format: 	136
		instanceVariables: 	nil
		organization: 	('accessing' awardsWon)
('as yet unclassified' addToJury:)

		subclasses: 	nil
		name: 	#Solo
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#POOL
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	nil
		sylvain: 	nil
		cpex: 	nil
		hetfield: 	nil
		ulrich: 	nil
		hammett: 	nil
		trujillo: 	nil
		metallica: 	nil
		martin: 	nil
		fakefigures: 	nil
		awardBestMaleSinger: 	nil
		awardBestNewcomerBand: 	nil
		ceremony: 	nil
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(458489856)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | 
selectionInterval := oldEditor selectionInterval.
	textMorp...etc...
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[(oldEditor := textMorph editor)
		evaluateSelectionAndDo: [:result | 
			selectionInterval := oldEditor selectionInterval.
			textMorph installEditorToReplace: oldEditor.
			textMorph
				handleEdit: [oldEditor afterSelectionInsertAndSelect: result printString].
			selectionInterval := oldEditor selectionInterval.
			textMorph editor selectFrom: selectionInterval first to: selectionInterval last.
			self scrollSelectionIntoView]] in PluggableTextMorph>>printIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		oldEditor: 	an Array(a SmalltalkEditor)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1948)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[(oldEditor := textMorph editor)
		evaluateSelectionAndDo: [:result ...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 979@706
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 979@706
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 5093962) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>printIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		oldEditor: 	an Array(a SmalltalkEditor)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1948)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#printIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(431751168)'Print it (p)'
	Arguments and temporary variables: 
		evt: 	[420@316 mouseUp 5093972 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	395@316 corner: 532@334
		owner: 	a MenuMorph(341311488)
		submorphs: 	#()
		fullBounds: 	395@316 corner: 532@334
		color: 	Color black
		extension: 	a MorphExtension (441974784)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Print it (p)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#printIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(431751168)'Print it (p)'
	Arguments and temporary variables: 
		evt: 	[420@316 mouseUp 5093972 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	395@316 corner: 532@334
		owner: 	a MenuMorph(341311488)
		submorphs: 	#()
		fullBounds: 	395@316 corner: 532@334
		color: 	Color black
		extension: 	a MorphExtension (441974784)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Print it (p)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#printIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(431751168)'Print it (p)'
	Arguments and temporary variables: 
		evt: 	[420@316 mouseUp 5093972 nil]
	Receiver's instance variables: 
		bounds: 	395@316 corner: 532@334
		owner: 	a MenuMorph(341311488)
		submorphs: 	#()
		fullBounds: 	395@316 corner: 532@334
		color: 	Color black
		extension: 	a MorphExtension (441974784)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Print it (p)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#printIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(431751168)'Print it (p)'
	Arguments and temporary variables: 
		anEvent: 	[420@316 mouseUp 5093972 nil]
	Receiver's instance variables: 
		bounds: 	395@316 corner: 532@334
		owner: 	a MenuMorph(341311488)
		submorphs: 	#()
		fullBounds: 	395@316 corner: 532@334
		color: 	Color black
		extension: 	a MorphExtension (441974784)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Print it (p)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#printIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [420@316 mouseUp 5093972 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(431751168)'Print it (p)'
	Receiver's instance variables: 
		timeStamp: 	5093972
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	420@316
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(431751168)'Print it (p)'
	Arguments and temporary variables: 
		anEvent: 	[420@316 mouseUp 5093972 nil]
	Receiver's instance variables: 
		bounds: 	395@316 corner: 532@334
		owner: 	a MenuMorph(341311488)
		submorphs: 	#()
		fullBounds: 	395@316 corner: 532@334
		color: 	Color black
		extension: 	a MorphExtension (441974784)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Print it (p)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#printIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[420@316 mouseUp 5093972 nil]
		aMorph: 	a ToggleMenuItemMorph(431751168)'Print it (p)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[420@316 mouseUp 5093972 nil]
		aMorph: 	a ToggleMenuItemMorph(431751168)'Print it (p)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(431751168)'Print it (p)'
	Arguments and temporary variables: 
		anEvent: 	[420@316 mouseUp 5093972 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	395@316 corner: 532@334
		owner: 	a MenuMorph(341311488)
		submorphs: 	#()
		fullBounds: 	395@316 corner: 532@334
		color: 	Color black
		extension: 	a MorphExtension (441974784)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Print it (p)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#printIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[420@316 mouseUp 5093972 nil]
		aMorph: 	a MenuMorph(341311488)
		localEvt: 	[420@316 mouseUp 5093972 nil]
		index: 	2
		child: 	a ToggleMenuItemMorph(431751168)'Print it (p)'
		morphs: 	an Array(a ToggleMenuItemMorph(348389376)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[420@316 mouseUp 5093972 nil]
		aMorph: 	a MenuMorph(341311488)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(341311488)
	Arguments and temporary variables: 
		anEvent: 	[420@316 mouseUp 5093972 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	390@292 corner: 537@639
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(348389376)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	390@292 corner: 537@639
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (356253696) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(431751168)'Print it (p)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(348389376)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(341311488)
	Arguments and temporary variables: 
		anEvent: 	[420@316 mouseUp 5093972 nil]
	Receiver's instance variables: 
		bounds: 	390@292 corner: 537@639
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(348389376)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	390@292 corner: 537@639
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (356253696) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(431751168)'Print it (p)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(348389376)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(341311488)
	Arguments and temporary variables: 
		evt: 	[420@316 mouseUp 5093972 nil]
	Receiver's instance variables: 
		bounds: 	390@292 corner: 537@639
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(348389376)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	390@292 corner: 537@639
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (356253696) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(431751168)'Print it (p)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(348389376)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[420@316 mouseUp 5093972 nil]
		focusHolder: 	a MenuMorph(341311488)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	420@314 corner: 436@330
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	420@314 corner: 436@330
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(755499008)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[420@316 420@314 mouseMove 5093980 nil]
		targetOffset: 	24@0
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5093980 420 315 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(442236928) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[420@316 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(442236928) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[420@316 mouseUp 5093972 nil]
		focusHolder: 	a MenuMorph(341311488)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	420@314 corner: 436@330
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	420@314 corner: 436@330
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(755499008)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[420@316 420@314 mouseMove 5093980 nil]
		targetOffset: 	24@0
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5093980 420 315 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[420@316 mouseUp 5093972 nil]
		focusHolder: 	a MenuMorph(341311488)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	420@314 corner: 436@330
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	420@314 corner: 436@330
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(755499008)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[420@316 420@314 mouseMove 5093980 nil]
		targetOffset: 	24@0
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5093980 420 315 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[420@316 mouseUp 5093972 nil]
	Receiver's instance variables: 
		bounds: 	420@314 corner: 436@330
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	420@314 corner: 436@330
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(755499008)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[420@316 420@314 mouseMove 5093980 nil]
		targetOffset: 	24@0
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5093980 420 315 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[420@316 mouseUp 5093972 nil]
		evt: 	[420@316 mouseUp 5093972 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	420@314 corner: 436@330
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	420@314 corner: 436@330
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(755499008)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[420@316 420@314 mouseMove 5093980 nil]
		targetOffset: 	24@0
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5093980 420 315 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[420@316 mouseUp 5093972 nil]
		evtBuf: 	#(1 5093972 420 316 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	420@314 corner: 436@330
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	420@314 corner: 436@330
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(755499008)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[420@316 420@314 mouseMove 5093980 nil]
		targetOffset: 	24@0
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5093980 420 315 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1280@727
		canvas: 	a FormCanvas on: DisplayScreen(1280x727x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(243793920))(an Ove...etc...
		lastStepTime: 	5093980
		lastStepMessage: 	nil
		lastCycleTime: 	5094026
		alarms: 	a Heap()
		lastAlarmTime: 	5093980
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1280@727
		canvas: 	a FormCanvas on: DisplayScreen(1280x727x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(243793920))(an Ove...etc...
		lastStepTime: 	5093980
		lastStepMessage: 	nil
		lastCycleTime: 	5094026
		alarms: 	a Heap()
		lastAlarmTime: 	5093980
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1280@727
		canvas: 	a FormCanvas on: DisplayScreen(1280x727x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(243793920))(an Ove...etc...
		lastStepTime: 	5093980
		lastStepMessage: 	nil
		lastCycleTime: 	5094026
		alarms: 	a Heap()
		lastAlarmTime: 	5093980
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
Solo class(Object)>>doesNotUnderstand: #artistName:activeSince:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[(oldEditor := textMorph editor)
		evaluateSelectionAndDo: [:result | 
			selectionInterval := oldEditor selectionInterval.
			textMorph installEditorToReplace: oldEditor.
			textMorph
				handleEdit: [oldEditor afterSelectionInsertAndSelect: result printString].
			selectionInterval := oldEditor selectionInterval.
			textMorph editor selectFrom: selectionInterval first to: selectionInterval last.
			self scrollSelectionIntoView]] in PluggableTextMorph>>printIt
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>printIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Solo class>>artistName:activeSince:
14 January 2012 12:42:34 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

Solo class(Object)>>doesNotUnderstand: #artistName:activeSince:
	Receiver: Solo
	Arguments and temporary variables: 
		aMessage: 	artistName: 'Clement Peerens' activeSince: 1985
		exception: 	MessageNotUnderstood: Solo class>>artistName:activeSince:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Artist
		methodDict: 	a MethodDictionary(#addToJury:->(Solo>>#addToJury: "a CompiledMetho...etc...
		format: 	136
		instanceVariables: 	nil
		organization: 	('accessing' awardsWon)
('as yet unclassified' addToJury:)

		subclasses: 	nil
		name: 	#Solo
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#POOL
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	nil
		sylvain: 	nil
		cpex: 	nil
		hetfield: 	nil
		ulrich: 	nil
		hammett: 	nil
		trujillo: 	nil
		metallica: 	nil
		martin: 	nil
		fakefigures: 	nil
		awardBestMaleSinger: 	nil
		awardBestNewcomerBand: 	nil
		ceremony: 	nil
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(226230272)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1948)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1948)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 979@706
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 979@706
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 5097340) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1948)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1948)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(1029701632)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[269@223 mouseUp 5097412 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	252@216 corner: 389@234
		owner: 	a MenuMorph(1022623744)
		submorphs: 	#()
		fullBounds: 	252@216 corner: 389@234
		color: 	Color black
		extension: 	a MorphExtension (1039925248)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(1029701632)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[269@223 mouseUp 5097412 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	252@216 corner: 389@234
		owner: 	a MenuMorph(1022623744)
		submorphs: 	#()
		fullBounds: 	252@216 corner: 389@234
		color: 	Color black
		extension: 	a MorphExtension (1039925248)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(1029701632)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[269@223 mouseUp 5097412 nil]
	Receiver's instance variables: 
		bounds: 	252@216 corner: 389@234
		owner: 	a MenuMorph(1022623744)
		submorphs: 	#()
		fullBounds: 	252@216 corner: 389@234
		color: 	Color black
		extension: 	a MorphExtension (1039925248)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(1029701632)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[269@223 mouseUp 5097412 nil]
	Receiver's instance variables: 
		bounds: 	252@216 corner: 389@234
		owner: 	a MenuMorph(1022623744)
		submorphs: 	#()
		fullBounds: 	252@216 corner: 389@234
		color: 	Color black
		extension: 	a MorphExtension (1039925248)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [269@223 mouseUp 5097412 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(1029701632)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	5097412
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	269@223
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(1029701632)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[269@223 mouseUp 5097412 nil]
	Receiver's instance variables: 
		bounds: 	252@216 corner: 389@234
		owner: 	a MenuMorph(1022623744)
		submorphs: 	#()
		fullBounds: 	252@216 corner: 389@234
		color: 	Color black
		extension: 	a MorphExtension (1039925248)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[269@223 mouseUp 5097412 nil]
		aMorph: 	a ToggleMenuItemMorph(1029701632)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[269@223 mouseUp 5097412 nil]
		aMorph: 	a ToggleMenuItemMorph(1029701632)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(1029701632)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[269@223 mouseUp 5097412 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	252@216 corner: 389@234
		owner: 	a MenuMorph(1022623744)
		submorphs: 	#()
		fullBounds: 	252@216 corner: 389@234
		color: 	Color black
		extension: 	a MorphExtension (1039925248)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[269@223 mouseUp 5097412 nil]
		aMorph: 	a MenuMorph(1022623744)
		localEvt: 	[269@223 mouseUp 5097412 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(1029701632)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(1029701632)'Do it (d)' a ToggleMenuItemM...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[269@223 mouseUp 5097412 nil]
		aMorph: 	a MenuMorph(1022623744)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(1022623744)
	Arguments and temporary variables: 
		anEvent: 	[269@223 mouseUp 5097412 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	247@211 corner: 394@558
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1029701632)'Do it (d)' a ToggleMenuIt...etc...
		fullBounds: 	247@211 corner: 394@558
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (1037565952) [other:  (basicColor -> (Color r: 0.74...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(1029701632)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(1029701632)'Do it (d)' a ...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(1022623744)
	Arguments and temporary variables: 
		anEvent: 	[269@223 mouseUp 5097412 nil]
	Receiver's instance variables: 
		bounds: 	247@211 corner: 394@558
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1029701632)'Do it (d)' a ToggleMenuIt...etc...
		fullBounds: 	247@211 corner: 394@558
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (1037565952) [other:  (basicColor -> (Color r: 0.74...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(1029701632)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(1029701632)'Do it (d)' a ...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(1022623744)
	Arguments and temporary variables: 
		evt: 	[269@223 mouseUp 5097412 nil]
	Receiver's instance variables: 
		bounds: 	247@211 corner: 394@558
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1029701632)'Do it (d)' a ToggleMenuIt...etc...
		fullBounds: 	247@211 corner: 394@558
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (1037565952) [other:  (basicColor -> (Color r: 0.74...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(1029701632)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(1029701632)'Do it (d)' a ...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[269@223 mouseUp 5097412 nil]
		focusHolder: 	a MenuMorph(1022623744)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	269@221 corner: 285@237
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	269@221 corner: 285@237
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(229113856)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[269@223 269@221 mouseMove 5097420 nil]
		targetOffset: 	16@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5097420 269 222 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(934805504) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[269@223 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(934805504) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[269@223 mouseUp 5097412 nil]
		focusHolder: 	a MenuMorph(1022623744)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	269@221 corner: 285@237
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	269@221 corner: 285@237
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(229113856)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[269@223 269@221 mouseMove 5097420 nil]
		targetOffset: 	16@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5097420 269 222 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[269@223 mouseUp 5097412 nil]
		focusHolder: 	a MenuMorph(1022623744)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	269@221 corner: 285@237
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	269@221 corner: 285@237
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(229113856)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[269@223 269@221 mouseMove 5097420 nil]
		targetOffset: 	16@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5097420 269 222 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[269@223 mouseUp 5097412 nil]
	Receiver's instance variables: 
		bounds: 	269@221 corner: 285@237
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	269@221 corner: 285@237
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(229113856)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[269@223 269@221 mouseMove 5097420 nil]
		targetOffset: 	16@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5097420 269 222 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[269@223 mouseUp 5097412 nil]
		evt: 	[269@223 mouseUp 5097412 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	269@221 corner: 285@237
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	269@221 corner: 285@237
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(229113856)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[269@223 269@221 mouseMove 5097420 nil]
		targetOffset: 	16@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5097420 269 222 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[269@223 mouseUp 5097412 nil]
		evtBuf: 	#(1 5097412 269 223 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	269@221 corner: 285@237
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	269@221 corner: 285@237
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(229113856)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[269@223 269@221 mouseMove 5097420 nil]
		targetOffset: 	16@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5097420 269 222 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1280@727
		canvas: 	a FormCanvas on: DisplayScreen(1280x727x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(934805504))(a PreDebu...etc...
		lastStepTime: 	5097414
		lastStepMessage: 	nil
		lastCycleTime: 	5097454
		alarms: 	a Heap()
		lastAlarmTime: 	5097414
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
Solo class(Object)>>doesNotUnderstand: #artistName:activeSince:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Solo class>>artistName:activeSince:
14 January 2012 12:42:41 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

Solo class(Object)>>doesNotUnderstand: #artistName:activeSince:
	Receiver: Solo
	Arguments and temporary variables: 
		aMessage: 	artistName: 'Clement Peerens' activeSince: 1985
		exception: 	MessageNotUnderstood: Solo class>>artistName:activeSince:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Artist
		methodDict: 	a MethodDictionary(#addToJury:->(Solo>>#addToJury: "a CompiledMetho...etc...
		format: 	136
		instanceVariables: 	nil
		organization: 	('accessing' awardsWon)
('as yet unclassified' addToJury:)

		subclasses: 	nil
		name: 	#Solo
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#POOL
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	nil
		sylvain: 	nil
		cpex: 	nil
		hetfield: 	nil
		ulrich: 	nil
		hammett: 	nil
		trujillo: 	nil
		metallica: 	nil
		martin: 	nil
		fakefigures: 	nil
		awardBestMaleSinger: 	nil
		awardBestNewcomerBand: 	nil
		ceremony: 	nil
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(610271232)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1948)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1948)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 979@706
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 979@706
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 5104190) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1948)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1948)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(352845824)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[331@248 mouseUp 5104196 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	322@236 corner: 459@254
		owner: 	a MenuMorph(345767936)
		submorphs: 	#()
		fullBounds: 	322@236 corner: 459@254
		color: 	Color black
		extension: 	a MorphExtension (363069440)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(352845824)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[331@248 mouseUp 5104196 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	322@236 corner: 459@254
		owner: 	a MenuMorph(345767936)
		submorphs: 	#()
		fullBounds: 	322@236 corner: 459@254
		color: 	Color black
		extension: 	a MorphExtension (363069440)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(352845824)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[331@248 mouseUp 5104196 nil]
	Receiver's instance variables: 
		bounds: 	322@236 corner: 459@254
		owner: 	a MenuMorph(345767936)
		submorphs: 	#()
		fullBounds: 	322@236 corner: 459@254
		color: 	Color black
		extension: 	a MorphExtension (363069440)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(352845824)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[331@248 mouseUp 5104196 nil]
	Receiver's instance variables: 
		bounds: 	322@236 corner: 459@254
		owner: 	a MenuMorph(345767936)
		submorphs: 	#()
		fullBounds: 	322@236 corner: 459@254
		color: 	Color black
		extension: 	a MorphExtension (363069440)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [331@248 mouseUp 5104196 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(352845824)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	5104196
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	331@248
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(352845824)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[331@248 mouseUp 5104196 nil]
	Receiver's instance variables: 
		bounds: 	322@236 corner: 459@254
		owner: 	a MenuMorph(345767936)
		submorphs: 	#()
		fullBounds: 	322@236 corner: 459@254
		color: 	Color black
		extension: 	a MorphExtension (363069440)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[331@248 mouseUp 5104196 nil]
		aMorph: 	a ToggleMenuItemMorph(352845824)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[331@248 mouseUp 5104196 nil]
		aMorph: 	a ToggleMenuItemMorph(352845824)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(352845824)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[331@248 mouseUp 5104196 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	322@236 corner: 459@254
		owner: 	a MenuMorph(345767936)
		submorphs: 	#()
		fullBounds: 	322@236 corner: 459@254
		color: 	Color black
		extension: 	a MorphExtension (363069440)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[331@248 mouseUp 5104196 nil]
		aMorph: 	a MenuMorph(345767936)
		localEvt: 	[331@248 mouseUp 5104196 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(352845824)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(352845824)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[331@248 mouseUp 5104196 nil]
		aMorph: 	a MenuMorph(345767936)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(345767936)
	Arguments and temporary variables: 
		anEvent: 	[331@248 mouseUp 5104196 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	317@231 corner: 464@578
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(352845824)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	317@231 corner: 464@578
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (360710144) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(352845824)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(352845824)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(345767936)
	Arguments and temporary variables: 
		anEvent: 	[331@248 mouseUp 5104196 nil]
	Receiver's instance variables: 
		bounds: 	317@231 corner: 464@578
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(352845824)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	317@231 corner: 464@578
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (360710144) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(352845824)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(352845824)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(345767936)
	Arguments and temporary variables: 
		evt: 	[331@248 mouseUp 5104196 nil]
	Receiver's instance variables: 
		bounds: 	317@231 corner: 464@578
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(352845824)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	317@231 corner: 464@578
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (360710144) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(352845824)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(352845824)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[331@248 mouseUp 5104196 nil]
		focusHolder: 	a MenuMorph(345767936)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	331@248 corner: 347@264
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	331@248 corner: 347@264
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(943456256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[331@248 mouseUp 5104196 nil]
		targetOffset: 	9@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5104196 331 248 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(630456320) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[331@248 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(630456320) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[331@248 mouseUp 5104196 nil]
		focusHolder: 	a MenuMorph(345767936)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	331@248 corner: 347@264
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	331@248 corner: 347@264
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(943456256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[331@248 mouseUp 5104196 nil]
		targetOffset: 	9@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5104196 331 248 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[331@248 mouseUp 5104196 nil]
		focusHolder: 	a MenuMorph(345767936)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	331@248 corner: 347@264
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	331@248 corner: 347@264
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(943456256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[331@248 mouseUp 5104196 nil]
		targetOffset: 	9@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5104196 331 248 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[331@248 mouseUp 5104196 nil]
	Receiver's instance variables: 
		bounds: 	331@248 corner: 347@264
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	331@248 corner: 347@264
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(943456256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[331@248 mouseUp 5104196 nil]
		targetOffset: 	9@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5104196 331 248 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[331@248 mouseUp 5104196 nil]
		evt: 	[331@248 mouseUp 5104196 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	331@248 corner: 347@264
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	331@248 corner: 347@264
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(943456256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[331@248 mouseUp 5104196 nil]
		targetOffset: 	9@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5104196 331 248 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[331@248 mouseUp 5104196 nil]
		evtBuf: 	#(1 5104196 331 248 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	331@248 corner: 347@264
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	331@248 corner: 347@264
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(943456256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[331@248 mouseUp 5104196 nil]
		targetOffset: 	9@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5104196 331 248 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1280@727
		canvas: 	a FormCanvas on: DisplayScreen(1280x727x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(243793920))(an Ove...etc...
		lastStepTime: 	5104192
		lastStepMessage: 	nil
		lastCycleTime: 	5104232
		alarms: 	a Heap()
		lastAlarmTime: 	5104192
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
Solo class(Object)>>doesNotUnderstand: #artistName:activeSince:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Solo class>>artistName:activeSince:
14 January 2012 12:43:42 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

Solo class(Object)>>doesNotUnderstand: #artistName:activeSince:
	Receiver: Solo
	Arguments and temporary variables: 
		aMessage: 	artistName: 'Clement Peerens' activeSince: 1985
		exception: 	MessageNotUnderstood: Solo class>>artistName:activeSince:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Artist
		methodDict: 	a MethodDictionary(#addToJury:->(Solo>>#addToJury: "a CompiledMetho...etc...
		format: 	136
		instanceVariables: 	nil
		organization: 	('accessing' awardsWon)
('as yet unclassified' addToJury:)

		subclasses: 	nil
		name: 	#Solo
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#POOL
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	nil
		sylvain: 	nil
		cpex: 	nil
		hetfield: 	nil
		ulrich: 	nil
		hammett: 	nil
		trujillo: 	nil
		metallica: 	nil
		martin: 	nil
		fakefigures: 	nil
		awardBestMaleSinger: 	nil
		awardBestNewcomerBand: 	nil
		ceremony: 	nil
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(505151488)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1948)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1948)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 979@706
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 979@706
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 5164762) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1948)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1948)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(258473984)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[452@229 mouseUp 5165244 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	435@223 corner: 572@241
		owner: 	a MenuMorph(251396096)
		submorphs: 	#()
		fullBounds: 	435@223 corner: 572@241
		color: 	Color black
		extension: 	a MorphExtension (268697600)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(258473984)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[452@229 mouseUp 5165244 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	435@223 corner: 572@241
		owner: 	a MenuMorph(251396096)
		submorphs: 	#()
		fullBounds: 	435@223 corner: 572@241
		color: 	Color black
		extension: 	a MorphExtension (268697600)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(258473984)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[452@229 mouseUp 5165244 nil]
	Receiver's instance variables: 
		bounds: 	435@223 corner: 572@241
		owner: 	a MenuMorph(251396096)
		submorphs: 	#()
		fullBounds: 	435@223 corner: 572@241
		color: 	Color black
		extension: 	a MorphExtension (268697600)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(258473984)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[452@229 mouseUp 5165244 nil]
	Receiver's instance variables: 
		bounds: 	435@223 corner: 572@241
		owner: 	a MenuMorph(251396096)
		submorphs: 	#()
		fullBounds: 	435@223 corner: 572@241
		color: 	Color black
		extension: 	a MorphExtension (268697600)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [452@229 mouseUp 5165244 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(258473984)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	5165244
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	452@229
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(258473984)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[452@229 mouseUp 5165244 nil]
	Receiver's instance variables: 
		bounds: 	435@223 corner: 572@241
		owner: 	a MenuMorph(251396096)
		submorphs: 	#()
		fullBounds: 	435@223 corner: 572@241
		color: 	Color black
		extension: 	a MorphExtension (268697600)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[452@229 mouseUp 5165244 nil]
		aMorph: 	a ToggleMenuItemMorph(258473984)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[452@229 mouseUp 5165244 nil]
		aMorph: 	a ToggleMenuItemMorph(258473984)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(258473984)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[452@229 mouseUp 5165244 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	435@223 corner: 572@241
		owner: 	a MenuMorph(251396096)
		submorphs: 	#()
		fullBounds: 	435@223 corner: 572@241
		color: 	Color black
		extension: 	a MorphExtension (268697600)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[452@229 mouseUp 5165244 nil]
		aMorph: 	a MenuMorph(251396096)
		localEvt: 	[452@229 mouseUp 5165244 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(258473984)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(258473984)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[452@229 mouseUp 5165244 nil]
		aMorph: 	a MenuMorph(251396096)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(251396096)
	Arguments and temporary variables: 
		anEvent: 	[452@229 mouseUp 5165244 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	430@218 corner: 577@565
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(258473984)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	430@218 corner: 577@565
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (266338304) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(258473984)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(258473984)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(251396096)
	Arguments and temporary variables: 
		anEvent: 	[452@229 mouseUp 5165244 nil]
	Receiver's instance variables: 
		bounds: 	430@218 corner: 577@565
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(258473984)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	430@218 corner: 577@565
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (266338304) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(258473984)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(258473984)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(251396096)
	Arguments and temporary variables: 
		evt: 	[452@229 mouseUp 5165244 nil]
	Receiver's instance variables: 
		bounds: 	430@218 corner: 577@565
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(258473984)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	430@218 corner: 577@565
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (266338304) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(258473984)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(258473984)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[452@229 mouseUp 5165244 nil]
		focusHolder: 	a MenuMorph(251396096)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	452@229 corner: 468@245
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	452@229 corner: 468@245
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(502792192)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[452@229 mouseUp 5165244 nil]
		targetOffset: 	17@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5165244 452 229 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(134742016) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[452@229 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(134742016) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[452@229 mouseUp 5165244 nil]
		focusHolder: 	a MenuMorph(251396096)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	452@229 corner: 468@245
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	452@229 corner: 468@245
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(502792192)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[452@229 mouseUp 5165244 nil]
		targetOffset: 	17@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5165244 452 229 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[452@229 mouseUp 5165244 nil]
		focusHolder: 	a MenuMorph(251396096)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	452@229 corner: 468@245
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	452@229 corner: 468@245
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(502792192)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[452@229 mouseUp 5165244 nil]
		targetOffset: 	17@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5165244 452 229 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[452@229 mouseUp 5165244 nil]
	Receiver's instance variables: 
		bounds: 	452@229 corner: 468@245
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	452@229 corner: 468@245
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(502792192)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[452@229 mouseUp 5165244 nil]
		targetOffset: 	17@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5165244 452 229 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[452@229 mouseUp 5165244 nil]
		evt: 	[452@229 mouseUp 5165244 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	452@229 corner: 468@245
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	452@229 corner: 468@245
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(502792192)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[452@229 mouseUp 5165244 nil]
		targetOffset: 	17@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5165244 452 229 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[452@229 mouseUp 5165244 nil]
		evtBuf: 	#(1 5165244 452 229 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	452@229 corner: 468@245
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	452@229 corner: 468@245
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(502792192)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[452@229 mouseUp 5165244 nil]
		targetOffset: 	17@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5165244 452 229 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1280@727
		canvas: 	a FormCanvas on: DisplayScreen(1280x727x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(134742016))(a PreDebu...etc...
		lastStepTime: 	5165240
		lastStepMessage: 	nil
		lastCycleTime: 	5165284
		alarms: 	a Heap()
		lastAlarmTime: 	5165240
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
Solo class(Object)>>doesNotUnderstand: #artistName:activeSince:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Solo class>>artistName:activeSince:
14 January 2012 12:46:12 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

Solo class(Object)>>doesNotUnderstand: #artistName:activeSince:
	Receiver: Solo
	Arguments and temporary variables: 
		aMessage: 	artistName: 'Clement Peerens' activeSince: 1985
		exception: 	MessageNotUnderstood: Solo class>>artistName:activeSince:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Artist
		methodDict: 	a MethodDictionary(#addToJury:->(Solo>>#addToJury: "a CompiledMetho...etc...
		format: 	136
		instanceVariables: 	nil
		organization: 	('accessing' awardsWon)
('as yet unclassified' addToJury:)

		subclasses: 	nil
		name: 	#Solo
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#POOL
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	nil
		sylvain: 	nil
		cpex: 	nil
		hetfield: 	nil
		ulrich: 	nil
		hammett: 	nil
		trujillo: 	nil
		metallica: 	nil
		martin: 	nil
		fakefigures: 	nil
		awardBestMaleSinger: 	nil
		awardBestNewcomerBand: 	nil
		ceremony: 	nil
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(105119744)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | 
selectionInterval := oldEditor selectionInterval.
	textMorp...etc...
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[(oldEditor := textMorph editor)
		evaluateSelectionAndDo: [:result | 
			selectionInterval := oldEditor selectionInterval.
			textMorph installEditorToReplace: oldEditor.
			textMorph
				handleEdit: [oldEditor afterSelectionInsertAndSelect: result printString].
			selectionInterval := oldEditor selectionInterval.
			textMorph editor selectFrom: selectionInterval first to: selectionInterval last.
			self scrollSelectionIntoView]] in PluggableTextMorph>>printIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		oldEditor: 	an Array(a SmalltalkEditor)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1952)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[(oldEditor := textMorph editor)
		evaluateSelectionAndDo: [:result ...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 979@706
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 979@706
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 5314836) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>printIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		oldEditor: 	an Array(a SmalltalkEditor)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1952)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#printIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(455344128)'Print it (p)'
	Arguments and temporary variables: 
		evt: 	[352@214 mouseUp 5315020 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	316@213 corner: 453@231
		owner: 	a MenuMorph(364904448)
		submorphs: 	#()
		fullBounds: 	316@213 corner: 453@231
		color: 	Color black
		extension: 	a MorphExtension (465567744)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Print it (p)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#printIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(455344128)'Print it (p)'
	Arguments and temporary variables: 
		evt: 	[352@214 mouseUp 5315020 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	316@213 corner: 453@231
		owner: 	a MenuMorph(364904448)
		submorphs: 	#()
		fullBounds: 	316@213 corner: 453@231
		color: 	Color black
		extension: 	a MorphExtension (465567744)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Print it (p)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#printIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(455344128)'Print it (p)'
	Arguments and temporary variables: 
		evt: 	[352@214 mouseUp 5315020 nil]
	Receiver's instance variables: 
		bounds: 	316@213 corner: 453@231
		owner: 	a MenuMorph(364904448)
		submorphs: 	#()
		fullBounds: 	316@213 corner: 453@231
		color: 	Color black
		extension: 	a MorphExtension (465567744)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Print it (p)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#printIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(455344128)'Print it (p)'
	Arguments and temporary variables: 
		anEvent: 	[352@214 mouseUp 5315020 nil]
	Receiver's instance variables: 
		bounds: 	316@213 corner: 453@231
		owner: 	a MenuMorph(364904448)
		submorphs: 	#()
		fullBounds: 	316@213 corner: 453@231
		color: 	Color black
		extension: 	a MorphExtension (465567744)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Print it (p)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#printIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [352@214 mouseUp 5315020 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(455344128)'Print it (p)'
	Receiver's instance variables: 
		timeStamp: 	5315020
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	352@214
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(455344128)'Print it (p)'
	Arguments and temporary variables: 
		anEvent: 	[352@214 mouseUp 5315020 nil]
	Receiver's instance variables: 
		bounds: 	316@213 corner: 453@231
		owner: 	a MenuMorph(364904448)
		submorphs: 	#()
		fullBounds: 	316@213 corner: 453@231
		color: 	Color black
		extension: 	a MorphExtension (465567744)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Print it (p)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#printIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[352@214 mouseUp 5315020 nil]
		aMorph: 	a ToggleMenuItemMorph(455344128)'Print it (p)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[352@214 mouseUp 5315020 nil]
		aMorph: 	a ToggleMenuItemMorph(455344128)'Print it (p)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(455344128)'Print it (p)'
	Arguments and temporary variables: 
		anEvent: 	[352@214 mouseUp 5315020 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	316@213 corner: 453@231
		owner: 	a MenuMorph(364904448)
		submorphs: 	#()
		fullBounds: 	316@213 corner: 453@231
		color: 	Color black
		extension: 	a MorphExtension (465567744)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Print it (p)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#printIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[352@214 mouseUp 5315020 nil]
		aMorph: 	a MenuMorph(364904448)
		localEvt: 	[352@214 mouseUp 5315020 nil]
		index: 	2
		child: 	a ToggleMenuItemMorph(455344128)'Print it (p)'
		morphs: 	an Array(a ToggleMenuItemMorph(371982336)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[352@214 mouseUp 5315020 nil]
		aMorph: 	a MenuMorph(364904448)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(364904448)
	Arguments and temporary variables: 
		anEvent: 	[352@214 mouseUp 5315020 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	311@189 corner: 458@536
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(371982336)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	311@189 corner: 458@536
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (379846656) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(455344128)'Print it (p)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(371982336)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(364904448)
	Arguments and temporary variables: 
		anEvent: 	[352@214 mouseUp 5315020 nil]
	Receiver's instance variables: 
		bounds: 	311@189 corner: 458@536
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(371982336)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	311@189 corner: 458@536
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (379846656) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(455344128)'Print it (p)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(371982336)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(364904448)
	Arguments and temporary variables: 
		evt: 	[352@214 mouseUp 5315020 nil]
	Receiver's instance variables: 
		bounds: 	311@189 corner: 458@536
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(371982336)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	311@189 corner: 458@536
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (379846656) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(455344128)'Print it (p)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(371982336)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[352@214 mouseUp 5315020 nil]
		focusHolder: 	a MenuMorph(364904448)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	352@214 corner: 368@230
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	352@214 corner: 368@230
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(463994880)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[352@214 mouseUp 5315020 nil]
		targetOffset: 	35@0
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5315020 352 214 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(774635520) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[352@214 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(774635520) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[352@214 mouseUp 5315020 nil]
		focusHolder: 	a MenuMorph(364904448)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	352@214 corner: 368@230
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	352@214 corner: 368@230
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(463994880)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[352@214 mouseUp 5315020 nil]
		targetOffset: 	35@0
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5315020 352 214 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[352@214 mouseUp 5315020 nil]
		focusHolder: 	a MenuMorph(364904448)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	352@214 corner: 368@230
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	352@214 corner: 368@230
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(463994880)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[352@214 mouseUp 5315020 nil]
		targetOffset: 	35@0
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5315020 352 214 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[352@214 mouseUp 5315020 nil]
	Receiver's instance variables: 
		bounds: 	352@214 corner: 368@230
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	352@214 corner: 368@230
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(463994880)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[352@214 mouseUp 5315020 nil]
		targetOffset: 	35@0
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5315020 352 214 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[352@214 mouseUp 5315020 nil]
		evt: 	[352@214 mouseUp 5315020 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	352@214 corner: 368@230
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	352@214 corner: 368@230
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(463994880)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[352@214 mouseUp 5315020 nil]
		targetOffset: 	35@0
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5315020 352 214 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[352@214 mouseUp 5315020 nil]
		evtBuf: 	#(1 5315020 352 214 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	352@214 corner: 368@230
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	352@214 corner: 368@230
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(463994880)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[352@214 mouseUp 5315020 nil]
		targetOffset: 	35@0
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5315020 352 214 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1280@727
		canvas: 	a FormCanvas on: DisplayScreen(1280x727x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(274726912))(an OBSys...etc...
		lastStepTime: 	5315016
		lastStepMessage: 	nil
		lastCycleTime: 	5315064
		alarms: 	a Heap()
		lastAlarmTime: 	5315016
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1280@727
		canvas: 	a FormCanvas on: DisplayScreen(1280x727x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(274726912))(an OBSys...etc...
		lastStepTime: 	5315016
		lastStepMessage: 	nil
		lastCycleTime: 	5315064
		alarms: 	a Heap()
		lastAlarmTime: 	5315016
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1280@727
		canvas: 	a FormCanvas on: DisplayScreen(1280x727x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(274726912))(an OBSys...etc...
		lastStepTime: 	5315016
		lastStepMessage: 	nil
		lastCycleTime: 	5315064
		alarms: 	a Heap()
		lastAlarmTime: 	5315016
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
Solo class(Object)>>doesNotUnderstand: #artistName:activeSince:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[(oldEditor := textMorph editor)
		evaluateSelectionAndDo: [:result | 
			selectionInterval := oldEditor selectionInterval.
			textMorph installEditorToReplace: oldEditor.
			textMorph
				handleEdit: [oldEditor afterSelectionInsertAndSelect: result printString].
			selectionInterval := oldEditor selectionInterval.
			textMorph editor selectFrom: selectionInterval first to: selectionInterval last.
			self scrollSelectionIntoView]] in PluggableTextMorph>>printIt
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>printIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Solo>>new
14 January 2012 12:46:26 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

Solo(Object)>>doesNotUnderstand: #new
	Receiver: a Solo
	Arguments and temporary variables: 
		aMessage: 	new
		exception: 	MessageNotUnderstood: Solo>>new
		resumeValue: 	nil
	Receiver's instance variables: 
		activeSince: 	nil
		awardsWon: 	nil
		artistName: 	nil


Solo(Artist)>>artistName:activeSince:
	Receiver: a Solo
	Arguments and temporary variables: 
		anArtistName: 	'Clement Peerens'
		active: 	1985
	Receiver's instance variables: 
		activeSince: 	nil
		awardsWon: 	nil
		artistName: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ clement := Solo new artistName: 'Clement Peerens' activeSin...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(821035008)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(209 to: 208)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(209 to: 208)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 979@706
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 979@706
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 5328844) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(209 to: 208)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(209 to: 208)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(435683328)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[304@179 mouseUp 5329100 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	285@167 corner: 422@185
		owner: 	a MenuMorph(428605440)
		submorphs: 	#()
		fullBounds: 	285@167 corner: 422@185
		color: 	Color black
		extension: 	a MorphExtension (445906944)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(435683328)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[304@179 mouseUp 5329100 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	285@167 corner: 422@185
		owner: 	a MenuMorph(428605440)
		submorphs: 	#()
		fullBounds: 	285@167 corner: 422@185
		color: 	Color black
		extension: 	a MorphExtension (445906944)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(435683328)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[304@179 mouseUp 5329100 nil]
	Receiver's instance variables: 
		bounds: 	285@167 corner: 422@185
		owner: 	a MenuMorph(428605440)
		submorphs: 	#()
		fullBounds: 	285@167 corner: 422@185
		color: 	Color black
		extension: 	a MorphExtension (445906944)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(435683328)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[304@179 mouseUp 5329100 nil]
	Receiver's instance variables: 
		bounds: 	285@167 corner: 422@185
		owner: 	a MenuMorph(428605440)
		submorphs: 	#()
		fullBounds: 	285@167 corner: 422@185
		color: 	Color black
		extension: 	a MorphExtension (445906944)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [304@179 mouseUp 5329100 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(435683328)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	5329100
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	304@179
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(435683328)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[304@179 mouseUp 5329100 nil]
	Receiver's instance variables: 
		bounds: 	285@167 corner: 422@185
		owner: 	a MenuMorph(428605440)
		submorphs: 	#()
		fullBounds: 	285@167 corner: 422@185
		color: 	Color black
		extension: 	a MorphExtension (445906944)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[304@179 mouseUp 5329100 nil]
		aMorph: 	a ToggleMenuItemMorph(435683328)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[304@179 mouseUp 5329100 nil]
		aMorph: 	a ToggleMenuItemMorph(435683328)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(435683328)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[304@179 mouseUp 5329100 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	285@167 corner: 422@185
		owner: 	a MenuMorph(428605440)
		submorphs: 	#()
		fullBounds: 	285@167 corner: 422@185
		color: 	Color black
		extension: 	a MorphExtension (445906944)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[304@179 mouseUp 5329100 nil]
		aMorph: 	a MenuMorph(428605440)
		localEvt: 	[304@179 mouseUp 5329100 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(435683328)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(435683328)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[304@179 mouseUp 5329100 nil]
		aMorph: 	a MenuMorph(428605440)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(428605440)
	Arguments and temporary variables: 
		anEvent: 	[304@179 mouseUp 5329100 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	280@162 corner: 427@509
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(435683328)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	280@162 corner: 427@509
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (443547648) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(435683328)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(435683328)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(428605440)
	Arguments and temporary variables: 
		anEvent: 	[304@179 mouseUp 5329100 nil]
	Receiver's instance variables: 
		bounds: 	280@162 corner: 427@509
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(435683328)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	280@162 corner: 427@509
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (443547648) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(435683328)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(435683328)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(428605440)
	Arguments and temporary variables: 
		evt: 	[304@179 mouseUp 5329100 nil]
	Receiver's instance variables: 
		bounds: 	280@162 corner: 427@509
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(435683328)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	280@162 corner: 427@509
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (443547648) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(435683328)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(435683328)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[304@179 mouseUp 5329100 nil]
		focusHolder: 	a MenuMorph(428605440)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	304@179 corner: 320@195
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	304@179 corner: 320@195
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(262930432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[304@179 mouseUp 5329100 nil]
		targetOffset: 	18@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5329100 304 179 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1023410176) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[304@179 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1023410176) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[304@179 mouseUp 5329100 nil]
		focusHolder: 	a MenuMorph(428605440)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	304@179 corner: 320@195
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	304@179 corner: 320@195
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(262930432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[304@179 mouseUp 5329100 nil]
		targetOffset: 	18@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5329100 304 179 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[304@179 mouseUp 5329100 nil]
		focusHolder: 	a MenuMorph(428605440)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	304@179 corner: 320@195
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	304@179 corner: 320@195
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(262930432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[304@179 mouseUp 5329100 nil]
		targetOffset: 	18@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5329100 304 179 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[304@179 mouseUp 5329100 nil]
	Receiver's instance variables: 
		bounds: 	304@179 corner: 320@195
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	304@179 corner: 320@195
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(262930432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[304@179 mouseUp 5329100 nil]
		targetOffset: 	18@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5329100 304 179 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[304@179 mouseUp 5329100 nil]
		evt: 	[304@179 mouseUp 5329100 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	304@179 corner: 320@195
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	304@179 corner: 320@195
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(262930432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[304@179 mouseUp 5329100 nil]
		targetOffset: 	18@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5329100 304 179 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[304@179 mouseUp 5329100 nil]
		evtBuf: 	#(1 5329100 304 179 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	304@179 corner: 320@195
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	304@179 corner: 320@195
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(262930432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[304@179 mouseUp 5329100 nil]
		targetOffset: 	18@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5329100 304 179 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil



--- The full stack ---
Solo(Object)>>doesNotUnderstand: #new
Solo(Artist)>>artistName:activeSince:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Solo class>>artistName:activeSince:
14 January 2012 12:46:54 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

Solo class(Object)>>doesNotUnderstand: #artistName:activeSince:
	Receiver: Solo
	Arguments and temporary variables: 
		aMessage: 	artistName: 'Clement Peerens' activeSince: 1985
		exception: 	MessageNotUnderstood: Solo class>>artistName:activeSince:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Artist
		methodDict: 	a MethodDictionary(#addToJury:->(Solo>>#addToJury: "a CompiledMetho...etc...
		format: 	136
		instanceVariables: 	nil
		organization: 	('accessing' awardsWon)
('as yet unclassified' addToJury:)

		subclasses: 	nil
		name: 	#Solo
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#POOL
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	nil
		sylvain: 	nil
		cpex: 	nil
		hetfield: 	nil
		ulrich: 	nil
		hammett: 	nil
		trujillo: 	nil
		metallica: 	nil
		martin: 	nil
		fakefigures: 	nil
		awardBestMaleSinger: 	nil
		awardBestNewcomerBand: 	nil
		ceremony: 	nil
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(1000865792)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1957)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1957)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 979@706
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 979@706
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 5357158) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1957)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1957)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(217317376)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[430@206 mouseUp 5357172 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	412@199 corner: 549@217
		owner: 	a MenuMorph(155189248)
		submorphs: 	#()
		fullBounds: 	412@199 corner: 549@217
		color: 	Color black
		extension: 	a MorphExtension (227540992)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(217317376)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[430@206 mouseUp 5357172 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	412@199 corner: 549@217
		owner: 	a MenuMorph(155189248)
		submorphs: 	#()
		fullBounds: 	412@199 corner: 549@217
		color: 	Color black
		extension: 	a MorphExtension (227540992)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(217317376)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[430@206 mouseUp 5357172 nil]
	Receiver's instance variables: 
		bounds: 	412@199 corner: 549@217
		owner: 	a MenuMorph(155189248)
		submorphs: 	#()
		fullBounds: 	412@199 corner: 549@217
		color: 	Color black
		extension: 	a MorphExtension (227540992)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(217317376)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[430@206 mouseUp 5357172 nil]
	Receiver's instance variables: 
		bounds: 	412@199 corner: 549@217
		owner: 	a MenuMorph(155189248)
		submorphs: 	#()
		fullBounds: 	412@199 corner: 549@217
		color: 	Color black
		extension: 	a MorphExtension (227540992)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [430@206 mouseUp 5357172 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(217317376)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	5357172
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	430@206
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(217317376)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[430@206 mouseUp 5357172 nil]
	Receiver's instance variables: 
		bounds: 	412@199 corner: 549@217
		owner: 	a MenuMorph(155189248)
		submorphs: 	#()
		fullBounds: 	412@199 corner: 549@217
		color: 	Color black
		extension: 	a MorphExtension (227540992)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[430@206 mouseUp 5357172 nil]
		aMorph: 	a ToggleMenuItemMorph(217317376)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[430@206 mouseUp 5357172 nil]
		aMorph: 	a ToggleMenuItemMorph(217317376)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(217317376)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[430@206 mouseUp 5357172 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	412@199 corner: 549@217
		owner: 	a MenuMorph(155189248)
		submorphs: 	#()
		fullBounds: 	412@199 corner: 549@217
		color: 	Color black
		extension: 	a MorphExtension (227540992)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[430@206 mouseUp 5357172 nil]
		aMorph: 	a MenuMorph(155189248)
		localEvt: 	[430@206 mouseUp 5357172 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(217317376)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(217317376)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[430@206 mouseUp 5357172 nil]
		aMorph: 	a MenuMorph(155189248)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(155189248)
	Arguments and temporary variables: 
		anEvent: 	[430@206 mouseUp 5357172 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	407@194 corner: 554@541
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(217317376)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	407@194 corner: 554@541
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (170131456) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(217317376)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(217317376)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(155189248)
	Arguments and temporary variables: 
		anEvent: 	[430@206 mouseUp 5357172 nil]
	Receiver's instance variables: 
		bounds: 	407@194 corner: 554@541
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(217317376)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	407@194 corner: 554@541
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (170131456) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(217317376)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(217317376)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(155189248)
	Arguments and temporary variables: 
		evt: 	[430@206 mouseUp 5357172 nil]
	Receiver's instance variables: 
		bounds: 	407@194 corner: 554@541
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(217317376)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	407@194 corner: 554@541
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (170131456) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(217317376)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(217317376)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[430@206 mouseUp 5357172 nil]
		focusHolder: 	a MenuMorph(155189248)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	430@206 corner: 446@222
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	430@206 corner: 446@222
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(143917056)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[430@206 mouseUp 5357172 nil]
		targetOffset: 	18@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5357172 430 206 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(904396800) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[430@206 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(904396800) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[430@206 mouseUp 5357172 nil]
		focusHolder: 	a MenuMorph(155189248)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	430@206 corner: 446@222
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	430@206 corner: 446@222
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(143917056)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[430@206 mouseUp 5357172 nil]
		targetOffset: 	18@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5357172 430 206 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[430@206 mouseUp 5357172 nil]
		focusHolder: 	a MenuMorph(155189248)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	430@206 corner: 446@222
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	430@206 corner: 446@222
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(143917056)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[430@206 mouseUp 5357172 nil]
		targetOffset: 	18@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5357172 430 206 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[430@206 mouseUp 5357172 nil]
	Receiver's instance variables: 
		bounds: 	430@206 corner: 446@222
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	430@206 corner: 446@222
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(143917056)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[430@206 mouseUp 5357172 nil]
		targetOffset: 	18@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5357172 430 206 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[430@206 mouseUp 5357172 nil]
		evt: 	[430@206 mouseUp 5357172 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	430@206 corner: 446@222
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	430@206 corner: 446@222
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(143917056)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[430@206 mouseUp 5357172 nil]
		targetOffset: 	18@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5357172 430 206 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[430@206 mouseUp 5357172 nil]
		evtBuf: 	#(1 5357172 430 206 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	430@206 corner: 446@222
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	430@206 corner: 446@222
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(143917056)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[430@206 mouseUp 5357172 nil]
		targetOffset: 	18@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5357172 430 206 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1280@727
		canvas: 	a FormCanvas on: DisplayScreen(1280x727x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(904396800))(a PreDebu...etc...
		lastStepTime: 	5357166
		lastStepMessage: 	nil
		lastCycleTime: 	5357214
		alarms: 	a Heap()
		lastAlarmTime: 	5357166
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
Solo class(Object)>>doesNotUnderstand: #artistName:activeSince:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Solo>>new
14 January 2012 12:47:15 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

Solo(Object)>>doesNotUnderstand: #new
	Receiver: a Solo
	Arguments and temporary variables: 
		aMessage: 	new
		exception: 	MessageNotUnderstood: Solo>>new
		resumeValue: 	nil
	Receiver's instance variables: 
		activeSince: 	nil
		awardsWon: 	nil
		artistName: 	nil


Solo(Artist)>>artistName:activeSince:
	Receiver: a Solo
	Arguments and temporary variables: 
		anArtistName: 	'Clement Peerens'
		active: 	1985
	Receiver's instance variables: 
		activeSince: 	nil
		awardsWon: 	nil
		artistName: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	nil
		sylvain: 	nil
		cpex: 	nil
		hetfield: 	nil
		ulrich: 	nil
		hammett: 	nil
		trujillo: 	nil
		metallica: 	nil
		martin: 	nil
		fakefigures: 	nil
		awardBestMaleSinger: 	nil
		awardBestNewcomerBand: 	nil
		ceremony: 	nil
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(100401152)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1958)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1958)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 979@706
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 979@706
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 5378294) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1958)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1958)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(726401024)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[387@228 mouseUp 5378317 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	364@214 corner: 501@232
		owner: 	a MenuMorph(719323136)
		submorphs: 	#()
		fullBounds: 	364@214 corner: 501@232
		color: 	Color black
		extension: 	a MorphExtension (736624640)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(726401024)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[387@228 mouseUp 5378317 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	364@214 corner: 501@232
		owner: 	a MenuMorph(719323136)
		submorphs: 	#()
		fullBounds: 	364@214 corner: 501@232
		color: 	Color black
		extension: 	a MorphExtension (736624640)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(726401024)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[387@228 mouseUp 5378317 nil]
	Receiver's instance variables: 
		bounds: 	364@214 corner: 501@232
		owner: 	a MenuMorph(719323136)
		submorphs: 	#()
		fullBounds: 	364@214 corner: 501@232
		color: 	Color black
		extension: 	a MorphExtension (736624640)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(726401024)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[387@228 mouseUp 5378317 nil]
	Receiver's instance variables: 
		bounds: 	364@214 corner: 501@232
		owner: 	a MenuMorph(719323136)
		submorphs: 	#()
		fullBounds: 	364@214 corner: 501@232
		color: 	Color black
		extension: 	a MorphExtension (736624640)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [387@228 mouseUp 5378317 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(726401024)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	5378317
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	387@228
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(726401024)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[387@228 mouseUp 5378317 nil]
	Receiver's instance variables: 
		bounds: 	364@214 corner: 501@232
		owner: 	a MenuMorph(719323136)
		submorphs: 	#()
		fullBounds: 	364@214 corner: 501@232
		color: 	Color black
		extension: 	a MorphExtension (736624640)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[387@228 mouseUp 5378317 nil]
		aMorph: 	a ToggleMenuItemMorph(726401024)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[387@228 mouseUp 5378317 nil]
		aMorph: 	a ToggleMenuItemMorph(726401024)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(726401024)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[387@228 mouseUp 5378317 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	364@214 corner: 501@232
		owner: 	a MenuMorph(719323136)
		submorphs: 	#()
		fullBounds: 	364@214 corner: 501@232
		color: 	Color black
		extension: 	a MorphExtension (736624640)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[387@228 mouseUp 5378317 nil]
		aMorph: 	a MenuMorph(719323136)
		localEvt: 	[387@228 mouseUp 5378317 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(726401024)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(726401024)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[387@228 mouseUp 5378317 nil]
		aMorph: 	a MenuMorph(719323136)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(719323136)
	Arguments and temporary variables: 
		anEvent: 	[387@228 mouseUp 5378317 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	359@209 corner: 506@556
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(726401024)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	359@209 corner: 506@556
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (734265344) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(726401024)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(726401024)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(719323136)
	Arguments and temporary variables: 
		anEvent: 	[387@228 mouseUp 5378317 nil]
	Receiver's instance variables: 
		bounds: 	359@209 corner: 506@556
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(726401024)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	359@209 corner: 506@556
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (734265344) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(726401024)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(726401024)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(719323136)
	Arguments and temporary variables: 
		evt: 	[387@228 mouseUp 5378317 nil]
	Receiver's instance variables: 
		bounds: 	359@209 corner: 506@556
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(726401024)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	359@209 corner: 506@556
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (734265344) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(726401024)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(726401024)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[387@228 mouseUp 5378317 nil]
		focusHolder: 	a MenuMorph(719323136)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	387@228 corner: 403@244
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	387@228 corner: 403@244
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(96206848)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[387@228 mouseUp 5378317 nil]
		targetOffset: 	22@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5378317 387 228 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(478412800) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[387@228 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(478412800) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[387@228 mouseUp 5378317 nil]
		focusHolder: 	a MenuMorph(719323136)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	387@228 corner: 403@244
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	387@228 corner: 403@244
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(96206848)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[387@228 mouseUp 5378317 nil]
		targetOffset: 	22@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5378317 387 228 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[387@228 mouseUp 5378317 nil]
		focusHolder: 	a MenuMorph(719323136)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	387@228 corner: 403@244
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	387@228 corner: 403@244
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(96206848)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[387@228 mouseUp 5378317 nil]
		targetOffset: 	22@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5378317 387 228 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[387@228 mouseUp 5378317 nil]
	Receiver's instance variables: 
		bounds: 	387@228 corner: 403@244
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	387@228 corner: 403@244
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(96206848)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[387@228 mouseUp 5378317 nil]
		targetOffset: 	22@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5378317 387 228 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[387@228 mouseUp 5378317 nil]
		evt: 	[387@228 mouseUp 5378317 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	387@228 corner: 403@244
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	387@228 corner: 403@244
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(96206848)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[387@228 mouseUp 5378317 nil]
		targetOffset: 	22@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5378317 387 228 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[387@228 mouseUp 5378317 nil]
		evtBuf: 	#(1 5378317 387 228 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	387@228 corner: 403@244
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	387@228 corner: 403@244
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(96206848)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[387@228 mouseUp 5378317 nil]
		targetOffset: 	22@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5378317 387 228 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil



--- The full stack ---
Solo(Object)>>doesNotUnderstand: #new
Solo(Artist)>>artistName:activeSince:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Solo>>new
14 January 2012 12:49:43 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

Solo(Object)>>doesNotUnderstand: #new
	Receiver: a Solo
	Arguments and temporary variables: 
		aMessage: 	new
		exception: 	MessageNotUnderstood: Solo>>new
		resumeValue: 	nil
	Receiver's instance variables: 
		activeSince: 	nil
		awardsWon: 	nil
		artistName: 	nil


Solo(Artist)>>artistName:activeSince:
	Receiver: a Solo
	Arguments and temporary variables: 
		anArtistName: 	'Clement Peerens'
		active: 	1985
	Receiver's instance variables: 
		activeSince: 	nil
		awardsWon: 	nil
		artistName: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	nil
		sylvain: 	nil
		cpex: 	nil
		hetfield: 	nil
		ulrich: 	nil
		hammett: 	nil
		trujillo: 	nil
		metallica: 	nil
		martin: 	nil
		fakefigures: 	nil
		awardBestMaleSinger: 	nil
		awardBestNewcomerBand: 	nil
		ceremony: 	nil
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(839385088)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1958)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1958)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 979@706
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 979@706
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 5525236) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1958)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1958)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(158597120)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[291@375 mouseUp 5526196 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	264@367 corner: 401@385
		owner: 	a MenuMorph(151519232)
		submorphs: 	#()
		fullBounds: 	264@367 corner: 401@385
		color: 	Color black
		extension: 	a MorphExtension (168820736)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(158597120)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[291@375 mouseUp 5526196 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	264@367 corner: 401@385
		owner: 	a MenuMorph(151519232)
		submorphs: 	#()
		fullBounds: 	264@367 corner: 401@385
		color: 	Color black
		extension: 	a MorphExtension (168820736)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(158597120)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[291@375 mouseUp 5526196 nil]
	Receiver's instance variables: 
		bounds: 	264@367 corner: 401@385
		owner: 	a MenuMorph(151519232)
		submorphs: 	#()
		fullBounds: 	264@367 corner: 401@385
		color: 	Color black
		extension: 	a MorphExtension (168820736)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(158597120)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[291@375 mouseUp 5526196 nil]
	Receiver's instance variables: 
		bounds: 	264@367 corner: 401@385
		owner: 	a MenuMorph(151519232)
		submorphs: 	#()
		fullBounds: 	264@367 corner: 401@385
		color: 	Color black
		extension: 	a MorphExtension (168820736)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [291@375 mouseUp 5526196 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(158597120)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	5526196
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	291@375
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(158597120)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[291@375 mouseUp 5526196 nil]
	Receiver's instance variables: 
		bounds: 	264@367 corner: 401@385
		owner: 	a MenuMorph(151519232)
		submorphs: 	#()
		fullBounds: 	264@367 corner: 401@385
		color: 	Color black
		extension: 	a MorphExtension (168820736)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[291@375 mouseUp 5526196 nil]
		aMorph: 	a ToggleMenuItemMorph(158597120)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[291@375 mouseUp 5526196 nil]
		aMorph: 	a ToggleMenuItemMorph(158597120)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(158597120)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[291@375 mouseUp 5526196 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	264@367 corner: 401@385
		owner: 	a MenuMorph(151519232)
		submorphs: 	#()
		fullBounds: 	264@367 corner: 401@385
		color: 	Color black
		extension: 	a MorphExtension (168820736)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[291@375 mouseUp 5526196 nil]
		aMorph: 	a MenuMorph(151519232)
		localEvt: 	[291@375 mouseUp 5526196 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(158597120)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(158597120)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[291@375 mouseUp 5526196 nil]
		aMorph: 	a MenuMorph(151519232)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(151519232)
	Arguments and temporary variables: 
		anEvent: 	[291@375 mouseUp 5526196 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	259@362 corner: 406@709
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(158597120)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	259@362 corner: 406@709
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (166461440) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(158597120)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(158597120)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(151519232)
	Arguments and temporary variables: 
		anEvent: 	[291@375 mouseUp 5526196 nil]
	Receiver's instance variables: 
		bounds: 	259@362 corner: 406@709
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(158597120)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	259@362 corner: 406@709
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (166461440) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(158597120)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(158597120)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(151519232)
	Arguments and temporary variables: 
		evt: 	[291@375 mouseUp 5526196 nil]
	Receiver's instance variables: 
		bounds: 	259@362 corner: 406@709
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(158597120)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	259@362 corner: 406@709
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (166461440) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(158597120)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(158597120)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[291@375 mouseUp 5526196 nil]
		focusHolder: 	a MenuMorph(151519232)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	291@375 corner: 307@391
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	291@375 corner: 307@391
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(95420416)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[291@375 mouseUp 5526196 nil]
		targetOffset: 	26@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5526196 291 375 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(855900160) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[291@375 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(855900160) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[291@375 mouseUp 5526196 nil]
		focusHolder: 	a MenuMorph(151519232)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	291@375 corner: 307@391
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	291@375 corner: 307@391
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(95420416)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[291@375 mouseUp 5526196 nil]
		targetOffset: 	26@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5526196 291 375 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[291@375 mouseUp 5526196 nil]
		focusHolder: 	a MenuMorph(151519232)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	291@375 corner: 307@391
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	291@375 corner: 307@391
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(95420416)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[291@375 mouseUp 5526196 nil]
		targetOffset: 	26@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5526196 291 375 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[291@375 mouseUp 5526196 nil]
	Receiver's instance variables: 
		bounds: 	291@375 corner: 307@391
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	291@375 corner: 307@391
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(95420416)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[291@375 mouseUp 5526196 nil]
		targetOffset: 	26@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5526196 291 375 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[291@375 mouseUp 5526196 nil]
		evt: 	[291@375 mouseUp 5526196 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	291@375 corner: 307@391
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	291@375 corner: 307@391
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(95420416)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[291@375 mouseUp 5526196 nil]
		targetOffset: 	26@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5526196 291 375 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[291@375 mouseUp 5526196 nil]
		evtBuf: 	#(1 5526196 291 375 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	291@375 corner: 307@391
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	291@375 corner: 307@391
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(95420416)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[291@375 mouseUp 5526196 nil]
		targetOffset: 	26@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5526196 291 375 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil



--- The full stack ---
Solo(Object)>>doesNotUnderstand: #new
Solo(Artist)>>artistName:activeSince:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Solo>>new
14 January 2012 12:50:57 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

Solo(Object)>>doesNotUnderstand: #new
	Receiver: a Solo
	Arguments and temporary variables: 
		aMessage: 	new
		exception: 	MessageNotUnderstood: Solo>>new
		resumeValue: 	nil
	Receiver's instance variables: 
		activeSince: 	nil
		awardsWon: 	nil
		artistName: 	nil


Solo(Artist)>>artistName:activeSince:
	Receiver: a Solo
	Arguments and temporary variables: 
		anArtistName: 	'Clement Peerens'
		active: 	1985
	Receiver's instance variables: 
		activeSince: 	nil
		awardsWon: 	nil
		artistName: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	nil
		sylvain: 	nil
		cpex: 	nil
		hetfield: 	nil
		ulrich: 	nil
		hammett: 	nil
		trujillo: 	nil
		metallica: 	nil
		martin: 	nil
		fakefigures: 	nil
		awardBestMaleSinger: 	nil
		awardBestNewcomerBand: 	nil
		ceremony: 	nil
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(1052246016)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1958)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1958)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 979@706
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 979@706
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 5600556) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1958)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1958)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(340525056)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[280@364 mouseUp 5600716 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	259@350 corner: 396@368
		owner: 	a MenuMorph(333447168)
		submorphs: 	#()
		fullBounds: 	259@350 corner: 396@368
		color: 	Color black
		extension: 	a MorphExtension (350748672)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(340525056)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[280@364 mouseUp 5600716 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	259@350 corner: 396@368
		owner: 	a MenuMorph(333447168)
		submorphs: 	#()
		fullBounds: 	259@350 corner: 396@368
		color: 	Color black
		extension: 	a MorphExtension (350748672)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(340525056)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[280@364 mouseUp 5600716 nil]
	Receiver's instance variables: 
		bounds: 	259@350 corner: 396@368
		owner: 	a MenuMorph(333447168)
		submorphs: 	#()
		fullBounds: 	259@350 corner: 396@368
		color: 	Color black
		extension: 	a MorphExtension (350748672)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(340525056)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[280@364 mouseUp 5600716 nil]
	Receiver's instance variables: 
		bounds: 	259@350 corner: 396@368
		owner: 	a MenuMorph(333447168)
		submorphs: 	#()
		fullBounds: 	259@350 corner: 396@368
		color: 	Color black
		extension: 	a MorphExtension (350748672)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [280@364 mouseUp 5600716 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(340525056)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	5600716
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	280@364
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(340525056)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[280@364 mouseUp 5600716 nil]
	Receiver's instance variables: 
		bounds: 	259@350 corner: 396@368
		owner: 	a MenuMorph(333447168)
		submorphs: 	#()
		fullBounds: 	259@350 corner: 396@368
		color: 	Color black
		extension: 	a MorphExtension (350748672)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[280@364 mouseUp 5600716 nil]
		aMorph: 	a ToggleMenuItemMorph(340525056)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[280@364 mouseUp 5600716 nil]
		aMorph: 	a ToggleMenuItemMorph(340525056)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(340525056)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[280@364 mouseUp 5600716 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	259@350 corner: 396@368
		owner: 	a MenuMorph(333447168)
		submorphs: 	#()
		fullBounds: 	259@350 corner: 396@368
		color: 	Color black
		extension: 	a MorphExtension (350748672)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[280@364 mouseUp 5600716 nil]
		aMorph: 	a MenuMorph(333447168)
		localEvt: 	[280@364 mouseUp 5600716 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(340525056)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(340525056)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[280@364 mouseUp 5600716 nil]
		aMorph: 	a MenuMorph(333447168)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(333447168)
	Arguments and temporary variables: 
		anEvent: 	[280@364 mouseUp 5600716 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	254@345 corner: 401@692
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(340525056)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	254@345 corner: 401@692
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (348389376) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(340525056)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(340525056)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(333447168)
	Arguments and temporary variables: 
		anEvent: 	[280@364 mouseUp 5600716 nil]
	Receiver's instance variables: 
		bounds: 	254@345 corner: 401@692
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(340525056)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	254@345 corner: 401@692
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (348389376) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(340525056)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(340525056)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(333447168)
	Arguments and temporary variables: 
		evt: 	[280@364 mouseUp 5600716 nil]
	Receiver's instance variables: 
		bounds: 	254@345 corner: 401@692
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(340525056)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	254@345 corner: 401@692
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (348389376) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(340525056)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(340525056)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[280@364 mouseUp 5600716 nil]
		focusHolder: 	a MenuMorph(333447168)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	280@364 corner: 296@380
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	280@364 corner: 296@380
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(808452096)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[280@364 mouseUp 5600716 nil]
		targetOffset: 	21@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5600716 280 364 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(495190016) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[280@364 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(495190016) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[280@364 mouseUp 5600716 nil]
		focusHolder: 	a MenuMorph(333447168)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	280@364 corner: 296@380
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	280@364 corner: 296@380
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(808452096)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[280@364 mouseUp 5600716 nil]
		targetOffset: 	21@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5600716 280 364 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[280@364 mouseUp 5600716 nil]
		focusHolder: 	a MenuMorph(333447168)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	280@364 corner: 296@380
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	280@364 corner: 296@380
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(808452096)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[280@364 mouseUp 5600716 nil]
		targetOffset: 	21@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5600716 280 364 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[280@364 mouseUp 5600716 nil]
	Receiver's instance variables: 
		bounds: 	280@364 corner: 296@380
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	280@364 corner: 296@380
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(808452096)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[280@364 mouseUp 5600716 nil]
		targetOffset: 	21@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5600716 280 364 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[280@364 mouseUp 5600716 nil]
		evt: 	[280@364 mouseUp 5600716 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	280@364 corner: 296@380
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	280@364 corner: 296@380
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(808452096)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[280@364 mouseUp 5600716 nil]
		targetOffset: 	21@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5600716 280 364 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[280@364 mouseUp 5600716 nil]
		evtBuf: 	#(1 5600716 280 364 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	280@364 corner: 296@380
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	280@364 corner: 296@380
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(808452096)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[280@364 mouseUp 5600716 nil]
		targetOffset: 	21@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5600716 280 364 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil



--- The full stack ---
Solo(Object)>>doesNotUnderstand: #new
Solo(Artist)>>artistName:activeSince:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Solo class>>artistName:activeSince:
14 January 2012 12:51:10 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

Solo class(Object)>>doesNotUnderstand: #artistName:activeSince:
	Receiver: Solo
	Arguments and temporary variables: 
		aMessage: 	artistName: 'Sylvain Aertbelien' activeSince: 1988
		exception: 	MessageNotUnderstood: Solo class>>artistName:activeSince:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Artist
		methodDict: 	a MethodDictionary(#addToJury:->(Solo>>#addToJury: "a CompiledMetho...etc...
		format: 	136
		instanceVariables: 	nil
		organization: 	('accessing' awardsWon)
('as yet unclassified' addToJury:)

		subclasses: 	nil
		name: 	#Solo
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#POOL
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	nil
		cpex: 	nil
		hetfield: 	nil
		ulrich: 	nil
		hammett: 	nil
		trujillo: 	nil
		metallica: 	nil
		martin: 	nil
		fakefigures: 	nil
		awardBestMaleSinger: 	nil
		awardBestNewcomerBand: 	nil
		ceremony: 	nil
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(1039925248)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1958)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1958)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 979@706
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 979@706
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 5613142) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1958)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1958)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(520617984)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[408@286 mouseUp 5613188 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	397@278 corner: 534@296
		owner: 	a MenuMorph(513540096)
		submorphs: 	#()
		fullBounds: 	397@278 corner: 534@296
		color: 	Color black
		extension: 	a MorphExtension (530841600)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(520617984)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[408@286 mouseUp 5613188 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	397@278 corner: 534@296
		owner: 	a MenuMorph(513540096)
		submorphs: 	#()
		fullBounds: 	397@278 corner: 534@296
		color: 	Color black
		extension: 	a MorphExtension (530841600)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(520617984)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[408@286 mouseUp 5613188 nil]
	Receiver's instance variables: 
		bounds: 	397@278 corner: 534@296
		owner: 	a MenuMorph(513540096)
		submorphs: 	#()
		fullBounds: 	397@278 corner: 534@296
		color: 	Color black
		extension: 	a MorphExtension (530841600)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(520617984)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[408@286 mouseUp 5613188 nil]
	Receiver's instance variables: 
		bounds: 	397@278 corner: 534@296
		owner: 	a MenuMorph(513540096)
		submorphs: 	#()
		fullBounds: 	397@278 corner: 534@296
		color: 	Color black
		extension: 	a MorphExtension (530841600)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [408@286 mouseUp 5613188 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(520617984)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	5613188
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	408@286
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(520617984)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[408@286 mouseUp 5613188 nil]
	Receiver's instance variables: 
		bounds: 	397@278 corner: 534@296
		owner: 	a MenuMorph(513540096)
		submorphs: 	#()
		fullBounds: 	397@278 corner: 534@296
		color: 	Color black
		extension: 	a MorphExtension (530841600)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[408@286 mouseUp 5613188 nil]
		aMorph: 	a ToggleMenuItemMorph(520617984)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[408@286 mouseUp 5613188 nil]
		aMorph: 	a ToggleMenuItemMorph(520617984)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(520617984)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[408@286 mouseUp 5613188 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	397@278 corner: 534@296
		owner: 	a MenuMorph(513540096)
		submorphs: 	#()
		fullBounds: 	397@278 corner: 534@296
		color: 	Color black
		extension: 	a MorphExtension (530841600)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[408@286 mouseUp 5613188 nil]
		aMorph: 	a MenuMorph(513540096)
		localEvt: 	[408@286 mouseUp 5613188 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(520617984)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(520617984)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[408@286 mouseUp 5613188 nil]
		aMorph: 	a MenuMorph(513540096)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(513540096)
	Arguments and temporary variables: 
		anEvent: 	[408@286 mouseUp 5613188 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	392@273 corner: 539@620
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(520617984)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	392@273 corner: 539@620
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (528482304) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(520617984)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(520617984)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(513540096)
	Arguments and temporary variables: 
		anEvent: 	[408@286 mouseUp 5613188 nil]
	Receiver's instance variables: 
		bounds: 	392@273 corner: 539@620
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(520617984)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	392@273 corner: 539@620
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (528482304) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(520617984)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(520617984)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(513540096)
	Arguments and temporary variables: 
		evt: 	[408@286 mouseUp 5613188 nil]
	Receiver's instance variables: 
		bounds: 	392@273 corner: 539@620
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(520617984)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	392@273 corner: 539@620
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (528482304) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(520617984)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(520617984)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[408@286 mouseUp 5613188 nil]
		focusHolder: 	a MenuMorph(513540096)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	408@286 corner: 424@302
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	408@286 corner: 424@302
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(791150592)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[408@286 mouseUp 5613188 nil]
		targetOffset: 	10@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5613188 408 286 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(477888512) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[408@286 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(477888512) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[408@286 mouseUp 5613188 nil]
		focusHolder: 	a MenuMorph(513540096)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	408@286 corner: 424@302
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	408@286 corner: 424@302
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(791150592)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[408@286 mouseUp 5613188 nil]
		targetOffset: 	10@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5613188 408 286 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[408@286 mouseUp 5613188 nil]
		focusHolder: 	a MenuMorph(513540096)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	408@286 corner: 424@302
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	408@286 corner: 424@302
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(791150592)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[408@286 mouseUp 5613188 nil]
		targetOffset: 	10@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5613188 408 286 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[408@286 mouseUp 5613188 nil]
	Receiver's instance variables: 
		bounds: 	408@286 corner: 424@302
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	408@286 corner: 424@302
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(791150592)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[408@286 mouseUp 5613188 nil]
		targetOffset: 	10@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5613188 408 286 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[408@286 mouseUp 5613188 nil]
		evt: 	[408@286 mouseUp 5613188 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	408@286 corner: 424@302
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	408@286 corner: 424@302
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(791150592)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[408@286 mouseUp 5613188 nil]
		targetOffset: 	10@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5613188 408 286 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[408@286 mouseUp 5613188 nil]
		evtBuf: 	#(1 5613188 408 286 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	408@286 corner: 424@302
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	408@286 corner: 424@302
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(791150592)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[408@286 mouseUp 5613188 nil]
		targetOffset: 	10@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5613188 408 286 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1280@727
		canvas: 	a FormCanvas on: DisplayScreen(1280x727x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(477888512))(a PreDebu...etc...
		lastStepTime: 	5613176
		lastStepMessage: 	nil
		lastCycleTime: 	5613262
		alarms: 	a Heap()
		lastAlarmTime: 	5613176
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
Solo class(Object)>>doesNotUnderstand: #artistName:activeSince:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "addNominee:" is nil
14 January 2012 12:51:47 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #addNominee:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	addNominee: a Solo
		exception: 	MessageNotUnderstood: receiver of "addNominee:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		hetfield: 	a Solo
		ulrich: 	a Solo
		hammett: 	a Solo
		trujillo: 	a Solo
		metallica: 	a Band
		martin: 	a Solo
		fakefigures: 	a Band
		awardBestMaleSinger: 	nil
		awardBestNewcomerBand: 	nil
		ceremony: 	a Ceremony
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(224133120)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1988)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1988)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 979@706
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 979@706
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 5650306) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1988)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	156@157 corner: 1156@555
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	156@157 corner: 1156@555
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 1988)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(1310720)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[300@310 mouseUp 5650428 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	282@297 corner: 419@315
		owner: 	a MenuMorph(1067974656)
		submorphs: 	#()
		fullBounds: 	282@297 corner: 419@315
		color: 	Color black
		extension: 	a MorphExtension (11534336)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(1310720)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[300@310 mouseUp 5650428 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	282@297 corner: 419@315
		owner: 	a MenuMorph(1067974656)
		submorphs: 	#()
		fullBounds: 	282@297 corner: 419@315
		color: 	Color black
		extension: 	a MorphExtension (11534336)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(1310720)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[300@310 mouseUp 5650428 nil]
	Receiver's instance variables: 
		bounds: 	282@297 corner: 419@315
		owner: 	a MenuMorph(1067974656)
		submorphs: 	#()
		fullBounds: 	282@297 corner: 419@315
		color: 	Color black
		extension: 	a MorphExtension (11534336)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(1310720)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[300@310 mouseUp 5650428 nil]
	Receiver's instance variables: 
		bounds: 	282@297 corner: 419@315
		owner: 	a MenuMorph(1067974656)
		submorphs: 	#()
		fullBounds: 	282@297 corner: 419@315
		color: 	Color black
		extension: 	a MorphExtension (11534336)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [300@310 mouseUp 5650428 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(1310720)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	5650428
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	300@310
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(1310720)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[300@310 mouseUp 5650428 nil]
	Receiver's instance variables: 
		bounds: 	282@297 corner: 419@315
		owner: 	a MenuMorph(1067974656)
		submorphs: 	#()
		fullBounds: 	282@297 corner: 419@315
		color: 	Color black
		extension: 	a MorphExtension (11534336)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[300@310 mouseUp 5650428 nil]
		aMorph: 	a ToggleMenuItemMorph(1310720)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[300@310 mouseUp 5650428 nil]
		aMorph: 	a ToggleMenuItemMorph(1310720)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(1310720)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[300@310 mouseUp 5650428 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	282@297 corner: 419@315
		owner: 	a MenuMorph(1067974656)
		submorphs: 	#()
		fullBounds: 	282@297 corner: 419@315
		color: 	Color black
		extension: 	a MorphExtension (11534336)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[300@310 mouseUp 5650428 nil]
		aMorph: 	a MenuMorph(1067974656)
		localEvt: 	[300@310 mouseUp 5650428 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(1310720)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(1310720)'Do it (d)' a ToggleMenuItemMorp...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[300@310 mouseUp 5650428 nil]
		aMorph: 	a MenuMorph(1067974656)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(1067974656)
	Arguments and temporary variables: 
		anEvent: 	[300@310 mouseUp 5650428 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	277@292 corner: 424@639
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1310720)'Do it (d)' a ToggleMenuItemM...etc...
		fullBounds: 	277@292 corner: 424@639
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (9175040) [other:  (basicColor -> (Color r: 0.745 g...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(1310720)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(1310720)'Do it (d)' a Tog...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(1067974656)
	Arguments and temporary variables: 
		anEvent: 	[300@310 mouseUp 5650428 nil]
	Receiver's instance variables: 
		bounds: 	277@292 corner: 424@639
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1310720)'Do it (d)' a ToggleMenuItemM...etc...
		fullBounds: 	277@292 corner: 424@639
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (9175040) [other:  (basicColor -> (Color r: 0.745 g...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(1310720)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(1310720)'Do it (d)' a Tog...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(1067974656)
	Arguments and temporary variables: 
		evt: 	[300@310 mouseUp 5650428 nil]
	Receiver's instance variables: 
		bounds: 	277@292 corner: 424@639
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1310720)'Do it (d)' a ToggleMenuItemM...etc...
		fullBounds: 	277@292 corner: 424@639
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (9175040) [other:  (basicColor -> (Color r: 0.745 g...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(1310720)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(1310720)'Do it (d)' a Tog...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[300@310 mouseUp 5650428 nil]
		focusHolder: 	a MenuMorph(1067974656)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	300@310 corner: 316@326
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	300@310 corner: 316@326
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(832307200)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[300@310 mouseUp 5650428 nil]
		targetOffset: 	18@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5650428 300 310 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(464781312) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[300@310 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(464781312) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[300@310 mouseUp 5650428 nil]
		focusHolder: 	a MenuMorph(1067974656)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	300@310 corner: 316@326
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	300@310 corner: 316@326
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(832307200)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[300@310 mouseUp 5650428 nil]
		targetOffset: 	18@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5650428 300 310 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[300@310 mouseUp 5650428 nil]
		focusHolder: 	a MenuMorph(1067974656)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	300@310 corner: 316@326
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	300@310 corner: 316@326
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(832307200)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[300@310 mouseUp 5650428 nil]
		targetOffset: 	18@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5650428 300 310 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[300@310 mouseUp 5650428 nil]
	Receiver's instance variables: 
		bounds: 	300@310 corner: 316@326
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	300@310 corner: 316@326
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(832307200)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[300@310 mouseUp 5650428 nil]
		targetOffset: 	18@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5650428 300 310 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[300@310 mouseUp 5650428 nil]
		evt: 	[300@310 mouseUp 5650428 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	300@310 corner: 316@326
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	300@310 corner: 316@326
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(832307200)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[300@310 mouseUp 5650428 nil]
		targetOffset: 	18@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5650428 300 310 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[300@310 mouseUp 5650428 nil]
		evtBuf: 	#(1 5650428 300 310 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	300@310 corner: 316@326
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	300@310 corner: 316@326
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(832307200)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[300@310 mouseUp 5650428 nil]
		targetOffset: 	18@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 5650428 300 310 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1280@727
		canvas: 	a FormCanvas on: DisplayScreen(1280x727x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(464781312))(a PreDebu...etc...
		lastStepTime: 	5650414
		lastStepMessage: 	nil
		lastCycleTime: 	5650871
		alarms: 	a Heap()
		lastAlarmTime: 	5650414
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #addNominee:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Instances of SmallInteger are not indexable
16 January 2012 7:36:08 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

SmallInteger(Object)>>error:
	Receiver: 5
	Arguments and temporary variables: 
		aString: 	'Instances of SmallInteger are not indexable'
	Receiver's instance variables: 
5

SmallInteger(Object)>>errorNotIndexable
	Receiver: 5
	Arguments and temporary variables: 

	Receiver's instance variables: 
5

SmallInteger(Object)>>size
	Receiver: 5
	Arguments and temporary variables: 

	Receiver's instance variables: 
5

ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
	Receiver: '===='
	Arguments and temporary variables: 
		start: 	5
		stop: 	4
		replacementCollection: 	5
		newSequenceableCollection: 	nil
		newSize: 	nil
		endReplacement: 	nil
	Receiver's instance variables: 
'===='

ByteString(SequenceableCollection)>>,
	Receiver: '===='
	Arguments and temporary variables: 
		otherCollection: 	5
	Receiver's instance variables: 
'===='

SoloCategory(Category)>>vote:by:
	Receiver: a SoloCategory
	Arguments and temporary variables: 
		aVotee: 	a Solo
		aVoter: 	a Solo
		vote: 	a Vote
	Receiver's instance variables: 
		nominees: 	a LinkedList(a Solo a Solo a Solo a Solo a Band)
		jury: 	a LinkedList(a Solo a Solo a Solo a Solo a Solo)
		awardName: 	'Best male singer'
		votes: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		hetfield: 	a Solo
		ulrich: 	a Solo
		hammett: 	a Solo
		trujillo: 	a Solo
		metallica: 	a Band
		mustaine: 	a Solo
		drover: 	a Solo
		broderick: 	a Solo
		ellefson: 	a Solo
		megadeth: 	a Band
		martin: 	a Solo
		fakefigures: 	a Band
		awardBestMaleSinger: 	a SoloCategory
		awardBestNewcomerBand: 	nil
		ceremony: 	a Ceremony
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(139722752)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3281)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3281)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 799@1154
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 799@1154
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 9297881) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3281)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3281)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(98828288)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[326@314 mouseUp 9299247 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	314@306 corner: 451@324
		owner: 	a MenuMorph(91750400)
		submorphs: 	#()
		fullBounds: 	314@306 corner: 451@324
		color: 	Color black
		extension: 	a MorphExtension (109051904)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(98828288)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[326@314 mouseUp 9299247 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	314@306 corner: 451@324
		owner: 	a MenuMorph(91750400)
		submorphs: 	#()
		fullBounds: 	314@306 corner: 451@324
		color: 	Color black
		extension: 	a MorphExtension (109051904)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(98828288)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[326@314 mouseUp 9299247 nil]
	Receiver's instance variables: 
		bounds: 	314@306 corner: 451@324
		owner: 	a MenuMorph(91750400)
		submorphs: 	#()
		fullBounds: 	314@306 corner: 451@324
		color: 	Color black
		extension: 	a MorphExtension (109051904)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(98828288)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[326@314 mouseUp 9299247 nil]
	Receiver's instance variables: 
		bounds: 	314@306 corner: 451@324
		owner: 	a MenuMorph(91750400)
		submorphs: 	#()
		fullBounds: 	314@306 corner: 451@324
		color: 	Color black
		extension: 	a MorphExtension (109051904)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [326@314 mouseUp 9299247 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(98828288)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	9299247
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	326@314
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(98828288)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[326@314 mouseUp 9299247 nil]
	Receiver's instance variables: 
		bounds: 	314@306 corner: 451@324
		owner: 	a MenuMorph(91750400)
		submorphs: 	#()
		fullBounds: 	314@306 corner: 451@324
		color: 	Color black
		extension: 	a MorphExtension (109051904)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[326@314 mouseUp 9299247 nil]
		aMorph: 	a ToggleMenuItemMorph(98828288)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[326@314 mouseUp 9299247 nil]
		aMorph: 	a ToggleMenuItemMorph(98828288)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(98828288)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[326@314 mouseUp 9299247 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	314@306 corner: 451@324
		owner: 	a MenuMorph(91750400)
		submorphs: 	#()
		fullBounds: 	314@306 corner: 451@324
		color: 	Color black
		extension: 	a MorphExtension (109051904)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[326@314 mouseUp 9299247 nil]
		aMorph: 	a MenuMorph(91750400)
		localEvt: 	[326@314 mouseUp 9299247 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(98828288)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(98828288)'Do it (d)' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[326@314 mouseUp 9299247 nil]
		aMorph: 	a MenuMorph(91750400)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(91750400)
	Arguments and temporary variables: 
		anEvent: 	[326@314 mouseUp 9299247 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	309@301 corner: 456@648
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(98828288)'Do it (d)' a ToggleMenuItem...etc...
		fullBounds: 	309@301 corner: 456@648
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (106692608) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(98828288)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(98828288)'Do it (d)' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(91750400)
	Arguments and temporary variables: 
		anEvent: 	[326@314 mouseUp 9299247 nil]
	Receiver's instance variables: 
		bounds: 	309@301 corner: 456@648
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(98828288)'Do it (d)' a ToggleMenuItem...etc...
		fullBounds: 	309@301 corner: 456@648
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (106692608) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(98828288)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(98828288)'Do it (d)' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(91750400)
	Arguments and temporary variables: 
		evt: 	[326@314 mouseUp 9299247 nil]
	Receiver's instance variables: 
		bounds: 	309@301 corner: 456@648
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(98828288)'Do it (d)' a ToggleMenuItem...etc...
		fullBounds: 	309@301 corner: 456@648
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (106692608) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(98828288)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(98828288)'Do it (d)' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[326@314 mouseUp 9299247 nil]
		focusHolder: 	a MenuMorph(91750400)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	250@377 corner: 266@393
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	250@377 corner: 266@393
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(551813120)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[326@314 250@377 mouseMove 9299463 nil]
		targetOffset: 	12@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 9299463 324 314 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(281018368) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[326@314 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(281018368) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[326@314 mouseUp 9299247 nil]
		focusHolder: 	a MenuMorph(91750400)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	250@377 corner: 266@393
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	250@377 corner: 266@393
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(551813120)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[326@314 250@377 mouseMove 9299463 nil]
		targetOffset: 	12@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 9299463 324 314 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil



--- The full stack ---
SmallInteger(Object)>>error:
SmallInteger(Object)>>errorNotIndexable
SmallInteger(Object)>>size
ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
ByteString(SequenceableCollection)>>,
SoloCategory(Category)>>vote:by:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Instances of SmallInteger are not indexable
16 January 2012 7:36:34 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

SmallInteger(Object)>>error:
	Receiver: 5
	Arguments and temporary variables: 
		aString: 	'Instances of SmallInteger are not indexable'
	Receiver's instance variables: 
5

SmallInteger(Object)>>errorNotIndexable
	Receiver: 5
	Arguments and temporary variables: 

	Receiver's instance variables: 
5

SmallInteger(Object)>>size
	Receiver: 5
	Arguments and temporary variables: 

	Receiver's instance variables: 
5

ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
	Receiver: '===='
	Arguments and temporary variables: 
		start: 	5
		stop: 	4
		replacementCollection: 	5
		newSequenceableCollection: 	nil
		newSize: 	nil
		endReplacement: 	nil
	Receiver's instance variables: 
'===='

ByteString(SequenceableCollection)>>,
	Receiver: '===='
	Arguments and temporary variables: 
		otherCollection: 	5
	Receiver's instance variables: 
'===='

SoloCategory(Category)>>vote:by:
	Receiver: a SoloCategory
	Arguments and temporary variables: 
		aVotee: 	a Solo
		aVoter: 	a Solo
		vote: 	a Vote
	Receiver's instance variables: 
		nominees: 	a LinkedList(a Solo a Solo a Solo a Solo a Band)
		jury: 	a LinkedList(a Solo a Solo a Solo a Solo a Solo)
		awardName: 	'Best male singer'
		votes: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		hetfield: 	a Solo
		ulrich: 	a Solo
		hammett: 	a Solo
		trujillo: 	a Solo
		metallica: 	a Band
		mustaine: 	a Solo
		drover: 	a Solo
		broderick: 	a Solo
		ellefson: 	a Solo
		megadeth: 	a Band
		martin: 	a Solo
		fakefigures: 	a Band
		awardBestMaleSinger: 	a SoloCategory
		awardBestNewcomerBand: 	nil
		ceremony: 	a Ceremony
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(1031536640)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3281)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3281)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 799@1154
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 799@1154
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 9325457) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3281)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3281)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(780140544)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[415@323 mouseUp 9325496 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	400@315 corner: 537@333
		owner: 	a MenuMorph(718012416)
		submorphs: 	#()
		fullBounds: 	400@315 corner: 537@333
		color: 	Color black
		extension: 	a MorphExtension (790364160)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(780140544)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[415@323 mouseUp 9325496 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	400@315 corner: 537@333
		owner: 	a MenuMorph(718012416)
		submorphs: 	#()
		fullBounds: 	400@315 corner: 537@333
		color: 	Color black
		extension: 	a MorphExtension (790364160)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(780140544)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[415@323 mouseUp 9325496 nil]
	Receiver's instance variables: 
		bounds: 	400@315 corner: 537@333
		owner: 	a MenuMorph(718012416)
		submorphs: 	#()
		fullBounds: 	400@315 corner: 537@333
		color: 	Color black
		extension: 	a MorphExtension (790364160)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(780140544)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[415@323 mouseUp 9325496 nil]
	Receiver's instance variables: 
		bounds: 	400@315 corner: 537@333
		owner: 	a MenuMorph(718012416)
		submorphs: 	#()
		fullBounds: 	400@315 corner: 537@333
		color: 	Color black
		extension: 	a MorphExtension (790364160)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [415@323 mouseUp 9325496 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(780140544)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	9325496
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	415@323
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(780140544)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[415@323 mouseUp 9325496 nil]
	Receiver's instance variables: 
		bounds: 	400@315 corner: 537@333
		owner: 	a MenuMorph(718012416)
		submorphs: 	#()
		fullBounds: 	400@315 corner: 537@333
		color: 	Color black
		extension: 	a MorphExtension (790364160)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[415@323 mouseUp 9325496 nil]
		aMorph: 	a ToggleMenuItemMorph(780140544)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[415@323 mouseUp 9325496 nil]
		aMorph: 	a ToggleMenuItemMorph(780140544)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(780140544)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[415@323 mouseUp 9325496 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	400@315 corner: 537@333
		owner: 	a MenuMorph(718012416)
		submorphs: 	#()
		fullBounds: 	400@315 corner: 537@333
		color: 	Color black
		extension: 	a MorphExtension (790364160)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[415@323 mouseUp 9325496 nil]
		aMorph: 	a MenuMorph(718012416)
		localEvt: 	[415@323 mouseUp 9325496 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(780140544)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(780140544)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[415@323 mouseUp 9325496 nil]
		aMorph: 	a MenuMorph(718012416)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(718012416)
	Arguments and temporary variables: 
		anEvent: 	[415@323 mouseUp 9325496 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	395@310 corner: 542@657
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(780140544)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	395@310 corner: 542@657
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (732954624) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(780140544)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(780140544)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(718012416)
	Arguments and temporary variables: 
		anEvent: 	[415@323 mouseUp 9325496 nil]
	Receiver's instance variables: 
		bounds: 	395@310 corner: 542@657
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(780140544)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	395@310 corner: 542@657
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (732954624) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(780140544)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(780140544)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(718012416)
	Arguments and temporary variables: 
		evt: 	[415@323 mouseUp 9325496 nil]
	Receiver's instance variables: 
		bounds: 	395@310 corner: 542@657
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(780140544)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	395@310 corner: 542@657
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (732954624) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(780140544)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(780140544)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[415@323 mouseUp 9325496 nil]
		focusHolder: 	a MenuMorph(718012416)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	215@384 corner: 231@400
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(649592832)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[415@323 215@384 mouseMove 9325687 nil]
		targetOffset: 	15@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 9325687 414 324 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(173801472) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[415@323 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(173801472) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[415@323 mouseUp 9325496 nil]
		focusHolder: 	a MenuMorph(718012416)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	215@384 corner: 231@400
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(649592832)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[415@323 215@384 mouseMove 9325687 nil]
		targetOffset: 	15@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 9325687 414 324 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil



--- The full stack ---
SmallInteger(Object)>>error:
SmallInteger(Object)>>errorNotIndexable
SmallInteger(Object)>>size
ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
ByteString(SequenceableCollection)>>,
SoloCategory(Category)>>vote:by:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>key
16 January 2012 10:06:04 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

ByteString(Object)>>doesNotUnderstand: #key
	Receiver: 'Lars Ulrich'
	Arguments and temporary variables: 
		aMessage: 	key
		exception: 	MessageNotUnderstood: ByteString>>key
		resumeValue: 	nil
	Receiver's instance variables: 
'Lars Ulrich'

Dictionary>>add:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		anAssociation: 	'Lars Ulrich'
		index: 	nil
		element: 	nil
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


SoloCategory(Category)>>vote:by:
	Receiver: a SoloCategory
	Arguments and temporary variables: 
		aVotee: 	a Solo
		aVoter: 	a Solo
	Receiver's instance variables: 
		nominees: 	a LinkedList(a Solo a Solo a Solo a Solo a Solo)
		jury: 	a LinkedList(a Solo a Solo a Solo a Solo a Solo)
		awardName: 	'Best male singer'
		votes: 	a Dictionary(a Solo->1 )
		juryVoted: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		hetfield: 	a Solo
		ulrich: 	a Solo
		hammett: 	a Solo
		trujillo: 	a Solo
		metallica: 	a Band
		mustaine: 	a Solo
		drover: 	a Solo
		broderick: 	a Solo
		ellefson: 	a Solo
		megadeth: 	a Band
		martin: 	a Solo
		fakefigures: 	a Band
		awardBestMaleSinger: 	a SoloCategory
		awardBestNewcomerBand: 	nil
		ceremony: 	a Ceremony
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(543686656)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3359)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3359)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 799@1186
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 799@1186
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 18295037) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3359)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3359)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(764674048)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[451@258 mouseUp 18295031 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	435@248 corner: 572@266
		owner: 	a MenuMorph(214171648)
		submorphs: 	#()
		fullBounds: 	435@248 corner: 572@266
		color: 	Color black
		extension: 	a MorphExtension (774897664)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(764674048)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[451@258 mouseUp 18295031 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	435@248 corner: 572@266
		owner: 	a MenuMorph(214171648)
		submorphs: 	#()
		fullBounds: 	435@248 corner: 572@266
		color: 	Color black
		extension: 	a MorphExtension (774897664)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(764674048)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[451@258 mouseUp 18295031 nil]
	Receiver's instance variables: 
		bounds: 	435@248 corner: 572@266
		owner: 	a MenuMorph(214171648)
		submorphs: 	#()
		fullBounds: 	435@248 corner: 572@266
		color: 	Color black
		extension: 	a MorphExtension (774897664)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(764674048)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[451@258 mouseUp 18295031 nil]
	Receiver's instance variables: 
		bounds: 	435@248 corner: 572@266
		owner: 	a MenuMorph(214171648)
		submorphs: 	#()
		fullBounds: 	435@248 corner: 572@266
		color: 	Color black
		extension: 	a MorphExtension (774897664)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [451@258 mouseUp 18295031 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(764674048)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	18295031
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	451@258
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(764674048)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[451@258 mouseUp 18295031 nil]
	Receiver's instance variables: 
		bounds: 	435@248 corner: 572@266
		owner: 	a MenuMorph(214171648)
		submorphs: 	#()
		fullBounds: 	435@248 corner: 572@266
		color: 	Color black
		extension: 	a MorphExtension (774897664)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[451@258 mouseUp 18295031 nil]
		aMorph: 	a ToggleMenuItemMorph(764674048)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[451@258 mouseUp 18295031 nil]
		aMorph: 	a ToggleMenuItemMorph(764674048)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(764674048)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[451@258 mouseUp 18295031 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	435@248 corner: 572@266
		owner: 	a MenuMorph(214171648)
		submorphs: 	#()
		fullBounds: 	435@248 corner: 572@266
		color: 	Color black
		extension: 	a MorphExtension (774897664)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[451@258 mouseUp 18295031 nil]
		aMorph: 	a MenuMorph(214171648)
		localEvt: 	[451@258 mouseUp 18295031 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(764674048)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(764674048)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[451@258 mouseUp 18295031 nil]
		aMorph: 	a MenuMorph(214171648)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(214171648)
	Arguments and temporary variables: 
		anEvent: 	[451@258 mouseUp 18295031 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	430@243 corner: 577@590
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(764674048)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	430@243 corner: 577@590
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (229113856) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(764674048)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(764674048)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(214171648)
	Arguments and temporary variables: 
		anEvent: 	[451@258 mouseUp 18295031 nil]
	Receiver's instance variables: 
		bounds: 	430@243 corner: 577@590
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(764674048)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	430@243 corner: 577@590
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (229113856) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(764674048)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(764674048)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(214171648)
	Arguments and temporary variables: 
		evt: 	[451@258 mouseUp 18295031 nil]
	Receiver's instance variables: 
		bounds: 	430@243 corner: 577@590
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(764674048)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	430@243 corner: 577@590
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (229113856) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(764674048)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(764674048)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[451@258 mouseUp 18295031 nil]
		focusHolder: 	a MenuMorph(214171648)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	180@392 corner: 196@408
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(948699136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[451@258 180@392 mouseMove 18295213 nil]
		targetOffset: 	16@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 18295213 449 258 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(635437056) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[451@258 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(635437056) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[451@258 mouseUp 18295031 nil]
		focusHolder: 	a MenuMorph(214171648)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	180@392 corner: 196@408
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(948699136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[451@258 180@392 mouseMove 18295213 nil]
		targetOffset: 	16@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 18295213 449 258 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[451@258 mouseUp 18295031 nil]
		focusHolder: 	a MenuMorph(214171648)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	180@392 corner: 196@408
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(948699136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[451@258 180@392 mouseMove 18295213 nil]
		targetOffset: 	16@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 18295213 449 258 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[451@258 mouseUp 18295031 nil]
	Receiver's instance variables: 
		bounds: 	180@392 corner: 196@408
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(948699136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[451@258 180@392 mouseMove 18295213 nil]
		targetOffset: 	16@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 18295213 449 258 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[451@258 mouseUp 18295031 nil]
		evt: 	[451@258 mouseUp 18295031 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	180@392 corner: 196@408
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(948699136)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[451@258 180@392 mouseMove 18295213 nil]
		targetOffset: 	16@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 18295213 449 258 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #key
Dictionary>>add:
SoloCategory(Category)>>vote:by:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Dictionary>>put:
16 January 2012 10:06:32 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

Dictionary(Object)>>doesNotUnderstand: #put:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		aMessage: 	put: 'Lars Ulrich'
		exception: 	MessageNotUnderstood: Dictionary>>put:
		resumeValue: 	nil
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


SoloCategory(Category)>>vote:by:
	Receiver: a SoloCategory
	Arguments and temporary variables: 
		aVotee: 	a Solo
		aVoter: 	a Solo
	Receiver's instance variables: 
		nominees: 	a LinkedList(a Solo a Solo a Solo a Solo a Solo)
		jury: 	a LinkedList(a Solo a Solo a Solo a Solo a Solo)
		awardName: 	'Best male singer'
		votes: 	a Dictionary(a Solo->1 )
		juryVoted: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		hetfield: 	a Solo
		ulrich: 	a Solo
		hammett: 	a Solo
		trujillo: 	a Solo
		metallica: 	a Band
		mustaine: 	a Solo
		drover: 	a Solo
		broderick: 	a Solo
		ellefson: 	a Solo
		megadeth: 	a Band
		martin: 	a Solo
		fakefigures: 	a Band
		awardBestMaleSinger: 	a SoloCategory
		awardBestNewcomerBand: 	nil
		ceremony: 	a Ceremony
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(1058537472)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3359)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3359)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 799@1186
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 799@1186
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 18322813) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3359)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3359)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(813170688)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[459@261 mouseUp 18322759 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	446@252 corner: 583@270
		owner: 	a MenuMorph(806092800)
		submorphs: 	#()
		fullBounds: 	446@252 corner: 583@270
		color: 	Color black
		extension: 	a MorphExtension (823394304)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(813170688)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[459@261 mouseUp 18322759 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	446@252 corner: 583@270
		owner: 	a MenuMorph(806092800)
		submorphs: 	#()
		fullBounds: 	446@252 corner: 583@270
		color: 	Color black
		extension: 	a MorphExtension (823394304)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(813170688)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[459@261 mouseUp 18322759 nil]
	Receiver's instance variables: 
		bounds: 	446@252 corner: 583@270
		owner: 	a MenuMorph(806092800)
		submorphs: 	#()
		fullBounds: 	446@252 corner: 583@270
		color: 	Color black
		extension: 	a MorphExtension (823394304)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(813170688)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[459@261 mouseUp 18322759 nil]
	Receiver's instance variables: 
		bounds: 	446@252 corner: 583@270
		owner: 	a MenuMorph(806092800)
		submorphs: 	#()
		fullBounds: 	446@252 corner: 583@270
		color: 	Color black
		extension: 	a MorphExtension (823394304)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [459@261 mouseUp 18322759 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(813170688)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	18322759
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	459@261
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(813170688)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[459@261 mouseUp 18322759 nil]
	Receiver's instance variables: 
		bounds: 	446@252 corner: 583@270
		owner: 	a MenuMorph(806092800)
		submorphs: 	#()
		fullBounds: 	446@252 corner: 583@270
		color: 	Color black
		extension: 	a MorphExtension (823394304)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[459@261 mouseUp 18322759 nil]
		aMorph: 	a ToggleMenuItemMorph(813170688)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[459@261 mouseUp 18322759 nil]
		aMorph: 	a ToggleMenuItemMorph(813170688)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(813170688)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[459@261 mouseUp 18322759 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	446@252 corner: 583@270
		owner: 	a MenuMorph(806092800)
		submorphs: 	#()
		fullBounds: 	446@252 corner: 583@270
		color: 	Color black
		extension: 	a MorphExtension (823394304)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[459@261 mouseUp 18322759 nil]
		aMorph: 	a MenuMorph(806092800)
		localEvt: 	[459@261 mouseUp 18322759 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(813170688)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(813170688)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[459@261 mouseUp 18322759 nil]
		aMorph: 	a MenuMorph(806092800)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(806092800)
	Arguments and temporary variables: 
		anEvent: 	[459@261 mouseUp 18322759 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	441@247 corner: 588@594
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(813170688)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	441@247 corner: 588@594
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (821035008) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(813170688)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(813170688)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(806092800)
	Arguments and temporary variables: 
		anEvent: 	[459@261 mouseUp 18322759 nil]
	Receiver's instance variables: 
		bounds: 	441@247 corner: 588@594
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(813170688)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	441@247 corner: 588@594
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (821035008) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(813170688)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(813170688)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(806092800)
	Arguments and temporary variables: 
		evt: 	[459@261 mouseUp 18322759 nil]
	Receiver's instance variables: 
		bounds: 	441@247 corner: 588@594
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(813170688)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	441@247 corner: 588@594
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (821035008) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(813170688)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(813170688)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[459@261 mouseUp 18322759 nil]
		focusHolder: 	a MenuMorph(806092800)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	459@261 corner: 475@277
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	459@261 corner: 475@277
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1025245184)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[459@261 mouseUp 18322759 nil]
		targetOffset: 	13@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 18322759 459 261 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(711983104) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[459@261 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(711983104) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[459@261 mouseUp 18322759 nil]
		focusHolder: 	a MenuMorph(806092800)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	459@261 corner: 475@277
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	459@261 corner: 475@277
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1025245184)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[459@261 mouseUp 18322759 nil]
		targetOffset: 	13@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 18322759 459 261 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[459@261 mouseUp 18322759 nil]
		focusHolder: 	a MenuMorph(806092800)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	459@261 corner: 475@277
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	459@261 corner: 475@277
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1025245184)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[459@261 mouseUp 18322759 nil]
		targetOffset: 	13@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 18322759 459 261 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[459@261 mouseUp 18322759 nil]
	Receiver's instance variables: 
		bounds: 	459@261 corner: 475@277
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	459@261 corner: 475@277
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1025245184)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[459@261 mouseUp 18322759 nil]
		targetOffset: 	13@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 18322759 459 261 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[459@261 mouseUp 18322759 nil]
		evt: 	[459@261 mouseUp 18322759 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	459@261 corner: 475@277
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	459@261 corner: 475@277
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1025245184)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[459@261 mouseUp 18322759 nil]
		targetOffset: 	13@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 18322759 459 261 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[459@261 mouseUp 18322759 nil]
		evtBuf: 	#(1 18322759 459 261 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	459@261 corner: 475@277
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	459@261 corner: 475@277
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1025245184)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[459@261 mouseUp 18322759 nil]
		targetOffset: 	13@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 18322759 459 261 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil



--- The full stack ---
Dictionary(Object)>>doesNotUnderstand: #put:
SoloCategory(Category)>>vote:by:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: SmallInteger>>votee
16 January 2012 10:09:34 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

SmallInteger(Object)>>doesNotUnderstand: #votee
	Receiver: 1
	Arguments and temporary variables: 
		aMessage: 	votee
		exception: 	MessageNotUnderstood: SmallInteger>>votee
		resumeValue: 	nil
	Receiver's instance variables: 
1

[:vote | vote votee == anArtist
		ifTrue: [ctr := ctr + 1]] in SoloCategory(Category)>>numberVotesArtist:
	Receiver: a SoloCategory
	Arguments and temporary variables: 
		anArtist: 	1
		ctr: 	a Solo
		vote: 	#(0)
	Receiver's instance variables: 
		nominees: 	a LinkedList(a Solo a Solo a Solo a Solo a Solo)
		jury: 	a LinkedList(a Solo a Solo a Solo a Solo a Solo)
		awardName: 	'Best male singer'
		votes: 	a Dictionary(a Solo->1 a Solo->1 )
		juryVoted: 	a LinkedList('Lars Ulrich' 'Rus Martin' 'Robert Trujillo' 'Kirk Hamm...etc...


[:association | aBlock value: association value] in Dictionary>>valuesDo:
	Receiver: a Dictionary(a Solo->1 a Solo->1 )
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		association: 	[:vote | vote votee == anArtist
		ifTrue: [ctr := ctr + 1]]
	Receiver's instance variables: 
		tally: 	2
		array: 	an Array(nil a Solo->1 a Solo->1 nil nil)


[:each | each
		ifNotNil: [aBlock value: each]] in Dictionary>>associationsDo:
	Receiver: a Dictionary(a Solo->1 a Solo->1 )
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		each: 	[:association | aBlock value: association value]
	Receiver's instance variables: 
		tally: 	2
		array: 	an Array(nil a Solo->1 a Solo->1 nil nil)


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil a Solo->1 a Solo->1 nil nil)
	Arguments and temporary variables: 
		aBlock: 	[:each | each
		ifNotNil: [aBlock value: each]]
		index: 	2
		indexLimiT: 	5
	Receiver's instance variables: 
an Array(nil a Solo->1 a Solo->1 nil nil)

Dictionary>>associationsDo:
	Receiver: a Dictionary(a Solo->1 a Solo->1 )
	Arguments and temporary variables: 
		aBlock: 	[:association | aBlock value: association value]
	Receiver's instance variables: 
		tally: 	2
		array: 	an Array(nil a Solo->1 a Solo->1 nil nil)


Dictionary>>valuesDo:
	Receiver: a Dictionary(a Solo->1 a Solo->1 )
	Arguments and temporary variables: 
		aBlock: 	[:vote | vote votee == anArtist
		ifTrue: [ctr := ctr + 1]]
	Receiver's instance variables: 
		tally: 	2
		array: 	an Array(nil a Solo->1 a Solo->1 nil nil)


Dictionary>>do:
	Receiver: a Dictionary(a Solo->1 a Solo->1 )
	Arguments and temporary variables: 
		aBlock: 	[:vote | vote votee == anArtist
		ifTrue: [ctr := ctr + 1]]
	Receiver's instance variables: 
		tally: 	2
		array: 	an Array(nil a Solo->1 a Solo->1 nil nil)


SoloCategory(Category)>>numberVotesArtist:
	Receiver: a SoloCategory
	Arguments and temporary variables: 
		anArtist: 	a Solo
		ctr: 	#(0)
	Receiver's instance variables: 
		nominees: 	a LinkedList(a Solo a Solo a Solo a Solo a Solo)
		jury: 	a LinkedList(a Solo a Solo a Solo a Solo a Solo)
		awardName: 	'Best male singer'
		votes: 	a Dictionary(a Solo->1 a Solo->1 )
		juryVoted: 	a LinkedList('Lars Ulrich' 'Rus Martin' 'Robert Trujillo' 'Kirk Hamm...etc...


[:nominee | self notice: nominee artistName , ': ' , (self numberVotesArtist: nominee) asString] in SoloCategory(Category)>>voteResults
	Receiver: a SoloCategory
	Arguments and temporary variables: 
		nominee: 	a Solo
	Receiver's instance variables: 
		nominees: 	a LinkedList(a Solo a Solo a Solo a Solo a Solo)
		jury: 	a LinkedList(a Solo a Solo a Solo a Solo a Solo)
		awardName: 	'Best male singer'
		votes: 	a Dictionary(a Solo->1 a Solo->1 )
		juryVoted: 	a LinkedList('Lars Ulrich' 'Rus Martin' 'Robert Trujillo' 'Kirk Hamm...etc...


LinkedList>>do:
	Receiver: a LinkedList(a Solo a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	[:nominee | self notice: nominee artistName , ': ' , (self numberVotesA...etc...
		aLink: 	ValueLink(a Solo)
	Receiver's instance variables: 
		firstLink: 	ValueLink(a Solo)
		lastLink: 	ValueLink(a Solo)


SoloCategory(Category)>>voteResults
	Receiver: a SoloCategory
	Arguments and temporary variables: 
		votesPerArtist: 	false
	Receiver's instance variables: 
		nominees: 	a LinkedList(a Solo a Solo a Solo a Solo a Solo)
		jury: 	a LinkedList(a Solo a Solo a Solo a Solo a Solo)
		awardName: 	'Best male singer'
		votes: 	a Dictionary(a Solo->1 a Solo->1 )
		juryVoted: 	a LinkedList('Lars Ulrich' 'Rus Martin' 'Robert Trujillo' 'Kirk Hamm...etc...


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		hetfield: 	a Solo
		ulrich: 	a Solo
		hammett: 	a Solo
		trujillo: 	a Solo
		metallica: 	a Band
		mustaine: 	a Solo
		drover: 	a Solo
		broderick: 	a Solo
		ellefson: 	a Solo
		megadeth: 	a Band
		martin: 	a Solo
		fakefigures: 	a Band
		awardBestMaleSinger: 	a SoloCategory
		awardBestNewcomerBand: 	nil
		ceremony: 	a Ceremony
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(1055916032)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3359)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3359)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 799@1186
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 799@1186
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 18504503) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3359)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3359)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(1052770304)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[441@313 mouseUp 18504503 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	417@307 corner: 554@325
		owner: 	a MenuMorph(1045692416)
		submorphs: 	#()
		fullBounds: 	417@307 corner: 554@325
		color: 	Color black
		extension: 	a MorphExtension (1062993920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(1052770304)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[441@313 mouseUp 18504503 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	417@307 corner: 554@325
		owner: 	a MenuMorph(1045692416)
		submorphs: 	#()
		fullBounds: 	417@307 corner: 554@325
		color: 	Color black
		extension: 	a MorphExtension (1062993920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(1052770304)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[441@313 mouseUp 18504503 nil]
	Receiver's instance variables: 
		bounds: 	417@307 corner: 554@325
		owner: 	a MenuMorph(1045692416)
		submorphs: 	#()
		fullBounds: 	417@307 corner: 554@325
		color: 	Color black
		extension: 	a MorphExtension (1062993920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(1052770304)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[441@313 mouseUp 18504503 nil]
	Receiver's instance variables: 
		bounds: 	417@307 corner: 554@325
		owner: 	a MenuMorph(1045692416)
		submorphs: 	#()
		fullBounds: 	417@307 corner: 554@325
		color: 	Color black
		extension: 	a MorphExtension (1062993920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [441@313 mouseUp 18504503 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(1052770304)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	18504503
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	441@313
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(1052770304)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[441@313 mouseUp 18504503 nil]
	Receiver's instance variables: 
		bounds: 	417@307 corner: 554@325
		owner: 	a MenuMorph(1045692416)
		submorphs: 	#()
		fullBounds: 	417@307 corner: 554@325
		color: 	Color black
		extension: 	a MorphExtension (1062993920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[441@313 mouseUp 18504503 nil]
		aMorph: 	a ToggleMenuItemMorph(1052770304)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[441@313 mouseUp 18504503 nil]
		aMorph: 	a ToggleMenuItemMorph(1052770304)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(1052770304)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[441@313 mouseUp 18504503 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	417@307 corner: 554@325
		owner: 	a MenuMorph(1045692416)
		submorphs: 	#()
		fullBounds: 	417@307 corner: 554@325
		color: 	Color black
		extension: 	a MorphExtension (1062993920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[441@313 mouseUp 18504503 nil]
		aMorph: 	a MenuMorph(1045692416)
		localEvt: 	[441@313 mouseUp 18504503 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(1052770304)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(1052770304)'Do it (d)' a ToggleMenuItemM...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[441@313 mouseUp 18504503 nil]
		aMorph: 	a MenuMorph(1045692416)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(1045692416)
	Arguments and temporary variables: 
		anEvent: 	[441@313 mouseUp 18504503 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	412@302 corner: 559@649
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1052770304)'Do it (d)' a ToggleMenuIt...etc...
		fullBounds: 	412@302 corner: 559@649
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (1060634624) [other:  (basicColor -> (Color r: 0.74...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(1052770304)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(1052770304)'Do it (d)' a ...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(1045692416)
	Arguments and temporary variables: 
		anEvent: 	[441@313 mouseUp 18504503 nil]
	Receiver's instance variables: 
		bounds: 	412@302 corner: 559@649
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1052770304)'Do it (d)' a ToggleMenuIt...etc...
		fullBounds: 	412@302 corner: 559@649
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (1060634624) [other:  (basicColor -> (Color r: 0.74...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(1052770304)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(1052770304)'Do it (d)' a ...etc...



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #votee
[:vote | vote votee == anArtist
		ifTrue: [ctr := ctr + 1]] in SoloCategory(Category)>>numberVotesArtist:
[:association | aBlock value: association value] in Dictionary>>valuesDo:
[:each | each
		ifNotNil: [aBlock value: each]] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Dictionary>>valuesDo:
Dictionary>>do:
SoloCategory(Category)>>numberVotesArtist:
[:nominee | self notice: nominee artistName , ': ' , (self numberVotesArtist: nominee) asString] in SoloCategory(Category)>>voteResults
LinkedList>>do:
SoloCategory(Category)>>voteResults
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
KeyNotFound: key a Solo not found in Dictionary
16 January 2012 10:10:28 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary(a Solo->1 a Solo->1 )
	Arguments and temporary variables: 
		aKey: 	a Solo
	Receiver's instance variables: 
		tally: 	2
		array: 	an Array(nil a Solo->1 a Solo->1 nil nil)


[self errorKeyNotFound: key] in Dictionary>>at:
	Receiver: a Dictionary(a Solo->1 a Solo->1 )
	Arguments and temporary variables: 
		key: 	a Solo
	Receiver's instance variables: 
		tally: 	2
		array: 	an Array(nil a Solo->1 a Solo->1 nil nil)


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary(a Solo->1 a Solo->1 )
	Arguments and temporary variables: 
		key: 	a Solo
		aBlock: 	[self errorKeyNotFound: key]
		assoc: 	nil
	Receiver's instance variables: 
		tally: 	2
		array: 	an Array(nil a Solo->1 a Solo->1 nil nil)


Dictionary>>at:
	Receiver: a Dictionary(a Solo->1 a Solo->1 )
	Arguments and temporary variables: 
		key: 	a Solo
	Receiver's instance variables: 
		tally: 	2
		array: 	an Array(nil a Solo->1 a Solo->1 nil nil)


[:nominee | self notice: nominee artistName , ': ' , (self votes at: nominee) asString] in SoloCategory(Category)>>voteResults
	Receiver: a SoloCategory
	Arguments and temporary variables: 
		nominee: 	a Solo
	Receiver's instance variables: 
		nominees: 	a LinkedList(a Solo a Solo a Solo a Solo a Solo)
		jury: 	a LinkedList(a Solo a Solo a Solo a Solo a Solo)
		awardName: 	'Best male singer'
		votes: 	a Dictionary(a Solo->1 a Solo->1 )
		juryVoted: 	a LinkedList('Lars Ulrich' 'Rus Martin' 'Robert Trujillo' 'Kirk Hamm...etc...


LinkedList>>do:
	Receiver: a LinkedList(a Solo a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	[:nominee | self notice: nominee artistName , ': ' , (self votes at: no...etc...
		aLink: 	ValueLink(a Solo)
	Receiver's instance variables: 
		firstLink: 	ValueLink(a Solo)
		lastLink: 	ValueLink(a Solo)


SoloCategory(Category)>>voteResults
	Receiver: a SoloCategory
	Arguments and temporary variables: 
		votesPerArtist: 	false
	Receiver's instance variables: 
		nominees: 	a LinkedList(a Solo a Solo a Solo a Solo a Solo)
		jury: 	a LinkedList(a Solo a Solo a Solo a Solo a Solo)
		awardName: 	'Best male singer'
		votes: 	a Dictionary(a Solo->1 a Solo->1 )
		juryVoted: 	a LinkedList('Lars Ulrich' 'Rus Martin' 'Robert Trujillo' 'Kirk Hamm...etc...


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		hetfield: 	a Solo
		ulrich: 	a Solo
		hammett: 	a Solo
		trujillo: 	a Solo
		metallica: 	a Band
		mustaine: 	a Solo
		drover: 	a Solo
		broderick: 	a Solo
		ellefson: 	a Solo
		megadeth: 	a Band
		martin: 	a Solo
		fakefigures: 	a Band
		awardBestMaleSinger: 	a SoloCategory
		awardBestNewcomerBand: 	nil
		ceremony: 	a Ceremony
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(661913600)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3359)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3359)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 799@1186
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 799@1186
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 18559067) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3359)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3359)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(152567808)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[446@285 mouseUp 18558991 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	436@279 corner: 573@297
		owner: 	a MenuMorph(145489920)
		submorphs: 	#()
		fullBounds: 	436@279 corner: 573@297
		color: 	Color black
		extension: 	a MorphExtension (162791424)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(152567808)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[446@285 mouseUp 18558991 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	436@279 corner: 573@297
		owner: 	a MenuMorph(145489920)
		submorphs: 	#()
		fullBounds: 	436@279 corner: 573@297
		color: 	Color black
		extension: 	a MorphExtension (162791424)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(152567808)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[446@285 mouseUp 18558991 nil]
	Receiver's instance variables: 
		bounds: 	436@279 corner: 573@297
		owner: 	a MenuMorph(145489920)
		submorphs: 	#()
		fullBounds: 	436@279 corner: 573@297
		color: 	Color black
		extension: 	a MorphExtension (162791424)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(152567808)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[446@285 mouseUp 18558991 nil]
	Receiver's instance variables: 
		bounds: 	436@279 corner: 573@297
		owner: 	a MenuMorph(145489920)
		submorphs: 	#()
		fullBounds: 	436@279 corner: 573@297
		color: 	Color black
		extension: 	a MorphExtension (162791424)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [446@285 mouseUp 18558991 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(152567808)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	18558991
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	446@285
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(152567808)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[446@285 mouseUp 18558991 nil]
	Receiver's instance variables: 
		bounds: 	436@279 corner: 573@297
		owner: 	a MenuMorph(145489920)
		submorphs: 	#()
		fullBounds: 	436@279 corner: 573@297
		color: 	Color black
		extension: 	a MorphExtension (162791424)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[446@285 mouseUp 18558991 nil]
		aMorph: 	a ToggleMenuItemMorph(152567808)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[446@285 mouseUp 18558991 nil]
		aMorph: 	a ToggleMenuItemMorph(152567808)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(152567808)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[446@285 mouseUp 18558991 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	436@279 corner: 573@297
		owner: 	a MenuMorph(145489920)
		submorphs: 	#()
		fullBounds: 	436@279 corner: 573@297
		color: 	Color black
		extension: 	a MorphExtension (162791424)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[446@285 mouseUp 18558991 nil]
		aMorph: 	a MenuMorph(145489920)
		localEvt: 	[446@285 mouseUp 18558991 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(152567808)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(152567808)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[446@285 mouseUp 18558991 nil]
		aMorph: 	a MenuMorph(145489920)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(145489920)
	Arguments and temporary variables: 
		anEvent: 	[446@285 mouseUp 18558991 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	431@274 corner: 578@621
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(152567808)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	431@274 corner: 578@621
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (160432128) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(152567808)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(152567808)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(145489920)
	Arguments and temporary variables: 
		anEvent: 	[446@285 mouseUp 18558991 nil]
	Receiver's instance variables: 
		bounds: 	431@274 corner: 578@621
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(152567808)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	431@274 corner: 578@621
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (160432128) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(152567808)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(152567808)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(145489920)
	Arguments and temporary variables: 
		evt: 	[446@285 mouseUp 18558991 nil]
	Receiver's instance variables: 
		bounds: 	431@274 corner: 578@621
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(152567808)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	431@274 corner: 578@621
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (160432128) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(152567808)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(152567808)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[446@285 mouseUp 18558991 nil]
		focusHolder: 	a MenuMorph(145489920)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	446@285 corner: 462@301
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	446@285 corner: 462@301
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(183762944)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[446@285 mouseUp 18558991 nil]
		targetOffset: 	10@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 18558991 446 285 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(947388416) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[446@285 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(947388416) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
Dictionary>>errorKeyNotFound:
[self errorKeyNotFound: key] in Dictionary>>at:
Dictionary>>at:ifAbsent:
Dictionary>>at:
[:nominee | self notice: nominee artistName , ': ' , (self votes at: nominee) asString] in SoloCategory(Category)>>voteResults
LinkedList>>do:
SoloCategory(Category)>>voteResults
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
KeyNotFound: key a Solo not found in Dictionary
16 January 2012 10:11:22 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		aKey: 	a Solo
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


[self errorKeyNotFound: key] in Dictionary>>at:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		key: 	a Solo
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		key: 	a Solo
		aBlock: 	[self errorKeyNotFound: key]
		assoc: 	nil
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


Dictionary>>at:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		key: 	a Solo
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


SoloCategory(Category)>>vote:by:
	Receiver: a SoloCategory
	Arguments and temporary variables: 
		aVotee: 	a Solo
		aVoter: 	a Solo
	Receiver's instance variables: 
		nominees: 	a LinkedList(a Solo a Solo a Solo a Solo a Solo)
		jury: 	a LinkedList(a Solo a Solo a Solo a Solo a Solo)
		awardName: 	'Best male singer'
		votes: 	a Dictionary()
		juryVoted: 	a LinkedList()


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		hetfield: 	a Solo
		ulrich: 	a Solo
		hammett: 	a Solo
		trujillo: 	a Solo
		metallica: 	a Band
		mustaine: 	a Solo
		drover: 	a Solo
		broderick: 	a Solo
		ellefson: 	a Solo
		megadeth: 	a Band
		martin: 	a Solo
		fakefigures: 	a Band
		awardBestMaleSinger: 	a SoloCategory
		awardBestNewcomerBand: 	nil
		ceremony: 	a Ceremony
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(809238528)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3359)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3359)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 799@1186
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 799@1186
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 18613289) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3359)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3359)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(371458048)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[443@360 mouseUp 18613233 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	430@354 corner: 567@372
		owner: 	a MenuMorph(364380160)
		submorphs: 	#()
		fullBounds: 	430@354 corner: 567@372
		color: 	Color black
		extension: 	a MorphExtension (381681664)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(371458048)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[443@360 mouseUp 18613233 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	430@354 corner: 567@372
		owner: 	a MenuMorph(364380160)
		submorphs: 	#()
		fullBounds: 	430@354 corner: 567@372
		color: 	Color black
		extension: 	a MorphExtension (381681664)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(371458048)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[443@360 mouseUp 18613233 nil]
	Receiver's instance variables: 
		bounds: 	430@354 corner: 567@372
		owner: 	a MenuMorph(364380160)
		submorphs: 	#()
		fullBounds: 	430@354 corner: 567@372
		color: 	Color black
		extension: 	a MorphExtension (381681664)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(371458048)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[443@360 mouseUp 18613233 nil]
	Receiver's instance variables: 
		bounds: 	430@354 corner: 567@372
		owner: 	a MenuMorph(364380160)
		submorphs: 	#()
		fullBounds: 	430@354 corner: 567@372
		color: 	Color black
		extension: 	a MorphExtension (381681664)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [443@360 mouseUp 18613233 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(371458048)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	18613233
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	443@360
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(371458048)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[443@360 mouseUp 18613233 nil]
	Receiver's instance variables: 
		bounds: 	430@354 corner: 567@372
		owner: 	a MenuMorph(364380160)
		submorphs: 	#()
		fullBounds: 	430@354 corner: 567@372
		color: 	Color black
		extension: 	a MorphExtension (381681664)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[443@360 mouseUp 18613233 nil]
		aMorph: 	a ToggleMenuItemMorph(371458048)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[443@360 mouseUp 18613233 nil]
		aMorph: 	a ToggleMenuItemMorph(371458048)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(371458048)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[443@360 mouseUp 18613233 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	430@354 corner: 567@372
		owner: 	a MenuMorph(364380160)
		submorphs: 	#()
		fullBounds: 	430@354 corner: 567@372
		color: 	Color black
		extension: 	a MorphExtension (381681664)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[443@360 mouseUp 18613233 nil]
		aMorph: 	a MenuMorph(364380160)
		localEvt: 	[443@360 mouseUp 18613233 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(371458048)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(371458048)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[443@360 mouseUp 18613233 nil]
		aMorph: 	a MenuMorph(364380160)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(364380160)
	Arguments and temporary variables: 
		anEvent: 	[443@360 mouseUp 18613233 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	425@349 corner: 572@696
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(371458048)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	425@349 corner: 572@696
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (379322368) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(371458048)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(371458048)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(364380160)
	Arguments and temporary variables: 
		anEvent: 	[443@360 mouseUp 18613233 nil]
	Receiver's instance variables: 
		bounds: 	425@349 corner: 572@696
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(371458048)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	425@349 corner: 572@696
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (379322368) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(371458048)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(371458048)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(364380160)
	Arguments and temporary variables: 
		evt: 	[443@360 mouseUp 18613233 nil]
	Receiver's instance variables: 
		bounds: 	425@349 corner: 572@696
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(371458048)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	425@349 corner: 572@696
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (379322368) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(371458048)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(371458048)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[443@360 mouseUp 18613233 nil]
		focusHolder: 	a MenuMorph(364380160)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	435@364 corner: 451@380
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	435@364 corner: 451@380
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(496762880)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[443@360 435@364 mouseMove 18613569 nil]
		targetOffset: 	13@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 18613569 443 361 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(186646528) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[443@360 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(186646528) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[443@360 mouseUp 18613233 nil]
		focusHolder: 	a MenuMorph(364380160)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	435@364 corner: 451@380
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	435@364 corner: 451@380
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(496762880)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[443@360 435@364 mouseMove 18613569 nil]
		targetOffset: 	13@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 18613569 443 361 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[443@360 mouseUp 18613233 nil]
		focusHolder: 	a MenuMorph(364380160)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	435@364 corner: 451@380
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	435@364 corner: 451@380
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(496762880)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[443@360 435@364 mouseMove 18613569 nil]
		targetOffset: 	13@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 18613569 443 361 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil



--- The full stack ---
Dictionary>>errorKeyNotFound:
[self errorKeyNotFound: key] in Dictionary>>at:
Dictionary>>at:ifAbsent:
Dictionary>>at:
SoloCategory(Category)>>vote:by:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NonBooleanReceiver: proceed for truth.
16 January 2012 10:16:06 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

SmallInteger(Object)>>mustBeBooleanIn:
	Receiver: 3
	Arguments and temporary variables: 
		context: 	[:nominee | 
(self votes at: nominee ifAbsent: 0 > artistWonCount)
		i...etc...
		proceedValue: 	nil
	Receiver's instance variables: 
3

SmallInteger(Object)>>mustBeBoolean
	Receiver: 3
	Arguments and temporary variables: 

	Receiver's instance variables: 
3

[:nominee | 
(self votes at: nominee ifAbsent: 0 > artistWonCount)
		ifTrue: [artistWon := nominee.
			artistWonCount := self votes at: nominee].
	self notice: nominee artistName , ': ' , (self votes at: nominee ifAbsent: 0) asString] in SoloCategory(Category)>>voteResults
	Receiver: a SoloCategory
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		nominees: 	a LinkedList(a Solo a Solo a Solo a Solo a Solo)
		jury: 	a LinkedList(a Solo a Solo a Solo a Solo a Solo)
		awardName: 	'Best male singer'
		votes: 	a Dictionary(a Solo->3 a Solo->2 )
		juryVoted: 	a LinkedList('Lars Ulrich' 'Rus Martin' 'Robert Trujillo' 'Kirk Hamm...etc...


LinkedList>>do:
	Receiver: a LinkedList(a Solo a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	[:nominee | 
(self votes at: nominee ifAbsent: 0 > artistWonCount)
		if...etc...
		aLink: 	ValueLink(a Solo)
	Receiver's instance variables: 
		firstLink: 	ValueLink(a Solo)
		lastLink: 	ValueLink(a Solo)


SoloCategory(Category)>>voteResults
	Receiver: a SoloCategory
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		nominees: 	a LinkedList(a Solo a Solo a Solo a Solo a Solo)
		jury: 	a LinkedList(a Solo a Solo a Solo a Solo a Solo)
		awardName: 	'Best male singer'
		votes: 	a Dictionary(a Solo->3 a Solo->2 )
		juryVoted: 	a LinkedList('Lars Ulrich' 'Rus Martin' 'Robert Trujillo' 'Kirk Hamm...etc...


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		hetfield: 	a Solo
		ulrich: 	a Solo
		hammett: 	a Solo
		trujillo: 	a Solo
		metallica: 	a Band
		mustaine: 	a Solo
		drover: 	a Solo
		broderick: 	a Solo
		ellefson: 	a Solo
		megadeth: 	a Band
		martin: 	a Solo
		fakefigures: 	a Band
		awardBestMaleSinger: 	a SoloCategory
		awardBestNewcomerBand: 	nil
		ceremony: 	a Ceremony
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(736624640)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3359)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3359)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 799@1186
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 799@1186
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 18896237) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3359)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3359)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(716701696)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[496@306 mouseUp 18896655 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	456@292 corner: 593@310
		owner: 	a MenuMorph(654573568)
		submorphs: 	#()
		fullBounds: 	456@292 corner: 593@310
		color: 	Color black
		extension: 	a MorphExtension (726925312)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(716701696)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[496@306 mouseUp 18896655 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	456@292 corner: 593@310
		owner: 	a MenuMorph(654573568)
		submorphs: 	#()
		fullBounds: 	456@292 corner: 593@310
		color: 	Color black
		extension: 	a MorphExtension (726925312)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(716701696)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[496@306 mouseUp 18896655 nil]
	Receiver's instance variables: 
		bounds: 	456@292 corner: 593@310
		owner: 	a MenuMorph(654573568)
		submorphs: 	#()
		fullBounds: 	456@292 corner: 593@310
		color: 	Color black
		extension: 	a MorphExtension (726925312)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(716701696)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[496@306 mouseUp 18896655 nil]
	Receiver's instance variables: 
		bounds: 	456@292 corner: 593@310
		owner: 	a MenuMorph(654573568)
		submorphs: 	#()
		fullBounds: 	456@292 corner: 593@310
		color: 	Color black
		extension: 	a MorphExtension (726925312)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [496@306 mouseUp 18896655 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(716701696)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	18896655
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	496@306
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(716701696)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[496@306 mouseUp 18896655 nil]
	Receiver's instance variables: 
		bounds: 	456@292 corner: 593@310
		owner: 	a MenuMorph(654573568)
		submorphs: 	#()
		fullBounds: 	456@292 corner: 593@310
		color: 	Color black
		extension: 	a MorphExtension (726925312)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[496@306 mouseUp 18896655 nil]
		aMorph: 	a ToggleMenuItemMorph(716701696)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[496@306 mouseUp 18896655 nil]
		aMorph: 	a ToggleMenuItemMorph(716701696)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(716701696)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[496@306 mouseUp 18896655 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	456@292 corner: 593@310
		owner: 	a MenuMorph(654573568)
		submorphs: 	#()
		fullBounds: 	456@292 corner: 593@310
		color: 	Color black
		extension: 	a MorphExtension (726925312)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[496@306 mouseUp 18896655 nil]
		aMorph: 	a MenuMorph(654573568)
		localEvt: 	[496@306 mouseUp 18896655 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(716701696)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(716701696)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[496@306 mouseUp 18896655 nil]
		aMorph: 	a MenuMorph(654573568)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(654573568)
	Arguments and temporary variables: 
		anEvent: 	[496@306 mouseUp 18896655 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	451@287 corner: 598@634
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(716701696)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	451@287 corner: 598@634
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (669515776) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(716701696)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(716701696)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(654573568)
	Arguments and temporary variables: 
		anEvent: 	[496@306 mouseUp 18896655 nil]
	Receiver's instance variables: 
		bounds: 	451@287 corner: 598@634
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(716701696)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	451@287 corner: 598@634
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (669515776) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(716701696)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(716701696)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(654573568)
	Arguments and temporary variables: 
		evt: 	[496@306 mouseUp 18896655 nil]
	Receiver's instance variables: 
		bounds: 	451@287 corner: 598@634
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(716701696)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	451@287 corner: 598@634
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (669515776) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(716701696)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(716701696)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[496@306 mouseUp 18896655 nil]
		focusHolder: 	a MenuMorph(654573568)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	63@536 corner: 79@552
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(422051840)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[496@306 63@536 mouseMove 18896939 nil]
		targetOffset: 	40@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 18896939 495 306 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(56885248) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[496@306 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(56885248) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[496@306 mouseUp 18896655 nil]
		focusHolder: 	a MenuMorph(654573568)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	63@536 corner: 79@552
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(422051840)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[496@306 63@536 mouseMove 18896939 nil]
		targetOffset: 	40@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 18896939 495 306 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[496@306 mouseUp 18896655 nil]
		focusHolder: 	a MenuMorph(654573568)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	63@536 corner: 79@552
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(422051840)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[496@306 63@536 mouseMove 18896939 nil]
		targetOffset: 	40@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 18896939 495 306 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil



--- The full stack ---
SmallInteger(Object)>>mustBeBooleanIn:
SmallInteger(Object)>>mustBeBoolean
[:nominee | 
(self votes at: nominee ifAbsent: 0 > artistWonCount)
		ifTrue: [artistWon := nominee.
			artistWonCount := self votes at: nominee].
	self notice: nominee artistName , ': ' , (self votes at: nominee ifAbsent: 0) asString] in SoloCategory(Category)>>voteResults
LinkedList>>do:
SoloCategory(Category)>>voteResults
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: This block accepts 0 arguments, but was called with 1 argument.
16 January 2012 10:22:42 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure(Object)>>error:
	Receiver: [member | member awardsWon
		do: [:award | 
			allAwards add: award.
			self notice: membe...etc...
	Arguments and temporary variables: 
		aString: 	'This block accepts 0 arguments, but was called with 1 argument.'
	Receiver's instance variables: 
		outerContext: 	Band>>awardsWon
		startpc: 	51
		numArgs: 	0


BlockClosure>>numArgsError:
	Receiver: [member | member awardsWon
		do: [:award | 
			allAwards add: award.
			self notice: membe...etc...
	Arguments and temporary variables: 
		numArgsForInvocation: 	1
		printNArgs: 	[:n | n printString , ' argument'
		, (n = 1
				ifTrue: ['']
				i...etc...
	Receiver's instance variables: 
		outerContext: 	Band>>awardsWon
		startpc: 	51
		numArgs: 	0


BlockClosure>>value:
	Receiver: [member | member awardsWon
		do: [:award | 
			allAwards add: award.
			self notice: membe...etc...
	Arguments and temporary variables: 
		anArg: 	a Solo
		newContext: 	nil
		ncv: 	nil
	Receiver's instance variables: 
		outerContext: 	Band>>awardsWon
		startpc: 	51
		numArgs: 	0


[aBlock value: assoc key] in [:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
	Receiver: a Bag(a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		assoc: 	[member | member awardsWon
		do: [:award | 
			allAwards add: award.
			...etc...
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )


SmallInteger(Integer)>>timesRepeat:
	Receiver: 1
	Arguments and temporary variables: 
		aBlock: 	[aBlock value: assoc key]
		count: 	1
	Receiver's instance variables: 
1

[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
	Receiver: a Bag(a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		assoc: 	[member | member awardsWon
		do: [:award | 
			allAwards add: award.
			...etc...
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )


[:each | each
		ifNotNil: [aBlock value: each]] in Dictionary>>associationsDo:
	Receiver: a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		each: 	[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]]
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)
	Arguments and temporary variables: 
		aBlock: 	[:each | each
		ifNotNil: [aBlock value: each]]
		index: 	1
		indexLimiT: 	7
	Receiver's instance variables: 
an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)

Dictionary>>associationsDo:
	Receiver: a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )
	Arguments and temporary variables: 
		aBlock: 	[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]]
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)


Bag>>do:
	Receiver: a Bag(a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	[member | member awardsWon
		do: [:award | 
			allAwards add: award.
		...etc...
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )


Band>>awardsWon
	Receiver: a Band
	Arguments and temporary variables: 
		allAwards: 	nil
		member: 	nil
	Receiver's instance variables: 
		activeSince: 	1981
		awardsWon: 	nil
		artistName: 	'Metallica'
		members: 	a Bag(a Solo a Solo a Solo a Solo)


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		hetfield: 	a Solo
		ulrich: 	a Solo
		hammett: 	a Solo
		trujillo: 	a Solo
		metallica: 	a Band
		mustaine: 	a Solo
		drover: 	a Solo
		broderick: 	a Solo
		ellefson: 	a Solo
		megadeth: 	a Band
		martin: 	a Solo
		fakefigures: 	a Band
		awardBestMaleSinger: 	a SoloCategory
		awardBestNewcomerBand: 	nil
		ceremony: 	a Ceremony
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(412614656)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3381)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3381)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 799@1218
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 799@1218
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 19292823) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3381)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3381)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(863502336)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[559@357 mouseUp 19292794 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	542@345 corner: 679@363
		owner: 	a MenuMorph(856424448)
		submorphs: 	#()
		fullBounds: 	542@345 corner: 679@363
		color: 	Color black
		extension: 	a MorphExtension (873725952)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(863502336)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[559@357 mouseUp 19292794 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	542@345 corner: 679@363
		owner: 	a MenuMorph(856424448)
		submorphs: 	#()
		fullBounds: 	542@345 corner: 679@363
		color: 	Color black
		extension: 	a MorphExtension (873725952)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(863502336)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[559@357 mouseUp 19292794 nil]
	Receiver's instance variables: 
		bounds: 	542@345 corner: 679@363
		owner: 	a MenuMorph(856424448)
		submorphs: 	#()
		fullBounds: 	542@345 corner: 679@363
		color: 	Color black
		extension: 	a MorphExtension (873725952)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(863502336)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[559@357 mouseUp 19292794 nil]
	Receiver's instance variables: 
		bounds: 	542@345 corner: 679@363
		owner: 	a MenuMorph(856424448)
		submorphs: 	#()
		fullBounds: 	542@345 corner: 679@363
		color: 	Color black
		extension: 	a MorphExtension (873725952)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [559@357 mouseUp 19292794 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(863502336)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	19292794
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	559@357
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(863502336)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[559@357 mouseUp 19292794 nil]
	Receiver's instance variables: 
		bounds: 	542@345 corner: 679@363
		owner: 	a MenuMorph(856424448)
		submorphs: 	#()
		fullBounds: 	542@345 corner: 679@363
		color: 	Color black
		extension: 	a MorphExtension (873725952)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[559@357 mouseUp 19292794 nil]
		aMorph: 	a ToggleMenuItemMorph(863502336)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[559@357 mouseUp 19292794 nil]
		aMorph: 	a ToggleMenuItemMorph(863502336)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(863502336)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[559@357 mouseUp 19292794 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	542@345 corner: 679@363
		owner: 	a MenuMorph(856424448)
		submorphs: 	#()
		fullBounds: 	542@345 corner: 679@363
		color: 	Color black
		extension: 	a MorphExtension (873725952)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[559@357 mouseUp 19292794 nil]
		aMorph: 	a MenuMorph(856424448)
		localEvt: 	[559@357 mouseUp 19292794 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(863502336)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(863502336)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[559@357 mouseUp 19292794 nil]
		aMorph: 	a MenuMorph(856424448)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(856424448)
	Arguments and temporary variables: 
		anEvent: 	[559@357 mouseUp 19292794 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	537@340 corner: 684@687
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(863502336)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	537@340 corner: 684@687
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (871366656) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(863502336)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(863502336)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(856424448)
	Arguments and temporary variables: 
		anEvent: 	[559@357 mouseUp 19292794 nil]
	Receiver's instance variables: 
		bounds: 	537@340 corner: 684@687
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(863502336)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	537@340 corner: 684@687
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (871366656) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(863502336)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(863502336)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(856424448)
	Arguments and temporary variables: 
		evt: 	[559@357 mouseUp 19292794 nil]
	Receiver's instance variables: 
		bounds: 	537@340 corner: 684@687
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(863502336)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	537@340 corner: 684@687
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (871366656) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(863502336)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(863502336)'Do it (d)' a T...etc...



--- The full stack ---
BlockClosure(Object)>>error:
BlockClosure>>numArgsError:
BlockClosure>>value:
[aBlock value: assoc key] in [:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
SmallInteger(Integer)>>timesRepeat:
[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
[:each | each
		ifNotNil: [aBlock value: each]] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Bag>>do:
Band>>awardsWon
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: This block accepts 0 arguments, but was called with 1 argument.
16 January 2012 10:26:39 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure(Object)>>error:
	Receiver: [member | member awardsWon
		do: [:award | allAwards add: award]]
	Arguments and temporary variables: 
		aString: 	'This block accepts 0 arguments, but was called with 1 argument.'
	Receiver's instance variables: 
		outerContext: 	Band>>awardsWon
		startpc: 	39
		numArgs: 	0


BlockClosure>>numArgsError:
	Receiver: [member | member awardsWon
		do: [:award | allAwards add: award]]
	Arguments and temporary variables: 
		numArgsForInvocation: 	1
		printNArgs: 	[:n | n printString , ' argument'
		, (n = 1
				ifTrue: ['']
				i...etc...
	Receiver's instance variables: 
		outerContext: 	Band>>awardsWon
		startpc: 	39
		numArgs: 	0


BlockClosure>>value:
	Receiver: [member | member awardsWon
		do: [:award | allAwards add: award]]
	Arguments and temporary variables: 
		anArg: 	a Solo
		newContext: 	nil
		ncv: 	nil
	Receiver's instance variables: 
		outerContext: 	Band>>awardsWon
		startpc: 	39
		numArgs: 	0


[aBlock value: assoc key] in [:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
	Receiver: a Bag(a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		assoc: 	[member | member awardsWon
		do: [:award | allAwards add: award]]
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )


SmallInteger(Integer)>>timesRepeat:
	Receiver: 1
	Arguments and temporary variables: 
		aBlock: 	[aBlock value: assoc key]
		count: 	1
	Receiver's instance variables: 
1

[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
	Receiver: a Bag(a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		assoc: 	[member | member awardsWon
		do: [:award | allAwards add: award]]
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )


[:each | each
		ifNotNil: [aBlock value: each]] in Dictionary>>associationsDo:
	Receiver: a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		each: 	[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]]
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)
	Arguments and temporary variables: 
		aBlock: 	[:each | each
		ifNotNil: [aBlock value: each]]
		index: 	1
		indexLimiT: 	7
	Receiver's instance variables: 
an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)

Dictionary>>associationsDo:
	Receiver: a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )
	Arguments and temporary variables: 
		aBlock: 	[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]]
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)


Bag>>do:
	Receiver: a Bag(a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	[member | member awardsWon
		do: [:award | allAwards add: award]]
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )


Band>>awardsWon
	Receiver: a Band
	Arguments and temporary variables: 
		allAwards: 	nil
		member: 	nil
	Receiver's instance variables: 
		activeSince: 	1981
		awardsWon: 	nil
		artistName: 	'Metallica'
		members: 	a Bag(a Solo a Solo a Solo a Solo)


Ceremony>>printAwardsWon:
	Receiver: a Ceremony
	Arguments and temporary variables: 
		anArtist: 	a Band
	Receiver's instance variables: 
		awards: 	nil
		ceremonyName: 	'MTV Music Awards'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		hetfield: 	a Solo
		ulrich: 	a Solo
		hammett: 	a Solo
		trujillo: 	a Solo
		metallica: 	a Band
		mustaine: 	a Solo
		drover: 	a Solo
		broderick: 	a Solo
		ellefson: 	a Solo
		megadeth: 	a Band
		martin: 	a Solo
		fakefigures: 	a Band
		awardBestMaleSinger: 	a SoloCategory
		awardBestNewcomerBand: 	nil
		ceremony: 	a Ceremony
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(121634816)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3396)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3396)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 799@1218
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 799@1218
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 19529169) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3396)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3396)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(346292224)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[407@369 mouseUp 19529466 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	358@367 corner: 495@385
		owner: 	a MenuMorph(339214336)
		submorphs: 	#()
		fullBounds: 	358@367 corner: 495@385
		color: 	Color black
		extension: 	a MorphExtension (356515840)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(346292224)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[407@369 mouseUp 19529466 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	358@367 corner: 495@385
		owner: 	a MenuMorph(339214336)
		submorphs: 	#()
		fullBounds: 	358@367 corner: 495@385
		color: 	Color black
		extension: 	a MorphExtension (356515840)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(346292224)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[407@369 mouseUp 19529466 nil]
	Receiver's instance variables: 
		bounds: 	358@367 corner: 495@385
		owner: 	a MenuMorph(339214336)
		submorphs: 	#()
		fullBounds: 	358@367 corner: 495@385
		color: 	Color black
		extension: 	a MorphExtension (356515840)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(346292224)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[407@369 mouseUp 19529466 nil]
	Receiver's instance variables: 
		bounds: 	358@367 corner: 495@385
		owner: 	a MenuMorph(339214336)
		submorphs: 	#()
		fullBounds: 	358@367 corner: 495@385
		color: 	Color black
		extension: 	a MorphExtension (356515840)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [407@369 mouseUp 19529466 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(346292224)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	19529466
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	407@369
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(346292224)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[407@369 mouseUp 19529466 nil]
	Receiver's instance variables: 
		bounds: 	358@367 corner: 495@385
		owner: 	a MenuMorph(339214336)
		submorphs: 	#()
		fullBounds: 	358@367 corner: 495@385
		color: 	Color black
		extension: 	a MorphExtension (356515840)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[407@369 mouseUp 19529466 nil]
		aMorph: 	a ToggleMenuItemMorph(346292224)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[407@369 mouseUp 19529466 nil]
		aMorph: 	a ToggleMenuItemMorph(346292224)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(346292224)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[407@369 mouseUp 19529466 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	358@367 corner: 495@385
		owner: 	a MenuMorph(339214336)
		submorphs: 	#()
		fullBounds: 	358@367 corner: 495@385
		color: 	Color black
		extension: 	a MorphExtension (356515840)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[407@369 mouseUp 19529466 nil]
		aMorph: 	a MenuMorph(339214336)
		localEvt: 	[407@369 mouseUp 19529466 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(346292224)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(346292224)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[407@369 mouseUp 19529466 nil]
		aMorph: 	a MenuMorph(339214336)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(339214336)
	Arguments and temporary variables: 
		anEvent: 	[407@369 mouseUp 19529466 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	353@362 corner: 500@709
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(346292224)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	353@362 corner: 500@709
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (354156544) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(346292224)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(346292224)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(339214336)
	Arguments and temporary variables: 
		anEvent: 	[407@369 mouseUp 19529466 nil]
	Receiver's instance variables: 
		bounds: 	353@362 corner: 500@709
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(346292224)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	353@362 corner: 500@709
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (354156544) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(346292224)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(346292224)'Do it (d)' a T...etc...



--- The full stack ---
BlockClosure(Object)>>error:
BlockClosure>>numArgsError:
BlockClosure>>value:
[aBlock value: assoc key] in [:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
SmallInteger(Integer)>>timesRepeat:
[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
[:each | each
		ifNotNil: [aBlock value: each]] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Bag>>do:
Band>>awardsWon
Ceremony>>printAwardsWon:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: This block accepts 0 arguments, but was called with 1 argument.
16 January 2012 10:27:37 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure(Object)>>error:
	Receiver: [member | member awardsWon
		do: [:award | allAwards add: award]]
	Arguments and temporary variables: 
		aString: 	'This block accepts 0 arguments, but was called with 1 argument.'
	Receiver's instance variables: 
		outerContext: 	Band>>awardsWon
		startpc: 	39
		numArgs: 	0


BlockClosure>>numArgsError:
	Receiver: [member | member awardsWon
		do: [:award | allAwards add: award]]
	Arguments and temporary variables: 
		numArgsForInvocation: 	1
		printNArgs: 	[:n | n printString , ' argument'
		, (n = 1
				ifTrue: ['']
				i...etc...
	Receiver's instance variables: 
		outerContext: 	Band>>awardsWon
		startpc: 	39
		numArgs: 	0


BlockClosure>>value:
	Receiver: [member | member awardsWon
		do: [:award | allAwards add: award]]
	Arguments and temporary variables: 
		anArg: 	a Solo
		newContext: 	nil
		ncv: 	nil
	Receiver's instance variables: 
		outerContext: 	Band>>awardsWon
		startpc: 	39
		numArgs: 	0


[aBlock value: assoc key] in [:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
	Receiver: a Bag(a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		assoc: 	[member | member awardsWon
		do: [:award | allAwards add: award]]
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )


SmallInteger(Integer)>>timesRepeat:
	Receiver: 1
	Arguments and temporary variables: 
		aBlock: 	[aBlock value: assoc key]
		count: 	1
	Receiver's instance variables: 
1

[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
	Receiver: a Bag(a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		assoc: 	[member | member awardsWon
		do: [:award | allAwards add: award]]
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )


[:each | each
		ifNotNil: [aBlock value: each]] in Dictionary>>associationsDo:
	Receiver: a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		each: 	[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]]
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)
	Arguments and temporary variables: 
		aBlock: 	[:each | each
		ifNotNil: [aBlock value: each]]
		index: 	1
		indexLimiT: 	7
	Receiver's instance variables: 
an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)

Dictionary>>associationsDo:
	Receiver: a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )
	Arguments and temporary variables: 
		aBlock: 	[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]]
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)


Bag>>do:
	Receiver: a Bag(a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	[member | member awardsWon
		do: [:award | allAwards add: award]]
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )


Band>>awardsWon
	Receiver: a Band
	Arguments and temporary variables: 
		allAwards: 	nil
		member: 	nil
	Receiver's instance variables: 
		activeSince: 	1981
		awardsWon: 	nil
		artistName: 	'Metallica'
		members: 	a Bag(a Solo a Solo a Solo a Solo)


Ceremony>>printAwardsWon:
	Receiver: a Ceremony
	Arguments and temporary variables: 
		anArtist: 	a Band
		award: 	nil
	Receiver's instance variables: 
		awards: 	nil
		ceremonyName: 	'MTV Music Awards'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		hetfield: 	a Solo
		ulrich: 	a Solo
		hammett: 	a Solo
		trujillo: 	a Solo
		metallica: 	a Band
		mustaine: 	a Solo
		drover: 	a Solo
		broderick: 	a Solo
		ellefson: 	a Solo
		megadeth: 	a Band
		martin: 	a Solo
		fakefigures: 	a Band
		awardBestMaleSinger: 	a SoloCategory
		awardBestNewcomerBand: 	nil
		ceremony: 	a Ceremony
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(710410240)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3396)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3396)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 799@1218
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 799@1218
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 19587927) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3396)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3396)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(448528384)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[436@319 mouseUp 19587983 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	427@309 corner: 564@327
		owner: 	a MenuMorph(441450496)
		submorphs: 	#()
		fullBounds: 	427@309 corner: 564@327
		color: 	Color black
		extension: 	a MorphExtension (458752000)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(448528384)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[436@319 mouseUp 19587983 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	427@309 corner: 564@327
		owner: 	a MenuMorph(441450496)
		submorphs: 	#()
		fullBounds: 	427@309 corner: 564@327
		color: 	Color black
		extension: 	a MorphExtension (458752000)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(448528384)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[436@319 mouseUp 19587983 nil]
	Receiver's instance variables: 
		bounds: 	427@309 corner: 564@327
		owner: 	a MenuMorph(441450496)
		submorphs: 	#()
		fullBounds: 	427@309 corner: 564@327
		color: 	Color black
		extension: 	a MorphExtension (458752000)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(448528384)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[436@319 mouseUp 19587983 nil]
	Receiver's instance variables: 
		bounds: 	427@309 corner: 564@327
		owner: 	a MenuMorph(441450496)
		submorphs: 	#()
		fullBounds: 	427@309 corner: 564@327
		color: 	Color black
		extension: 	a MorphExtension (458752000)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [436@319 mouseUp 19587983 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(448528384)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	19587983
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	436@319
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(448528384)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[436@319 mouseUp 19587983 nil]
	Receiver's instance variables: 
		bounds: 	427@309 corner: 564@327
		owner: 	a MenuMorph(441450496)
		submorphs: 	#()
		fullBounds: 	427@309 corner: 564@327
		color: 	Color black
		extension: 	a MorphExtension (458752000)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[436@319 mouseUp 19587983 nil]
		aMorph: 	a ToggleMenuItemMorph(448528384)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[436@319 mouseUp 19587983 nil]
		aMorph: 	a ToggleMenuItemMorph(448528384)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(448528384)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[436@319 mouseUp 19587983 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	427@309 corner: 564@327
		owner: 	a MenuMorph(441450496)
		submorphs: 	#()
		fullBounds: 	427@309 corner: 564@327
		color: 	Color black
		extension: 	a MorphExtension (458752000)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[436@319 mouseUp 19587983 nil]
		aMorph: 	a MenuMorph(441450496)
		localEvt: 	[436@319 mouseUp 19587983 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(448528384)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(448528384)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[436@319 mouseUp 19587983 nil]
		aMorph: 	a MenuMorph(441450496)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(441450496)
	Arguments and temporary variables: 
		anEvent: 	[436@319 mouseUp 19587983 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	422@304 corner: 569@651
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(448528384)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	422@304 corner: 569@651
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (456392704) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(448528384)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(448528384)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(441450496)
	Arguments and temporary variables: 
		anEvent: 	[436@319 mouseUp 19587983 nil]
	Receiver's instance variables: 
		bounds: 	422@304 corner: 569@651
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(448528384)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	422@304 corner: 569@651
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (456392704) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(448528384)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(448528384)'Do it (d)' a T...etc...



--- The full stack ---
BlockClosure(Object)>>error:
BlockClosure>>numArgsError:
BlockClosure>>value:
[aBlock value: assoc key] in [:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
SmallInteger(Integer)>>timesRepeat:
[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
[:each | each
		ifNotNil: [aBlock value: each]] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Bag>>do:
Band>>awardsWon
Ceremony>>printAwardsWon:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: This block accepts 0 arguments, but was called with 1 argument.
16 January 2012 10:28:08 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure(Object)>>error:
	Receiver: [member | member awardsWon
		do: [:award | allAwards add: award]]
	Arguments and temporary variables: 
		aString: 	'This block accepts 0 arguments, but was called with 1 argument.'
	Receiver's instance variables: 
		outerContext: 	Band>>awardsWon
		startpc: 	39
		numArgs: 	0


BlockClosure>>numArgsError:
	Receiver: [member | member awardsWon
		do: [:award | allAwards add: award]]
	Arguments and temporary variables: 
		numArgsForInvocation: 	1
		printNArgs: 	[:n | n printString , ' argument'
		, (n = 1
				ifTrue: ['']
				i...etc...
	Receiver's instance variables: 
		outerContext: 	Band>>awardsWon
		startpc: 	39
		numArgs: 	0


BlockClosure>>value:
	Receiver: [member | member awardsWon
		do: [:award | allAwards add: award]]
	Arguments and temporary variables: 
		anArg: 	a Solo
		newContext: 	nil
		ncv: 	nil
	Receiver's instance variables: 
		outerContext: 	Band>>awardsWon
		startpc: 	39
		numArgs: 	0


[aBlock value: assoc key] in [:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
	Receiver: a Bag(a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		assoc: 	[member | member awardsWon
		do: [:award | allAwards add: award]]
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )


SmallInteger(Integer)>>timesRepeat:
	Receiver: 1
	Arguments and temporary variables: 
		aBlock: 	[aBlock value: assoc key]
		count: 	1
	Receiver's instance variables: 
1

[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
	Receiver: a Bag(a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		assoc: 	[member | member awardsWon
		do: [:award | allAwards add: award]]
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )


[:each | each
		ifNotNil: [aBlock value: each]] in Dictionary>>associationsDo:
	Receiver: a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		each: 	[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]]
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)
	Arguments and temporary variables: 
		aBlock: 	[:each | each
		ifNotNil: [aBlock value: each]]
		index: 	1
		indexLimiT: 	7
	Receiver's instance variables: 
an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)

Dictionary>>associationsDo:
	Receiver: a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )
	Arguments and temporary variables: 
		aBlock: 	[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]]
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)


Bag>>do:
	Receiver: a Bag(a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	[member | member awardsWon
		do: [:award | allAwards add: award]]
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )


Band>>awardsWon
	Receiver: a Band
	Arguments and temporary variables: 
		allAwards: 	nil
		member: 	nil
	Receiver's instance variables: 
		activeSince: 	1981
		awardsWon: 	nil
		artistName: 	'Metallica'
		members: 	a Bag(a Solo a Solo a Solo a Solo)


Ceremony>>printAwardsWon:
	Receiver: a Ceremony
	Arguments and temporary variables: 
		anArtist: 	a Band
	Receiver's instance variables: 
		awards: 	nil
		ceremonyName: 	'MTV Music Awards'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		hetfield: 	a Solo
		ulrich: 	a Solo
		hammett: 	a Solo
		trujillo: 	a Solo
		metallica: 	a Band
		mustaine: 	a Solo
		drover: 	a Solo
		broderick: 	a Solo
		ellefson: 	a Solo
		megadeth: 	a Band
		martin: 	a Solo
		fakefigures: 	a Band
		awardBestMaleSinger: 	a SoloCategory
		awardBestNewcomerBand: 	nil
		ceremony: 	a Ceremony
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(306708480)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3396)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3396)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 799@1218
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 799@1218
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 19618421) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3396)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3396)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(362020864)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[344@341 mouseUp 19618367 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	333@335 corner: 470@353
		owner: 	a MenuMorph(354942976)
		submorphs: 	#()
		fullBounds: 	333@335 corner: 470@353
		color: 	Color black
		extension: 	a MorphExtension (372244480)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(362020864)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[344@341 mouseUp 19618367 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	333@335 corner: 470@353
		owner: 	a MenuMorph(354942976)
		submorphs: 	#()
		fullBounds: 	333@335 corner: 470@353
		color: 	Color black
		extension: 	a MorphExtension (372244480)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(362020864)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[344@341 mouseUp 19618367 nil]
	Receiver's instance variables: 
		bounds: 	333@335 corner: 470@353
		owner: 	a MenuMorph(354942976)
		submorphs: 	#()
		fullBounds: 	333@335 corner: 470@353
		color: 	Color black
		extension: 	a MorphExtension (372244480)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(362020864)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[344@341 mouseUp 19618367 nil]
	Receiver's instance variables: 
		bounds: 	333@335 corner: 470@353
		owner: 	a MenuMorph(354942976)
		submorphs: 	#()
		fullBounds: 	333@335 corner: 470@353
		color: 	Color black
		extension: 	a MorphExtension (372244480)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [344@341 mouseUp 19618367 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(362020864)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	19618367
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	344@341
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(362020864)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[344@341 mouseUp 19618367 nil]
	Receiver's instance variables: 
		bounds: 	333@335 corner: 470@353
		owner: 	a MenuMorph(354942976)
		submorphs: 	#()
		fullBounds: 	333@335 corner: 470@353
		color: 	Color black
		extension: 	a MorphExtension (372244480)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[344@341 mouseUp 19618367 nil]
		aMorph: 	a ToggleMenuItemMorph(362020864)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[344@341 mouseUp 19618367 nil]
		aMorph: 	a ToggleMenuItemMorph(362020864)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(362020864)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[344@341 mouseUp 19618367 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	333@335 corner: 470@353
		owner: 	a MenuMorph(354942976)
		submorphs: 	#()
		fullBounds: 	333@335 corner: 470@353
		color: 	Color black
		extension: 	a MorphExtension (372244480)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[344@341 mouseUp 19618367 nil]
		aMorph: 	a MenuMorph(354942976)
		localEvt: 	[344@341 mouseUp 19618367 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(362020864)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(362020864)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[344@341 mouseUp 19618367 nil]
		aMorph: 	a MenuMorph(354942976)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(354942976)
	Arguments and temporary variables: 
		anEvent: 	[344@341 mouseUp 19618367 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	328@330 corner: 475@677
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(362020864)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	328@330 corner: 475@677
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (369885184) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(362020864)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(362020864)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(354942976)
	Arguments and temporary variables: 
		anEvent: 	[344@341 mouseUp 19618367 nil]
	Receiver's instance variables: 
		bounds: 	328@330 corner: 475@677
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(362020864)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	328@330 corner: 475@677
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (369885184) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(362020864)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(362020864)'Do it (d)' a T...etc...



--- The full stack ---
BlockClosure(Object)>>error:
BlockClosure>>numArgsError:
BlockClosure>>value:
[aBlock value: assoc key] in [:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
SmallInteger(Integer)>>timesRepeat:
[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
[:each | each
		ifNotNil: [aBlock value: each]] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Bag>>do:
Band>>awardsWon
Ceremony>>printAwardsWon:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: This block accepts 0 arguments, but was called with 1 argument.
16 January 2012 10:28:58 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure(Object)>>error:
	Receiver: [member | member awardsWon
		do: [:award | allAwards add: award]]
	Arguments and temporary variables: 
		aString: 	'This block accepts 0 arguments, but was called with 1 argument.'
	Receiver's instance variables: 
		outerContext: 	Band>>awardsWon
		startpc: 	39
		numArgs: 	0


BlockClosure>>numArgsError:
	Receiver: [member | member awardsWon
		do: [:award | allAwards add: award]]
	Arguments and temporary variables: 
		numArgsForInvocation: 	1
		printNArgs: 	[:n | n printString , ' argument'
		, (n = 1
				ifTrue: ['']
				i...etc...
	Receiver's instance variables: 
		outerContext: 	Band>>awardsWon
		startpc: 	39
		numArgs: 	0


BlockClosure>>value:
	Receiver: [member | member awardsWon
		do: [:award | allAwards add: award]]
	Arguments and temporary variables: 
		anArg: 	a Solo
		newContext: 	nil
		ncv: 	nil
	Receiver's instance variables: 
		outerContext: 	Band>>awardsWon
		startpc: 	39
		numArgs: 	0


[aBlock value: assoc key] in [:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
	Receiver: a Bag(a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		assoc: 	[member | member awardsWon
		do: [:award | allAwards add: award]]
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )


SmallInteger(Integer)>>timesRepeat:
	Receiver: 1
	Arguments and temporary variables: 
		aBlock: 	[aBlock value: assoc key]
		count: 	1
	Receiver's instance variables: 
1

[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
	Receiver: a Bag(a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		assoc: 	[member | member awardsWon
		do: [:award | allAwards add: award]]
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )


[:each | each
		ifNotNil: [aBlock value: each]] in Dictionary>>associationsDo:
	Receiver: a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		each: 	[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]]
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)
	Arguments and temporary variables: 
		aBlock: 	[:each | each
		ifNotNil: [aBlock value: each]]
		index: 	1
		indexLimiT: 	7
	Receiver's instance variables: 
an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)

Dictionary>>associationsDo:
	Receiver: a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )
	Arguments and temporary variables: 
		aBlock: 	[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]]
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)


Bag>>do:
	Receiver: a Bag(a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	[member | member awardsWon
		do: [:award | allAwards add: award]]
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )


Band>>awardsWon
	Receiver: a Band
	Arguments and temporary variables: 
		allAwards: 	nil
		member: 	nil
	Receiver's instance variables: 
		activeSince: 	1981
		awardsWon: 	nil
		artistName: 	'Metallica'
		members: 	a Bag(a Solo a Solo a Solo a Solo)


Ceremony>>printAwardsWon:
	Receiver: a Ceremony
	Arguments and temporary variables: 
		anArtist: 	a Band
	Receiver's instance variables: 
		awards: 	nil
		ceremonyName: 	'MTV Music Awards'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		hetfield: 	a Solo
		ulrich: 	a Solo
		hammett: 	a Solo
		trujillo: 	a Solo
		metallica: 	a Band
		mustaine: 	a Solo
		drover: 	a Solo
		broderick: 	a Solo
		ellefson: 	a Solo
		megadeth: 	a Band
		martin: 	a Solo
		fakefigures: 	a Band
		awardBestMaleSinger: 	a SoloCategory
		awardBestNewcomerBand: 	nil
		ceremony: 	a Ceremony
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(206307328)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3396)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3396)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 799@1218
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 799@1218
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 19668874) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3396)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3396)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(1572864)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[433@277 mouseUp 19668831 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	418@266 corner: 555@284
		owner: 	a MenuMorph(1068236800)
		submorphs: 	#()
		fullBounds: 	418@266 corner: 555@284
		color: 	Color black
		extension: 	a MorphExtension (11796480)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(1572864)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[433@277 mouseUp 19668831 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	418@266 corner: 555@284
		owner: 	a MenuMorph(1068236800)
		submorphs: 	#()
		fullBounds: 	418@266 corner: 555@284
		color: 	Color black
		extension: 	a MorphExtension (11796480)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(1572864)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[433@277 mouseUp 19668831 nil]
	Receiver's instance variables: 
		bounds: 	418@266 corner: 555@284
		owner: 	a MenuMorph(1068236800)
		submorphs: 	#()
		fullBounds: 	418@266 corner: 555@284
		color: 	Color black
		extension: 	a MorphExtension (11796480)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(1572864)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[433@277 mouseUp 19668831 nil]
	Receiver's instance variables: 
		bounds: 	418@266 corner: 555@284
		owner: 	a MenuMorph(1068236800)
		submorphs: 	#()
		fullBounds: 	418@266 corner: 555@284
		color: 	Color black
		extension: 	a MorphExtension (11796480)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [433@277 mouseUp 19668831 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(1572864)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	19668831
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	433@277
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(1572864)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[433@277 mouseUp 19668831 nil]
	Receiver's instance variables: 
		bounds: 	418@266 corner: 555@284
		owner: 	a MenuMorph(1068236800)
		submorphs: 	#()
		fullBounds: 	418@266 corner: 555@284
		color: 	Color black
		extension: 	a MorphExtension (11796480)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[433@277 mouseUp 19668831 nil]
		aMorph: 	a ToggleMenuItemMorph(1572864)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[433@277 mouseUp 19668831 nil]
		aMorph: 	a ToggleMenuItemMorph(1572864)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(1572864)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[433@277 mouseUp 19668831 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	418@266 corner: 555@284
		owner: 	a MenuMorph(1068236800)
		submorphs: 	#()
		fullBounds: 	418@266 corner: 555@284
		color: 	Color black
		extension: 	a MorphExtension (11796480)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[433@277 mouseUp 19668831 nil]
		aMorph: 	a MenuMorph(1068236800)
		localEvt: 	[433@277 mouseUp 19668831 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(1572864)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(1572864)'Do it (d)' a ToggleMenuItemMorp...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[433@277 mouseUp 19668831 nil]
		aMorph: 	a MenuMorph(1068236800)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(1068236800)
	Arguments and temporary variables: 
		anEvent: 	[433@277 mouseUp 19668831 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	413@261 corner: 560@608
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1572864)'Do it (d)' a ToggleMenuItemM...etc...
		fullBounds: 	413@261 corner: 560@608
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (9437184) [other:  (basicColor -> (Color r: 0.745 g...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(1572864)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(1572864)'Do it (d)' a Tog...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(1068236800)
	Arguments and temporary variables: 
		anEvent: 	[433@277 mouseUp 19668831 nil]
	Receiver's instance variables: 
		bounds: 	413@261 corner: 560@608
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1572864)'Do it (d)' a ToggleMenuItemM...etc...
		fullBounds: 	413@261 corner: 560@608
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (9437184) [other:  (basicColor -> (Color r: 0.745 g...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(1572864)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(1572864)'Do it (d)' a Tog...etc...



--- The full stack ---
BlockClosure(Object)>>error:
BlockClosure>>numArgsError:
BlockClosure>>value:
[aBlock value: assoc key] in [:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
SmallInteger(Integer)>>timesRepeat:
[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
[:each | each
		ifNotNil: [aBlock value: each]] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Bag>>do:
Band>>awardsWon
Ceremony>>printAwardsWon:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: This block accepts 0 arguments, but was called with 1 argument.
16 January 2012 10:29:33 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure(Object)>>error:
	Receiver: [member | member awardsWon
		do: [:award | allAwards add: award]]
	Arguments and temporary variables: 
		aString: 	'This block accepts 0 arguments, but was called with 1 argument.'
	Receiver's instance variables: 
		outerContext: 	Band>>awardsWon
		startpc: 	39
		numArgs: 	0


BlockClosure>>numArgsError:
	Receiver: [member | member awardsWon
		do: [:award | allAwards add: award]]
	Arguments and temporary variables: 
		numArgsForInvocation: 	1
		printNArgs: 	[:n | n printString , ' argument'
		, (n = 1
				ifTrue: ['']
				i...etc...
	Receiver's instance variables: 
		outerContext: 	Band>>awardsWon
		startpc: 	39
		numArgs: 	0


BlockClosure>>value:
	Receiver: [member | member awardsWon
		do: [:award | allAwards add: award]]
	Arguments and temporary variables: 
		anArg: 	a Solo
		newContext: 	nil
		ncv: 	nil
	Receiver's instance variables: 
		outerContext: 	Band>>awardsWon
		startpc: 	39
		numArgs: 	0


[aBlock value: assoc key] in [:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
	Receiver: a Bag(a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		assoc: 	[member | member awardsWon
		do: [:award | allAwards add: award]]
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )


SmallInteger(Integer)>>timesRepeat:
	Receiver: 1
	Arguments and temporary variables: 
		aBlock: 	[aBlock value: assoc key]
		count: 	1
	Receiver's instance variables: 
1

[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
	Receiver: a Bag(a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		assoc: 	[member | member awardsWon
		do: [:award | allAwards add: award]]
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )


[:each | each
		ifNotNil: [aBlock value: each]] in Dictionary>>associationsDo:
	Receiver: a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		each: 	[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]]
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)
	Arguments and temporary variables: 
		aBlock: 	[:each | each
		ifNotNil: [aBlock value: each]]
		index: 	1
		indexLimiT: 	7
	Receiver's instance variables: 
an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)

Dictionary>>associationsDo:
	Receiver: a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )
	Arguments and temporary variables: 
		aBlock: 	[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]]
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)


Bag>>do:
	Receiver: a Bag(a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	[member | member awardsWon
		do: [:award | allAwards add: award]]
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )


Band>>awardsWon
	Receiver: a Band
	Arguments and temporary variables: 
		allAwards: 	nil
		member: 	nil
	Receiver's instance variables: 
		activeSince: 	1981
		awardsWon: 	nil
		artistName: 	'Metallica'
		members: 	a Bag(a Solo a Solo a Solo a Solo)


Ceremony>>printAwardsWon:
	Receiver: a Ceremony
	Arguments and temporary variables: 
		anArtist: 	a Band
	Receiver's instance variables: 
		awards: 	nil
		ceremonyName: 	'MTV Music Awards'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		hetfield: 	a Solo
		ulrich: 	a Solo
		hammett: 	a Solo
		trujillo: 	a Solo
		metallica: 	a Band
		mustaine: 	a Solo
		drover: 	a Solo
		broderick: 	a Solo
		ellefson: 	a Solo
		megadeth: 	a Band
		martin: 	a Solo
		fakefigures: 	a Band
		awardBestMaleSinger: 	a SoloCategory
		awardBestNewcomerBand: 	nil
		ceremony: 	a Ceremony
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(794034176)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3396)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3396)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 799@1218
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 799@1218
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 19703549) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3396)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3396)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(98304000)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[517@198 mouseUp 19703487 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	506@191 corner: 643@209
		owner: 	a MenuMorph(91226112)
		submorphs: 	#()
		fullBounds: 	506@191 corner: 643@209
		color: 	Color black
		extension: 	a MorphExtension (108527616)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(98304000)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[517@198 mouseUp 19703487 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	506@191 corner: 643@209
		owner: 	a MenuMorph(91226112)
		submorphs: 	#()
		fullBounds: 	506@191 corner: 643@209
		color: 	Color black
		extension: 	a MorphExtension (108527616)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(98304000)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[517@198 mouseUp 19703487 nil]
	Receiver's instance variables: 
		bounds: 	506@191 corner: 643@209
		owner: 	a MenuMorph(91226112)
		submorphs: 	#()
		fullBounds: 	506@191 corner: 643@209
		color: 	Color black
		extension: 	a MorphExtension (108527616)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(98304000)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[517@198 mouseUp 19703487 nil]
	Receiver's instance variables: 
		bounds: 	506@191 corner: 643@209
		owner: 	a MenuMorph(91226112)
		submorphs: 	#()
		fullBounds: 	506@191 corner: 643@209
		color: 	Color black
		extension: 	a MorphExtension (108527616)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [517@198 mouseUp 19703487 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(98304000)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	19703487
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	517@198
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(98304000)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[517@198 mouseUp 19703487 nil]
	Receiver's instance variables: 
		bounds: 	506@191 corner: 643@209
		owner: 	a MenuMorph(91226112)
		submorphs: 	#()
		fullBounds: 	506@191 corner: 643@209
		color: 	Color black
		extension: 	a MorphExtension (108527616)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[517@198 mouseUp 19703487 nil]
		aMorph: 	a ToggleMenuItemMorph(98304000)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[517@198 mouseUp 19703487 nil]
		aMorph: 	a ToggleMenuItemMorph(98304000)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(98304000)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[517@198 mouseUp 19703487 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	506@191 corner: 643@209
		owner: 	a MenuMorph(91226112)
		submorphs: 	#()
		fullBounds: 	506@191 corner: 643@209
		color: 	Color black
		extension: 	a MorphExtension (108527616)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[517@198 mouseUp 19703487 nil]
		aMorph: 	a MenuMorph(91226112)
		localEvt: 	[517@198 mouseUp 19703487 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(98304000)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(98304000)'Do it (d)' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[517@198 mouseUp 19703487 nil]
		aMorph: 	a MenuMorph(91226112)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(91226112)
	Arguments and temporary variables: 
		anEvent: 	[517@198 mouseUp 19703487 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	501@186 corner: 648@533
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(98304000)'Do it (d)' a ToggleMenuItem...etc...
		fullBounds: 	501@186 corner: 648@533
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (106168320) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(98304000)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(98304000)'Do it (d)' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(91226112)
	Arguments and temporary variables: 
		anEvent: 	[517@198 mouseUp 19703487 nil]
	Receiver's instance variables: 
		bounds: 	501@186 corner: 648@533
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(98304000)'Do it (d)' a ToggleMenuItem...etc...
		fullBounds: 	501@186 corner: 648@533
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (106168320) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(98304000)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(98304000)'Do it (d)' a To...etc...



--- The full stack ---
BlockClosure(Object)>>error:
BlockClosure>>numArgsError:
BlockClosure>>value:
[aBlock value: assoc key] in [:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
SmallInteger(Integer)>>timesRepeat:
[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
[:each | each
		ifNotNil: [aBlock value: each]] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Bag>>do:
Band>>awardsWon
Ceremony>>printAwardsWon:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: This block accepts 0 arguments, but was called with 1 argument.
16 January 2012 10:30:50 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure(Object)>>error:
	Receiver: [member | member awardsWon
		do: [:award | allAwards add: award]]
	Arguments and temporary variables: 
		aString: 	'This block accepts 0 arguments, but was called with 1 argument.'
	Receiver's instance variables: 
		outerContext: 	Band>>awardsWon
		startpc: 	39
		numArgs: 	0


BlockClosure>>numArgsError:
	Receiver: [member | member awardsWon
		do: [:award | allAwards add: award]]
	Arguments and temporary variables: 
		numArgsForInvocation: 	1
		printNArgs: 	[:n | n printString , ' argument'
		, (n = 1
				ifTrue: ['']
				i...etc...
	Receiver's instance variables: 
		outerContext: 	Band>>awardsWon
		startpc: 	39
		numArgs: 	0


BlockClosure>>value:
	Receiver: [member | member awardsWon
		do: [:award | allAwards add: award]]
	Arguments and temporary variables: 
		anArg: 	a Solo
		newContext: 	nil
		ncv: 	nil
	Receiver's instance variables: 
		outerContext: 	Band>>awardsWon
		startpc: 	39
		numArgs: 	0


[aBlock value: assoc key] in [:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
	Receiver: a Bag(a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		assoc: 	[member | member awardsWon
		do: [:award | allAwards add: award]]
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )


SmallInteger(Integer)>>timesRepeat:
	Receiver: 1
	Arguments and temporary variables: 
		aBlock: 	[aBlock value: assoc key]
		count: 	1
	Receiver's instance variables: 
1

[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
	Receiver: a Bag(a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		assoc: 	[member | member awardsWon
		do: [:award | allAwards add: award]]
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )


[:each | each
		ifNotNil: [aBlock value: each]] in Dictionary>>associationsDo:
	Receiver: a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		each: 	[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]]
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)
	Arguments and temporary variables: 
		aBlock: 	[:each | each
		ifNotNil: [aBlock value: each]]
		index: 	1
		indexLimiT: 	7
	Receiver's instance variables: 
an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)

Dictionary>>associationsDo:
	Receiver: a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )
	Arguments and temporary variables: 
		aBlock: 	[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]]
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)


Bag>>do:
	Receiver: a Bag(a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	[member | member awardsWon
		do: [:award | allAwards add: award]]
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )


Band>>awardsWon
	Receiver: a Band
	Arguments and temporary variables: 
		allAwards: 	nil
		member: 	nil
	Receiver's instance variables: 
		activeSince: 	1981
		awardsWon: 	nil
		artistName: 	'Metallica'
		members: 	a Bag(a Solo a Solo a Solo a Solo)


Ceremony>>printAwardsWon:
	Receiver: a Ceremony
	Arguments and temporary variables: 
		anArtist: 	a Band
	Receiver's instance variables: 
		awards: 	nil
		ceremonyName: 	'MTV Music Awards'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		hetfield: 	a Solo
		ulrich: 	a Solo
		hammett: 	a Solo
		trujillo: 	a Solo
		metallica: 	a Band
		mustaine: 	a Solo
		drover: 	a Solo
		broderick: 	a Solo
		ellefson: 	a Solo
		megadeth: 	a Band
		martin: 	a Solo
		fakefigures: 	a Band
		awardBestMaleSinger: 	a SoloCategory
		awardBestNewcomerBand: 	nil
		ceremony: 	a Ceremony
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(101711872)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3396)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3396)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 799@1218
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 799@1218
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 19780671) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3396)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3396)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(473956352)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[348@255 mouseUp 19780717 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	337@246 corner: 474@264
		owner: 	a MenuMorph(466878464)
		submorphs: 	#()
		fullBounds: 	337@246 corner: 474@264
		color: 	Color black
		extension: 	a MorphExtension (484179968)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(473956352)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[348@255 mouseUp 19780717 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	337@246 corner: 474@264
		owner: 	a MenuMorph(466878464)
		submorphs: 	#()
		fullBounds: 	337@246 corner: 474@264
		color: 	Color black
		extension: 	a MorphExtension (484179968)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(473956352)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[348@255 mouseUp 19780717 nil]
	Receiver's instance variables: 
		bounds: 	337@246 corner: 474@264
		owner: 	a MenuMorph(466878464)
		submorphs: 	#()
		fullBounds: 	337@246 corner: 474@264
		color: 	Color black
		extension: 	a MorphExtension (484179968)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(473956352)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[348@255 mouseUp 19780717 nil]
	Receiver's instance variables: 
		bounds: 	337@246 corner: 474@264
		owner: 	a MenuMorph(466878464)
		submorphs: 	#()
		fullBounds: 	337@246 corner: 474@264
		color: 	Color black
		extension: 	a MorphExtension (484179968)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [348@255 mouseUp 19780717 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(473956352)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	19780717
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	348@255
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(473956352)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[348@255 mouseUp 19780717 nil]
	Receiver's instance variables: 
		bounds: 	337@246 corner: 474@264
		owner: 	a MenuMorph(466878464)
		submorphs: 	#()
		fullBounds: 	337@246 corner: 474@264
		color: 	Color black
		extension: 	a MorphExtension (484179968)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[348@255 mouseUp 19780717 nil]
		aMorph: 	a ToggleMenuItemMorph(473956352)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[348@255 mouseUp 19780717 nil]
		aMorph: 	a ToggleMenuItemMorph(473956352)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(473956352)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[348@255 mouseUp 19780717 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	337@246 corner: 474@264
		owner: 	a MenuMorph(466878464)
		submorphs: 	#()
		fullBounds: 	337@246 corner: 474@264
		color: 	Color black
		extension: 	a MorphExtension (484179968)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[348@255 mouseUp 19780717 nil]
		aMorph: 	a MenuMorph(466878464)
		localEvt: 	[348@255 mouseUp 19780717 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(473956352)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(473956352)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[348@255 mouseUp 19780717 nil]
		aMorph: 	a MenuMorph(466878464)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(466878464)
	Arguments and temporary variables: 
		anEvent: 	[348@255 mouseUp 19780717 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	332@241 corner: 479@588
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(473956352)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	332@241 corner: 479@588
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (481820672) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(473956352)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(473956352)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(466878464)
	Arguments and temporary variables: 
		anEvent: 	[348@255 mouseUp 19780717 nil]
	Receiver's instance variables: 
		bounds: 	332@241 corner: 479@588
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(473956352)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	332@241 corner: 479@588
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (481820672) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(473956352)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(473956352)'Do it (d)' a T...etc...



--- The full stack ---
BlockClosure(Object)>>error:
BlockClosure>>numArgsError:
BlockClosure>>value:
[aBlock value: assoc key] in [:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
SmallInteger(Integer)>>timesRepeat:
[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
[:each | each
		ifNotNil: [aBlock value: each]] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Bag>>do:
Band>>awardsWon
Ceremony>>printAwardsWon:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: This block accepts 0 arguments, but was called with 1 argument.
16 January 2012 10:32:01 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure(Object)>>error:
	Receiver: [member | member awardsWon
		do: [:award | allAwards add: award]]
	Arguments and temporary variables: 
		aString: 	'This block accepts 0 arguments, but was called with 1 argument.'
	Receiver's instance variables: 
		outerContext: 	Band>>awardsWon
		startpc: 	39
		numArgs: 	0


BlockClosure>>numArgsError:
	Receiver: [member | member awardsWon
		do: [:award | allAwards add: award]]
	Arguments and temporary variables: 
		numArgsForInvocation: 	1
		printNArgs: 	[:n | n printString , ' argument'
		, (n = 1
				ifTrue: ['']
				i...etc...
	Receiver's instance variables: 
		outerContext: 	Band>>awardsWon
		startpc: 	39
		numArgs: 	0


BlockClosure>>value:
	Receiver: [member | member awardsWon
		do: [:award | allAwards add: award]]
	Arguments and temporary variables: 
		anArg: 	a Solo
		newContext: 	nil
		ncv: 	nil
	Receiver's instance variables: 
		outerContext: 	Band>>awardsWon
		startpc: 	39
		numArgs: 	0


[aBlock value: assoc key] in [:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
	Receiver: a Bag(a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		assoc: 	[member | member awardsWon
		do: [:award | allAwards add: award]]
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )


SmallInteger(Integer)>>timesRepeat:
	Receiver: 1
	Arguments and temporary variables: 
		aBlock: 	[aBlock value: assoc key]
		count: 	1
	Receiver's instance variables: 
1

[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
	Receiver: a Bag(a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		assoc: 	[member | member awardsWon
		do: [:award | allAwards add: award]]
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )


[:each | each
		ifNotNil: [aBlock value: each]] in Dictionary>>associationsDo:
	Receiver: a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		each: 	[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]]
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)
	Arguments and temporary variables: 
		aBlock: 	[:each | each
		ifNotNil: [aBlock value: each]]
		index: 	1
		indexLimiT: 	7
	Receiver's instance variables: 
an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)

Dictionary>>associationsDo:
	Receiver: a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )
	Arguments and temporary variables: 
		aBlock: 	[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]]
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)


Bag>>do:
	Receiver: a Bag(a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	[member | member awardsWon
		do: [:award | allAwards add: award]]
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )


Band>>awardsWon
	Receiver: a Band
	Arguments and temporary variables: 
		allAwards: 	nil
		member: 	nil
	Receiver's instance variables: 
		activeSince: 	1981
		awardsWon: 	nil
		artistName: 	'Metallica'
		members: 	a Bag(a Solo a Solo a Solo a Solo)


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		hetfield: 	a Solo
		ulrich: 	a Solo
		hammett: 	a Solo
		trujillo: 	a Solo
		metallica: 	a Band
		mustaine: 	a Solo
		drover: 	a Solo
		broderick: 	a Solo
		ellefson: 	a Solo
		megadeth: 	a Band
		martin: 	a Solo
		fakefigures: 	a Band
		awardBestMaleSinger: 	a SoloCategory
		awardBestNewcomerBand: 	nil
		ceremony: 	a Ceremony
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(753664000)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 799@1234
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 799@1234
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 19852147) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(897056768)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[388@381 mouseUp 19852297 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	360@367 corner: 497@385
		owner: 	a MenuMorph(889978880)
		submorphs: 	#()
		fullBounds: 	360@367 corner: 497@385
		color: 	Color black
		extension: 	a MorphExtension (907280384)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(897056768)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[388@381 mouseUp 19852297 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	360@367 corner: 497@385
		owner: 	a MenuMorph(889978880)
		submorphs: 	#()
		fullBounds: 	360@367 corner: 497@385
		color: 	Color black
		extension: 	a MorphExtension (907280384)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(897056768)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[388@381 mouseUp 19852297 nil]
	Receiver's instance variables: 
		bounds: 	360@367 corner: 497@385
		owner: 	a MenuMorph(889978880)
		submorphs: 	#()
		fullBounds: 	360@367 corner: 497@385
		color: 	Color black
		extension: 	a MorphExtension (907280384)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(897056768)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[388@381 mouseUp 19852297 nil]
	Receiver's instance variables: 
		bounds: 	360@367 corner: 497@385
		owner: 	a MenuMorph(889978880)
		submorphs: 	#()
		fullBounds: 	360@367 corner: 497@385
		color: 	Color black
		extension: 	a MorphExtension (907280384)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [388@381 mouseUp 19852297 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(897056768)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	19852297
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	388@381
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(897056768)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[388@381 mouseUp 19852297 nil]
	Receiver's instance variables: 
		bounds: 	360@367 corner: 497@385
		owner: 	a MenuMorph(889978880)
		submorphs: 	#()
		fullBounds: 	360@367 corner: 497@385
		color: 	Color black
		extension: 	a MorphExtension (907280384)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[388@381 mouseUp 19852297 nil]
		aMorph: 	a ToggleMenuItemMorph(897056768)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[388@381 mouseUp 19852297 nil]
		aMorph: 	a ToggleMenuItemMorph(897056768)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(897056768)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[388@381 mouseUp 19852297 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	360@367 corner: 497@385
		owner: 	a MenuMorph(889978880)
		submorphs: 	#()
		fullBounds: 	360@367 corner: 497@385
		color: 	Color black
		extension: 	a MorphExtension (907280384)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[388@381 mouseUp 19852297 nil]
		aMorph: 	a MenuMorph(889978880)
		localEvt: 	[388@381 mouseUp 19852297 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(897056768)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(897056768)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[388@381 mouseUp 19852297 nil]
		aMorph: 	a MenuMorph(889978880)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(889978880)
	Arguments and temporary variables: 
		anEvent: 	[388@381 mouseUp 19852297 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	355@362 corner: 502@709
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(897056768)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	355@362 corner: 502@709
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (904921088) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(897056768)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(897056768)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(889978880)
	Arguments and temporary variables: 
		anEvent: 	[388@381 mouseUp 19852297 nil]
	Receiver's instance variables: 
		bounds: 	355@362 corner: 502@709
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(897056768)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	355@362 corner: 502@709
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (904921088) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(897056768)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(897056768)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(889978880)
	Arguments and temporary variables: 
		evt: 	[388@381 mouseUp 19852297 nil]
	Receiver's instance variables: 
		bounds: 	355@362 corner: 502@709
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(897056768)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	355@362 corner: 502@709
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (904921088) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(897056768)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(897056768)'Do it (d)' a T...etc...



--- The full stack ---
BlockClosure(Object)>>error:
BlockClosure>>numArgsError:
BlockClosure>>value:
[aBlock value: assoc key] in [:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
SmallInteger(Integer)>>timesRepeat:
[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
[:each | each
		ifNotNil: [aBlock value: each]] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Bag>>do:
Band>>awardsWon
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: This block accepts 0 arguments, but was called with 1 argument.
16 January 2012 10:32:22 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure(Object)>>error:
	Receiver: [member | member awardsWon
		do: [:award | allAwards add: award]]
	Arguments and temporary variables: 
		aString: 	'This block accepts 0 arguments, but was called with 1 argument.'
	Receiver's instance variables: 
		outerContext: 	Band>>awardsWon
		startpc: 	41
		numArgs: 	0


BlockClosure>>numArgsError:
	Receiver: [member | member awardsWon
		do: [:award | allAwards add: award]]
	Arguments and temporary variables: 
		numArgsForInvocation: 	1
		printNArgs: 	[:n | n printString , ' argument'
		, (n = 1
				ifTrue: ['']
				i...etc...
	Receiver's instance variables: 
		outerContext: 	Band>>awardsWon
		startpc: 	41
		numArgs: 	0


BlockClosure>>value:
	Receiver: [member | member awardsWon
		do: [:award | allAwards add: award]]
	Arguments and temporary variables: 
		anArg: 	a Solo
		newContext: 	nil
		ncv: 	nil
	Receiver's instance variables: 
		outerContext: 	Band>>awardsWon
		startpc: 	41
		numArgs: 	0


[aBlock value: assoc key] in [:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
	Receiver: a Bag(a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		assoc: 	[member | member awardsWon
		do: [:award | allAwards add: award]]
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )


SmallInteger(Integer)>>timesRepeat:
	Receiver: 1
	Arguments and temporary variables: 
		aBlock: 	[aBlock value: assoc key]
		count: 	1
	Receiver's instance variables: 
1

[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
	Receiver: a Bag(a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		assoc: 	[member | member awardsWon
		do: [:award | allAwards add: award]]
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )


[:each | each
		ifNotNil: [aBlock value: each]] in Dictionary>>associationsDo:
	Receiver: a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		each: 	[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]]
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)
	Arguments and temporary variables: 
		aBlock: 	[:each | each
		ifNotNil: [aBlock value: each]]
		index: 	1
		indexLimiT: 	7
	Receiver's instance variables: 
an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)

Dictionary>>associationsDo:
	Receiver: a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )
	Arguments and temporary variables: 
		aBlock: 	[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]]
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)


Bag>>do:
	Receiver: a Bag(a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	[member | member awardsWon
		do: [:award | allAwards add: award]]
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )


Band>>awardsWon
	Receiver: a Band
	Arguments and temporary variables: 
		allAwards: 	a LinkedList()
		member: 	nil
	Receiver's instance variables: 
		activeSince: 	1981
		awardsWon: 	a LinkedList()
		artistName: 	'Metallica'
		members: 	a Bag(a Solo a Solo a Solo a Solo)


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		hetfield: 	a Solo
		ulrich: 	a Solo
		hammett: 	a Solo
		trujillo: 	a Solo
		metallica: 	a Band
		mustaine: 	a Solo
		drover: 	a Solo
		broderick: 	a Solo
		ellefson: 	a Solo
		megadeth: 	a Band
		martin: 	a Solo
		fakefigures: 	a Band
		awardBestMaleSinger: 	a SoloCategory
		awardBestNewcomerBand: 	nil
		ceremony: 	a Ceremony
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(986710016)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 799@1234
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 799@1234
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 19872651) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(397148160)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[406@275 mouseUp 19872615 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	391@269 corner: 528@287
		owner: 	a MenuMorph(390070272)
		submorphs: 	#()
		fullBounds: 	391@269 corner: 528@287
		color: 	Color black
		extension: 	a MorphExtension (407371776)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(397148160)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[406@275 mouseUp 19872615 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	391@269 corner: 528@287
		owner: 	a MenuMorph(390070272)
		submorphs: 	#()
		fullBounds: 	391@269 corner: 528@287
		color: 	Color black
		extension: 	a MorphExtension (407371776)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(397148160)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[406@275 mouseUp 19872615 nil]
	Receiver's instance variables: 
		bounds: 	391@269 corner: 528@287
		owner: 	a MenuMorph(390070272)
		submorphs: 	#()
		fullBounds: 	391@269 corner: 528@287
		color: 	Color black
		extension: 	a MorphExtension (407371776)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(397148160)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[406@275 mouseUp 19872615 nil]
	Receiver's instance variables: 
		bounds: 	391@269 corner: 528@287
		owner: 	a MenuMorph(390070272)
		submorphs: 	#()
		fullBounds: 	391@269 corner: 528@287
		color: 	Color black
		extension: 	a MorphExtension (407371776)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [406@275 mouseUp 19872615 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(397148160)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	19872615
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	406@275
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(397148160)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[406@275 mouseUp 19872615 nil]
	Receiver's instance variables: 
		bounds: 	391@269 corner: 528@287
		owner: 	a MenuMorph(390070272)
		submorphs: 	#()
		fullBounds: 	391@269 corner: 528@287
		color: 	Color black
		extension: 	a MorphExtension (407371776)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[406@275 mouseUp 19872615 nil]
		aMorph: 	a ToggleMenuItemMorph(397148160)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[406@275 mouseUp 19872615 nil]
		aMorph: 	a ToggleMenuItemMorph(397148160)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(397148160)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[406@275 mouseUp 19872615 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	391@269 corner: 528@287
		owner: 	a MenuMorph(390070272)
		submorphs: 	#()
		fullBounds: 	391@269 corner: 528@287
		color: 	Color black
		extension: 	a MorphExtension (407371776)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[406@275 mouseUp 19872615 nil]
		aMorph: 	a MenuMorph(390070272)
		localEvt: 	[406@275 mouseUp 19872615 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(397148160)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(397148160)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[406@275 mouseUp 19872615 nil]
		aMorph: 	a MenuMorph(390070272)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(390070272)
	Arguments and temporary variables: 
		anEvent: 	[406@275 mouseUp 19872615 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	386@264 corner: 533@611
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(397148160)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	386@264 corner: 533@611
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (405012480) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(397148160)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(397148160)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(390070272)
	Arguments and temporary variables: 
		anEvent: 	[406@275 mouseUp 19872615 nil]
	Receiver's instance variables: 
		bounds: 	386@264 corner: 533@611
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(397148160)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	386@264 corner: 533@611
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (405012480) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(397148160)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(397148160)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(390070272)
	Arguments and temporary variables: 
		evt: 	[406@275 mouseUp 19872615 nil]
	Receiver's instance variables: 
		bounds: 	386@264 corner: 533@611
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(397148160)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	386@264 corner: 533@611
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (405012480) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(397148160)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(397148160)'Do it (d)' a T...etc...



--- The full stack ---
BlockClosure(Object)>>error:
BlockClosure>>numArgsError:
BlockClosure>>value:
[aBlock value: assoc key] in [:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
SmallInteger(Integer)>>timesRepeat:
[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
[:each | each
		ifNotNil: [aBlock value: each]] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Bag>>do:
Band>>awardsWon
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: This block accepts 0 arguments, but was called with 1 argument.
16 January 2012 10:32:52 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure(Object)>>error:
	Receiver: [member | member awardsWon
		do: [:award | allAwards add: award]]
	Arguments and temporary variables: 
		aString: 	'This block accepts 0 arguments, but was called with 1 argument.'
	Receiver's instance variables: 
		outerContext: 	Band>>awardsWon
		startpc: 	59
		numArgs: 	0


BlockClosure>>numArgsError:
	Receiver: [member | member awardsWon
		do: [:award | allAwards add: award]]
	Arguments and temporary variables: 
		numArgsForInvocation: 	1
		printNArgs: 	[:n | n printString , ' argument'
		, (n = 1
				ifTrue: ['']
				i...etc...
	Receiver's instance variables: 
		outerContext: 	Band>>awardsWon
		startpc: 	59
		numArgs: 	0


BlockClosure>>value:
	Receiver: [member | member awardsWon
		do: [:award | allAwards add: award]]
	Arguments and temporary variables: 
		anArg: 	a Solo
		newContext: 	nil
		ncv: 	nil
	Receiver's instance variables: 
		outerContext: 	Band>>awardsWon
		startpc: 	59
		numArgs: 	0


[aBlock value: assoc key] in [:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
	Receiver: a Bag(a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		assoc: 	[member | member awardsWon
		do: [:award | allAwards add: award]]
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )


SmallInteger(Integer)>>timesRepeat:
	Receiver: 1
	Arguments and temporary variables: 
		aBlock: 	[aBlock value: assoc key]
		count: 	1
	Receiver's instance variables: 
1

[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
	Receiver: a Bag(a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		assoc: 	[member | member awardsWon
		do: [:award | allAwards add: award]]
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )


[:each | each
		ifNotNil: [aBlock value: each]] in Dictionary>>associationsDo:
	Receiver: a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		each: 	[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]]
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)
	Arguments and temporary variables: 
		aBlock: 	[:each | each
		ifNotNil: [aBlock value: each]]
		index: 	1
		indexLimiT: 	7
	Receiver's instance variables: 
an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)

Dictionary>>associationsDo:
	Receiver: a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )
	Arguments and temporary variables: 
		aBlock: 	[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]]
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)


Bag>>do:
	Receiver: a Bag(a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	[member | member awardsWon
		do: [:award | allAwards add: award]]
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )


Band>>awardsWon
	Receiver: a Band
	Arguments and temporary variables: 
		allAwards: 	a LinkedList()
		member: 	nil
	Receiver's instance variables: 
		activeSince: 	1981
		awardsWon: 	a LinkedList()
		artistName: 	'Metallica'
		members: 	a Bag(a Solo a Solo a Solo a Solo)


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		hetfield: 	a Solo
		ulrich: 	a Solo
		hammett: 	a Solo
		trujillo: 	a Solo
		metallica: 	a Band
		mustaine: 	a Solo
		drover: 	a Solo
		broderick: 	a Solo
		ellefson: 	a Solo
		megadeth: 	a Band
		martin: 	a Solo
		fakefigures: 	a Band
		awardBestMaleSinger: 	a SoloCategory
		awardBestNewcomerBand: 	nil
		ceremony: 	a Ceremony
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(90963968)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 799@1234
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 799@1234
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 19903289) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(815005696)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[462@342 mouseUp 19903223 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	453@336 corner: 590@354
		owner: 	a MenuMorph(807927808)
		submorphs: 	#()
		fullBounds: 	453@336 corner: 590@354
		color: 	Color black
		extension: 	a MorphExtension (825229312)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(815005696)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[462@342 mouseUp 19903223 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	453@336 corner: 590@354
		owner: 	a MenuMorph(807927808)
		submorphs: 	#()
		fullBounds: 	453@336 corner: 590@354
		color: 	Color black
		extension: 	a MorphExtension (825229312)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(815005696)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[462@342 mouseUp 19903223 nil]
	Receiver's instance variables: 
		bounds: 	453@336 corner: 590@354
		owner: 	a MenuMorph(807927808)
		submorphs: 	#()
		fullBounds: 	453@336 corner: 590@354
		color: 	Color black
		extension: 	a MorphExtension (825229312)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(815005696)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[462@342 mouseUp 19903223 nil]
	Receiver's instance variables: 
		bounds: 	453@336 corner: 590@354
		owner: 	a MenuMorph(807927808)
		submorphs: 	#()
		fullBounds: 	453@336 corner: 590@354
		color: 	Color black
		extension: 	a MorphExtension (825229312)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [462@342 mouseUp 19903223 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(815005696)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	19903223
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	462@342
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(815005696)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[462@342 mouseUp 19903223 nil]
	Receiver's instance variables: 
		bounds: 	453@336 corner: 590@354
		owner: 	a MenuMorph(807927808)
		submorphs: 	#()
		fullBounds: 	453@336 corner: 590@354
		color: 	Color black
		extension: 	a MorphExtension (825229312)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[462@342 mouseUp 19903223 nil]
		aMorph: 	a ToggleMenuItemMorph(815005696)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[462@342 mouseUp 19903223 nil]
		aMorph: 	a ToggleMenuItemMorph(815005696)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(815005696)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[462@342 mouseUp 19903223 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	453@336 corner: 590@354
		owner: 	a MenuMorph(807927808)
		submorphs: 	#()
		fullBounds: 	453@336 corner: 590@354
		color: 	Color black
		extension: 	a MorphExtension (825229312)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[462@342 mouseUp 19903223 nil]
		aMorph: 	a MenuMorph(807927808)
		localEvt: 	[462@342 mouseUp 19903223 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(815005696)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(815005696)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[462@342 mouseUp 19903223 nil]
		aMorph: 	a MenuMorph(807927808)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(807927808)
	Arguments and temporary variables: 
		anEvent: 	[462@342 mouseUp 19903223 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	448@331 corner: 595@678
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(815005696)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	448@331 corner: 595@678
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (822870016) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(815005696)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(815005696)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(807927808)
	Arguments and temporary variables: 
		anEvent: 	[462@342 mouseUp 19903223 nil]
	Receiver's instance variables: 
		bounds: 	448@331 corner: 595@678
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(815005696)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	448@331 corner: 595@678
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (822870016) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(815005696)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(815005696)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(807927808)
	Arguments and temporary variables: 
		evt: 	[462@342 mouseUp 19903223 nil]
	Receiver's instance variables: 
		bounds: 	448@331 corner: 595@678
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(815005696)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	448@331 corner: 595@678
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (822870016) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(815005696)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(815005696)'Do it (d)' a T...etc...



--- The full stack ---
BlockClosure(Object)>>error:
BlockClosure>>numArgsError:
BlockClosure>>value:
[aBlock value: assoc key] in [:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
SmallInteger(Integer)>>timesRepeat:
[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
[:each | each
		ifNotNil: [aBlock value: each]] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Bag>>do:
Band>>awardsWon
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: This block accepts 0 arguments, but was called with 1 argument.
16 January 2012 10:34:08 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure(Object)>>error:
	Receiver: [member | member allAwardsWon
		do: [:award | allAwards add: award]]
	Arguments and temporary variables: 
		aString: 	'This block accepts 0 arguments, but was called with 1 argument.'
	Receiver's instance variables: 
		outerContext: 	Band>>allAwardsWon
		startpc: 	63
		numArgs: 	0


BlockClosure>>numArgsError:
	Receiver: [member | member allAwardsWon
		do: [:award | allAwards add: award]]
	Arguments and temporary variables: 
		numArgsForInvocation: 	1
		printNArgs: 	[:n | n printString , ' argument'
		, (n = 1
				ifTrue: ['']
				i...etc...
	Receiver's instance variables: 
		outerContext: 	Band>>allAwardsWon
		startpc: 	63
		numArgs: 	0


BlockClosure>>value:
	Receiver: [member | member allAwardsWon
		do: [:award | allAwards add: award]]
	Arguments and temporary variables: 
		anArg: 	a Solo
		newContext: 	nil
		ncv: 	nil
	Receiver's instance variables: 
		outerContext: 	Band>>allAwardsWon
		startpc: 	63
		numArgs: 	0


[aBlock value: assoc key] in [:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
	Receiver: a Bag(a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		assoc: 	[member | member allAwardsWon
		do: [:award | allAwards add: award]]
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )


SmallInteger(Integer)>>timesRepeat:
	Receiver: 1
	Arguments and temporary variables: 
		aBlock: 	[aBlock value: assoc key]
		count: 	1
	Receiver's instance variables: 
1

[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
	Receiver: a Bag(a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		assoc: 	[member | member allAwardsWon
		do: [:award | allAwards add: award]]
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )


[:each | each
		ifNotNil: [aBlock value: each]] in Dictionary>>associationsDo:
	Receiver: a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		each: 	[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]]
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)
	Arguments and temporary variables: 
		aBlock: 	[:each | each
		ifNotNil: [aBlock value: each]]
		index: 	1
		indexLimiT: 	7
	Receiver's instance variables: 
an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)

Dictionary>>associationsDo:
	Receiver: a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )
	Arguments and temporary variables: 
		aBlock: 	[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]]
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)


Bag>>do:
	Receiver: a Bag(a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	[member | member allAwardsWon
		do: [:award | allAwards add: award]]
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )


Band>>allAwardsWon
	Receiver: a Band
	Arguments and temporary variables: 
		allAwards: 	a LinkedList()
		member: 	nil
	Receiver's instance variables: 
		activeSince: 	1981
		awardsWon: 	a LinkedList()
		artistName: 	'Metallica'
		members: 	a Bag(a Solo a Solo a Solo a Solo)


Ceremony>>printAwardsWon:
	Receiver: a Ceremony
	Arguments and temporary variables: 
		anArtist: 	a Band
	Receiver's instance variables: 
		awards: 	nil
		ceremonyName: 	'MTV Music Awards'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		hetfield: 	a Solo
		ulrich: 	a Solo
		hammett: 	a Solo
		trujillo: 	a Solo
		metallica: 	a Band
		mustaine: 	a Solo
		drover: 	a Solo
		broderick: 	a Solo
		ellefson: 	a Solo
		megadeth: 	a Band
		martin: 	a Solo
		fakefigures: 	a Band
		awardBestMaleSinger: 	a SoloCategory
		awardBestNewcomerBand: 	nil
		ceremony: 	a Ceremony
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(994050048)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 799@1234
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 799@1234
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 19978607) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(906493952)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[388@379 mouseUp 19978930 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	350@367 corner: 487@385
		owner: 	a MenuMorph(899416064)
		submorphs: 	#()
		fullBounds: 	350@367 corner: 487@385
		color: 	Color black
		extension: 	a MorphExtension (916717568)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(906493952)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[388@379 mouseUp 19978930 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	350@367 corner: 487@385
		owner: 	a MenuMorph(899416064)
		submorphs: 	#()
		fullBounds: 	350@367 corner: 487@385
		color: 	Color black
		extension: 	a MorphExtension (916717568)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(906493952)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[388@379 mouseUp 19978930 nil]
	Receiver's instance variables: 
		bounds: 	350@367 corner: 487@385
		owner: 	a MenuMorph(899416064)
		submorphs: 	#()
		fullBounds: 	350@367 corner: 487@385
		color: 	Color black
		extension: 	a MorphExtension (916717568)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(906493952)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[388@379 mouseUp 19978930 nil]
	Receiver's instance variables: 
		bounds: 	350@367 corner: 487@385
		owner: 	a MenuMorph(899416064)
		submorphs: 	#()
		fullBounds: 	350@367 corner: 487@385
		color: 	Color black
		extension: 	a MorphExtension (916717568)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [388@379 mouseUp 19978930 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(906493952)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	19978930
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	388@379
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(906493952)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[388@379 mouseUp 19978930 nil]
	Receiver's instance variables: 
		bounds: 	350@367 corner: 487@385
		owner: 	a MenuMorph(899416064)
		submorphs: 	#()
		fullBounds: 	350@367 corner: 487@385
		color: 	Color black
		extension: 	a MorphExtension (916717568)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[388@379 mouseUp 19978930 nil]
		aMorph: 	a ToggleMenuItemMorph(906493952)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[388@379 mouseUp 19978930 nil]
		aMorph: 	a ToggleMenuItemMorph(906493952)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(906493952)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[388@379 mouseUp 19978930 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	350@367 corner: 487@385
		owner: 	a MenuMorph(899416064)
		submorphs: 	#()
		fullBounds: 	350@367 corner: 487@385
		color: 	Color black
		extension: 	a MorphExtension (916717568)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[388@379 mouseUp 19978930 nil]
		aMorph: 	a MenuMorph(899416064)
		localEvt: 	[388@379 mouseUp 19978930 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(906493952)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(906493952)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[388@379 mouseUp 19978930 nil]
		aMorph: 	a MenuMorph(899416064)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(899416064)
	Arguments and temporary variables: 
		anEvent: 	[388@379 mouseUp 19978930 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	345@362 corner: 492@709
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(906493952)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	345@362 corner: 492@709
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (914358272) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(906493952)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(906493952)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(899416064)
	Arguments and temporary variables: 
		anEvent: 	[388@379 mouseUp 19978930 nil]
	Receiver's instance variables: 
		bounds: 	345@362 corner: 492@709
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(906493952)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	345@362 corner: 492@709
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (914358272) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(906493952)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(906493952)'Do it (d)' a T...etc...



--- The full stack ---
BlockClosure(Object)>>error:
BlockClosure>>numArgsError:
BlockClosure>>value:
[aBlock value: assoc key] in [:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
SmallInteger(Integer)>>timesRepeat:
[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
[:each | each
		ifNotNil: [aBlock value: each]] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Bag>>do:
Band>>allAwardsWon
Ceremony>>printAwardsWon:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: This block accepts 0 arguments, but was called with 1 argument.
16 January 2012 10:34:39 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure(Object)>>error:
	Receiver: [member | member allAwardsWon
		do: [:award | allAwards add: award]]
	Arguments and temporary variables: 
		aString: 	'This block accepts 0 arguments, but was called with 1 argument.'
	Receiver's instance variables: 
		outerContext: 	Band>>allAwardsWon
		startpc: 	62
		numArgs: 	0


BlockClosure>>numArgsError:
	Receiver: [member | member allAwardsWon
		do: [:award | allAwards add: award]]
	Arguments and temporary variables: 
		numArgsForInvocation: 	1
		printNArgs: 	[:n | n printString , ' argument'
		, (n = 1
				ifTrue: ['']
				i...etc...
	Receiver's instance variables: 
		outerContext: 	Band>>allAwardsWon
		startpc: 	62
		numArgs: 	0


BlockClosure>>value:
	Receiver: [member | member allAwardsWon
		do: [:award | allAwards add: award]]
	Arguments and temporary variables: 
		anArg: 	a Solo
		newContext: 	nil
		ncv: 	nil
	Receiver's instance variables: 
		outerContext: 	Band>>allAwardsWon
		startpc: 	62
		numArgs: 	0


[aBlock value: assoc key] in [:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
	Receiver: a Bag(a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		assoc: 	[member | member allAwardsWon
		do: [:award | allAwards add: award]]
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )


SmallInteger(Integer)>>timesRepeat:
	Receiver: 1
	Arguments and temporary variables: 
		aBlock: 	[aBlock value: assoc key]
		count: 	1
	Receiver's instance variables: 
1

[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
	Receiver: a Bag(a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		assoc: 	[member | member allAwardsWon
		do: [:award | allAwards add: award]]
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )


[:each | each
		ifNotNil: [aBlock value: each]] in Dictionary>>associationsDo:
	Receiver: a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )
	Arguments and temporary variables: 
		aBlock: 	a Solo->1
		each: 	[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]]
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)
	Arguments and temporary variables: 
		aBlock: 	[:each | each
		ifNotNil: [aBlock value: each]]
		index: 	1
		indexLimiT: 	7
	Receiver's instance variables: 
an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)

Dictionary>>associationsDo:
	Receiver: a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )
	Arguments and temporary variables: 
		aBlock: 	[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]]
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(a Solo->1 a Solo->1 a Solo->1 a Solo->1 nil nil nil)


Bag>>do:
	Receiver: a Bag(a Solo a Solo a Solo a Solo)
	Arguments and temporary variables: 
		aBlock: 	[member | member allAwardsWon
		do: [:award | allAwards add: award]]
	Receiver's instance variables: 
		contents: 	a Dictionary(a Solo->1 a Solo->1 a Solo->1 a Solo->1 )


Band>>allAwardsWon
	Receiver: a Band
	Arguments and temporary variables: 
		allAwards: 	a LinkedList()
		member: 	nil
	Receiver's instance variables: 
		activeSince: 	1981
		awardsWon: 	a LinkedList()
		artistName: 	'Metallica'
		members: 	a Bag(a Solo a Solo a Solo a Solo)


Ceremony>>printAwardsWon:
	Receiver: a Ceremony
	Arguments and temporary variables: 
		anArtist: 	a Band
	Receiver's instance variables: 
		awards: 	nil
		ceremonyName: 	'MTV Music Awards'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		hetfield: 	a Solo
		ulrich: 	a Solo
		hammett: 	a Solo
		trujillo: 	a Solo
		metallica: 	a Band
		mustaine: 	a Solo
		drover: 	a Solo
		broderick: 	a Solo
		ellefson: 	a Solo
		megadeth: 	a Band
		martin: 	a Solo
		fakefigures: 	a Band
		awardBestMaleSinger: 	a SoloCategory
		awardBestNewcomerBand: 	nil
		ceremony: 	a Ceremony
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(772276224)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 799@1234
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 799@1234
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 20010079) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(991690752)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[441@307 mouseUp 20010075 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	427@300 corner: 564@318
		owner: 	a MenuMorph(929562624)
		submorphs: 	#()
		fullBounds: 	427@300 corner: 564@318
		color: 	Color black
		extension: 	a MorphExtension (1001914368)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(991690752)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[441@307 mouseUp 20010075 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	427@300 corner: 564@318
		owner: 	a MenuMorph(929562624)
		submorphs: 	#()
		fullBounds: 	427@300 corner: 564@318
		color: 	Color black
		extension: 	a MorphExtension (1001914368)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(991690752)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[441@307 mouseUp 20010075 nil]
	Receiver's instance variables: 
		bounds: 	427@300 corner: 564@318
		owner: 	a MenuMorph(929562624)
		submorphs: 	#()
		fullBounds: 	427@300 corner: 564@318
		color: 	Color black
		extension: 	a MorphExtension (1001914368)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(991690752)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[441@307 mouseUp 20010075 nil]
	Receiver's instance variables: 
		bounds: 	427@300 corner: 564@318
		owner: 	a MenuMorph(929562624)
		submorphs: 	#()
		fullBounds: 	427@300 corner: 564@318
		color: 	Color black
		extension: 	a MorphExtension (1001914368)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [441@307 mouseUp 20010075 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(991690752)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	20010075
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	441@307
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(991690752)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[441@307 mouseUp 20010075 nil]
	Receiver's instance variables: 
		bounds: 	427@300 corner: 564@318
		owner: 	a MenuMorph(929562624)
		submorphs: 	#()
		fullBounds: 	427@300 corner: 564@318
		color: 	Color black
		extension: 	a MorphExtension (1001914368)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[441@307 mouseUp 20010075 nil]
		aMorph: 	a ToggleMenuItemMorph(991690752)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[441@307 mouseUp 20010075 nil]
		aMorph: 	a ToggleMenuItemMorph(991690752)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(991690752)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[441@307 mouseUp 20010075 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	427@300 corner: 564@318
		owner: 	a MenuMorph(929562624)
		submorphs: 	#()
		fullBounds: 	427@300 corner: 564@318
		color: 	Color black
		extension: 	a MorphExtension (1001914368)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[441@307 mouseUp 20010075 nil]
		aMorph: 	a MenuMorph(929562624)
		localEvt: 	[441@307 mouseUp 20010075 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(991690752)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(991690752)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[441@307 mouseUp 20010075 nil]
		aMorph: 	a MenuMorph(929562624)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(929562624)
	Arguments and temporary variables: 
		anEvent: 	[441@307 mouseUp 20010075 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	422@295 corner: 569@642
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(991690752)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	422@295 corner: 569@642
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (944504832) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(991690752)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(991690752)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(929562624)
	Arguments and temporary variables: 
		anEvent: 	[441@307 mouseUp 20010075 nil]
	Receiver's instance variables: 
		bounds: 	422@295 corner: 569@642
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(991690752)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	422@295 corner: 569@642
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (944504832) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(991690752)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(991690752)'Do it (d)' a T...etc...



--- The full stack ---
BlockClosure(Object)>>error:
BlockClosure>>numArgsError:
BlockClosure>>value:
[aBlock value: assoc key] in [:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
SmallInteger(Integer)>>timesRepeat:
[:assoc | assoc value
		timesRepeat: [aBlock value: assoc key]] in Bag>>do:
[:each | each
		ifNotNil: [aBlock value: each]] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Bag>>do:
Band>>allAwardsWon
Ceremony>>printAwardsWon:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Band>>,
16 January 2012 10:36:21 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

Band(Object)>>doesNotUnderstand: #,
	Receiver: a Band
	Arguments and temporary variables: 
		aMessage: 	, ' won: '
		exception: 	MessageNotUnderstood: Band>>,
		resumeValue: 	nil
	Receiver's instance variables: 
		activeSince: 	1981
		awardsWon: 	a LinkedList(a SoloCategory)
		artistName: 	'Metallica'
		members: 	a Bag(a Solo a Solo a Solo a Solo)


[:award | self notice: anArtist , ' won: ' , award] in Ceremony>>printAwardsWon:
	Receiver: a Ceremony
	Arguments and temporary variables: 
		anArtist: 	a SoloCategory
		award: 	a Band
	Receiver's instance variables: 
		awards: 	nil
		ceremonyName: 	'MTV Music Awards'


LinkedList>>do:
	Receiver: a LinkedList(a SoloCategory)
	Arguments and temporary variables: 
		aBlock: 	[:award | self notice: anArtist , ' won: ' , award]
		aLink: 	ValueLink(a SoloCategory)
	Receiver's instance variables: 
		firstLink: 	ValueLink(a SoloCategory)
		lastLink: 	ValueLink(a SoloCategory)


Ceremony>>printAwardsWon:
	Receiver: a Ceremony
	Arguments and temporary variables: 
		anArtist: 	a Band
	Receiver's instance variables: 
		awards: 	nil
		ceremonyName: 	'MTV Music Awards'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		hetfield: 	a Solo
		ulrich: 	a Solo
		hammett: 	a Solo
		trujillo: 	a Solo
		metallica: 	a Band
		mustaine: 	a Solo
		drover: 	a Solo
		broderick: 	a Solo
		ellefson: 	a Solo
		megadeth: 	a Band
		martin: 	a Solo
		fakefigures: 	a Band
		awardBestMaleSinger: 	a SoloCategory
		awardBestNewcomerBand: 	nil
		ceremony: 	a Ceremony
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(124780544)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 799@1234
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 799@1234
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 20112233) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(37486592)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[477@358 mouseUp 20112208 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	467@351 corner: 604@369
		owner: 	a MenuMorph(30408704)
		submorphs: 	#()
		fullBounds: 	467@351 corner: 604@369
		color: 	Color black
		extension: 	a MorphExtension (47710208)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(37486592)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[477@358 mouseUp 20112208 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	467@351 corner: 604@369
		owner: 	a MenuMorph(30408704)
		submorphs: 	#()
		fullBounds: 	467@351 corner: 604@369
		color: 	Color black
		extension: 	a MorphExtension (47710208)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(37486592)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[477@358 mouseUp 20112208 nil]
	Receiver's instance variables: 
		bounds: 	467@351 corner: 604@369
		owner: 	a MenuMorph(30408704)
		submorphs: 	#()
		fullBounds: 	467@351 corner: 604@369
		color: 	Color black
		extension: 	a MorphExtension (47710208)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(37486592)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[477@358 mouseUp 20112208 nil]
	Receiver's instance variables: 
		bounds: 	467@351 corner: 604@369
		owner: 	a MenuMorph(30408704)
		submorphs: 	#()
		fullBounds: 	467@351 corner: 604@369
		color: 	Color black
		extension: 	a MorphExtension (47710208)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [477@358 mouseUp 20112208 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(37486592)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	20112208
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	477@358
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(37486592)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[477@358 mouseUp 20112208 nil]
	Receiver's instance variables: 
		bounds: 	467@351 corner: 604@369
		owner: 	a MenuMorph(30408704)
		submorphs: 	#()
		fullBounds: 	467@351 corner: 604@369
		color: 	Color black
		extension: 	a MorphExtension (47710208)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[477@358 mouseUp 20112208 nil]
		aMorph: 	a ToggleMenuItemMorph(37486592)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[477@358 mouseUp 20112208 nil]
		aMorph: 	a ToggleMenuItemMorph(37486592)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(37486592)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[477@358 mouseUp 20112208 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	467@351 corner: 604@369
		owner: 	a MenuMorph(30408704)
		submorphs: 	#()
		fullBounds: 	467@351 corner: 604@369
		color: 	Color black
		extension: 	a MorphExtension (47710208)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[477@358 mouseUp 20112208 nil]
		aMorph: 	a MenuMorph(30408704)
		localEvt: 	[477@358 mouseUp 20112208 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(37486592)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(37486592)'Do it (d)' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[477@358 mouseUp 20112208 nil]
		aMorph: 	a MenuMorph(30408704)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(30408704)
	Arguments and temporary variables: 
		anEvent: 	[477@358 mouseUp 20112208 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	462@346 corner: 609@693
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(37486592)'Do it (d)' a ToggleMenuItem...etc...
		fullBounds: 	462@346 corner: 609@693
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (45350912) [other:  (basicColor -> (Color r: 0.745 ...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(37486592)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(37486592)'Do it (d)' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(30408704)
	Arguments and temporary variables: 
		anEvent: 	[477@358 mouseUp 20112208 nil]
	Receiver's instance variables: 
		bounds: 	462@346 corner: 609@693
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(37486592)'Do it (d)' a ToggleMenuItem...etc...
		fullBounds: 	462@346 corner: 609@693
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (45350912) [other:  (basicColor -> (Color r: 0.745 ...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(37486592)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(37486592)'Do it (d)' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(30408704)
	Arguments and temporary variables: 
		evt: 	[477@358 mouseUp 20112208 nil]
	Receiver's instance variables: 
		bounds: 	462@346 corner: 609@693
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(37486592)'Do it (d)' a ToggleMenuItem...etc...
		fullBounds: 	462@346 corner: 609@693
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (45350912) [other:  (basicColor -> (Color r: 0.745 ...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(37486592)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(37486592)'Do it (d)' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[477@358 mouseUp 20112208 nil]
		focusHolder: 	a MenuMorph(30408704)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	476@361 corner: 492@377
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	476@361 corner: 492@377
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(885260288)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[477@358 476@361 mouseMove 20112689 nil]
		targetOffset: 	10@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 20112689 477 359 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1060372480) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[477@358 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1060372480) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[477@358 mouseUp 20112208 nil]
		focusHolder: 	a MenuMorph(30408704)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	476@361 corner: 492@377
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	476@361 corner: 492@377
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(885260288)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[477@358 476@361 mouseMove 20112689 nil]
		targetOffset: 	10@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 20112689 477 359 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[477@358 mouseUp 20112208 nil]
		focusHolder: 	a MenuMorph(30408704)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	476@361 corner: 492@377
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	476@361 corner: 492@377
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(885260288)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[477@358 476@361 mouseMove 20112689 nil]
		targetOffset: 	10@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 20112689 477 359 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[477@358 mouseUp 20112208 nil]
	Receiver's instance variables: 
		bounds: 	476@361 corner: 492@377
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	476@361 corner: 492@377
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(885260288)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[477@358 476@361 mouseMove 20112689 nil]
		targetOffset: 	10@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 20112689 477 359 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil



--- The full stack ---
Band(Object)>>doesNotUnderstand: #,
[:award | self notice: anArtist , ' won: ' , award] in Ceremony>>printAwardsWon:
LinkedList>>do:
Ceremony>>printAwardsWon:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Band>>,
16 January 2012 10:36:35 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

Band(Object)>>doesNotUnderstand: #,
	Receiver: a Band
	Arguments and temporary variables: 
		aMessage: 	, ' won: '
		exception: 	MessageNotUnderstood: Band>>,
		resumeValue: 	nil
	Receiver's instance variables: 
		activeSince: 	1981
		awardsWon: 	a LinkedList(a SoloCategory)
		artistName: 	'Metallica'
		members: 	a Bag(a Solo a Solo a Solo a Solo)


[:award | self notice: anArtist , ' won: ' , award] in Ceremony>>printAwardsWon:
	Receiver: a Ceremony
	Arguments and temporary variables: 
		anArtist: 	a SoloCategory
		award: 	a Band
	Receiver's instance variables: 
		awards: 	nil
		ceremonyName: 	'MTV Music Awards'


LinkedList>>do:
	Receiver: a LinkedList(a SoloCategory)
	Arguments and temporary variables: 
		aBlock: 	[:award | self notice: anArtist , ' won: ' , award]
		aLink: 	ValueLink(a SoloCategory)
	Receiver's instance variables: 
		firstLink: 	ValueLink(a SoloCategory)
		lastLink: 	ValueLink(a SoloCategory)


Ceremony>>printAwardsWon:
	Receiver: a Ceremony
	Arguments and temporary variables: 
		anArtist: 	a Band
	Receiver's instance variables: 
		awards: 	nil
		ceremonyName: 	'MTV Music Awards'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		hetfield: 	a Solo
		ulrich: 	a Solo
		hammett: 	a Solo
		trujillo: 	a Solo
		metallica: 	a Band
		mustaine: 	a Solo
		drover: 	a Solo
		broderick: 	a Solo
		ellefson: 	a Solo
		megadeth: 	a Band
		martin: 	a Solo
		fakefigures: 	a Band
		awardBestMaleSinger: 	a SoloCategory
		awardBestNewcomerBand: 	nil
		ceremony: 	a Ceremony
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(410517504)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 799@1234
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 799@1234
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 20125565) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(445120512)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[416@343 mouseUp 20125569 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	401@335 corner: 538@353
		owner: 	a MenuMorph(382992384)
		submorphs: 	#()
		fullBounds: 	401@335 corner: 538@353
		color: 	Color black
		extension: 	a MorphExtension (455344128)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(445120512)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[416@343 mouseUp 20125569 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	401@335 corner: 538@353
		owner: 	a MenuMorph(382992384)
		submorphs: 	#()
		fullBounds: 	401@335 corner: 538@353
		color: 	Color black
		extension: 	a MorphExtension (455344128)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(445120512)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[416@343 mouseUp 20125569 nil]
	Receiver's instance variables: 
		bounds: 	401@335 corner: 538@353
		owner: 	a MenuMorph(382992384)
		submorphs: 	#()
		fullBounds: 	401@335 corner: 538@353
		color: 	Color black
		extension: 	a MorphExtension (455344128)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(445120512)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[416@343 mouseUp 20125569 nil]
	Receiver's instance variables: 
		bounds: 	401@335 corner: 538@353
		owner: 	a MenuMorph(382992384)
		submorphs: 	#()
		fullBounds: 	401@335 corner: 538@353
		color: 	Color black
		extension: 	a MorphExtension (455344128)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [416@343 mouseUp 20125569 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(445120512)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	20125569
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	416@343
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(445120512)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[416@343 mouseUp 20125569 nil]
	Receiver's instance variables: 
		bounds: 	401@335 corner: 538@353
		owner: 	a MenuMorph(382992384)
		submorphs: 	#()
		fullBounds: 	401@335 corner: 538@353
		color: 	Color black
		extension: 	a MorphExtension (455344128)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[416@343 mouseUp 20125569 nil]
		aMorph: 	a ToggleMenuItemMorph(445120512)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[416@343 mouseUp 20125569 nil]
		aMorph: 	a ToggleMenuItemMorph(445120512)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(445120512)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[416@343 mouseUp 20125569 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	401@335 corner: 538@353
		owner: 	a MenuMorph(382992384)
		submorphs: 	#()
		fullBounds: 	401@335 corner: 538@353
		color: 	Color black
		extension: 	a MorphExtension (455344128)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[416@343 mouseUp 20125569 nil]
		aMorph: 	a MenuMorph(382992384)
		localEvt: 	[416@343 mouseUp 20125569 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(445120512)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(445120512)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[416@343 mouseUp 20125569 nil]
		aMorph: 	a MenuMorph(382992384)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(382992384)
	Arguments and temporary variables: 
		anEvent: 	[416@343 mouseUp 20125569 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	396@330 corner: 543@677
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(445120512)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	396@330 corner: 543@677
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (397934592) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(445120512)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(445120512)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(382992384)
	Arguments and temporary variables: 
		anEvent: 	[416@343 mouseUp 20125569 nil]
	Receiver's instance variables: 
		bounds: 	396@330 corner: 543@677
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(445120512)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	396@330 corner: 543@677
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (397934592) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(445120512)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(445120512)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(382992384)
	Arguments and temporary variables: 
		evt: 	[416@343 mouseUp 20125569 nil]
	Receiver's instance variables: 
		bounds: 	396@330 corner: 543@677
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(445120512)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	396@330 corner: 543@677
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (397934592) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(445120512)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(445120512)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[416@343 mouseUp 20125569 nil]
		focusHolder: 	a MenuMorph(382992384)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	416@343 corner: 432@359
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	416@343 corner: 432@359
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(540540928)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[416@343 mouseUp 20125569 nil]
		targetOffset: 	15@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 20125569 416 343 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(172228608) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[416@343 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(172228608) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[416@343 mouseUp 20125569 nil]
		focusHolder: 	a MenuMorph(382992384)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	416@343 corner: 432@359
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	416@343 corner: 432@359
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(540540928)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[416@343 mouseUp 20125569 nil]
		targetOffset: 	15@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 20125569 416 343 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[416@343 mouseUp 20125569 nil]
		focusHolder: 	a MenuMorph(382992384)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	416@343 corner: 432@359
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	416@343 corner: 432@359
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(540540928)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[416@343 mouseUp 20125569 nil]
		targetOffset: 	15@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 20125569 416 343 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[416@343 mouseUp 20125569 nil]
	Receiver's instance variables: 
		bounds: 	416@343 corner: 432@359
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	416@343 corner: 432@359
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(540540928)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[416@343 mouseUp 20125569 nil]
		targetOffset: 	15@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 20125569 416 343 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil



--- The full stack ---
Band(Object)>>doesNotUnderstand: #,
[:award | self notice: anArtist , ' won: ' , award] in Ceremony>>printAwardsWon:
LinkedList>>do:
Ceremony>>printAwardsWon:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Band>>,
16 January 2012 10:37:50 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

Band(Object)>>doesNotUnderstand: #,
	Receiver: a Band
	Arguments and temporary variables: 
		aMessage: 	, ' won: '
		exception: 	MessageNotUnderstood: Band>>,
		resumeValue: 	nil
	Receiver's instance variables: 
		activeSince: 	1981
		awardsWon: 	a LinkedList(a SoloCategory a SoloCategory)
		artistName: 	'Metallica'
		members: 	a Bag(a Solo a Solo a Solo a Solo)


[:award | self notice: anArtist , ' won: ' , award] in Ceremony>>printAwardsWon:
	Receiver: a Ceremony
	Arguments and temporary variables: 
		anArtist: 	a SoloCategory
		award: 	a Band
	Receiver's instance variables: 
		awards: 	nil
		ceremonyName: 	'MTV Music Awards'


LinkedList>>do:
	Receiver: a LinkedList(a SoloCategory a SoloCategory)
	Arguments and temporary variables: 
		aBlock: 	[:award | self notice: anArtist , ' won: ' , award]
		aLink: 	ValueLink(a SoloCategory)
	Receiver's instance variables: 
		firstLink: 	ValueLink(a SoloCategory)
		lastLink: 	ValueLink(a SoloCategory)


Ceremony>>printAwardsWon:
	Receiver: a Ceremony
	Arguments and temporary variables: 
		anArtist: 	a Band
	Receiver's instance variables: 
		awards: 	nil
		ceremonyName: 	'MTV Music Awards'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		hetfield: 	a Solo
		ulrich: 	a Solo
		hammett: 	a Solo
		trujillo: 	a Solo
		metallica: 	a Band
		mustaine: 	a Solo
		drover: 	a Solo
		broderick: 	a Solo
		ellefson: 	a Solo
		megadeth: 	a Band
		martin: 	a Solo
		fakefigures: 	a Band
		awardBestMaleSinger: 	a SoloCategory
		awardBestNewcomerBand: 	nil
		ceremony: 	a Ceremony
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(479461376)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 799@1234
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 799@1234
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 20200481) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(1066926080)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[374@381 mouseUp 20200801 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	348@367 corner: 485@385
		owner: 	a MenuMorph(1059848192)
		submorphs: 	#()
		fullBounds: 	348@367 corner: 485@385
		color: 	Color black
		extension: 	a MorphExtension (3407872)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(1066926080)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[374@381 mouseUp 20200801 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	348@367 corner: 485@385
		owner: 	a MenuMorph(1059848192)
		submorphs: 	#()
		fullBounds: 	348@367 corner: 485@385
		color: 	Color black
		extension: 	a MorphExtension (3407872)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(1066926080)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[374@381 mouseUp 20200801 nil]
	Receiver's instance variables: 
		bounds: 	348@367 corner: 485@385
		owner: 	a MenuMorph(1059848192)
		submorphs: 	#()
		fullBounds: 	348@367 corner: 485@385
		color: 	Color black
		extension: 	a MorphExtension (3407872)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(1066926080)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[374@381 mouseUp 20200801 nil]
	Receiver's instance variables: 
		bounds: 	348@367 corner: 485@385
		owner: 	a MenuMorph(1059848192)
		submorphs: 	#()
		fullBounds: 	348@367 corner: 485@385
		color: 	Color black
		extension: 	a MorphExtension (3407872)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [374@381 mouseUp 20200801 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(1066926080)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	20200801
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	374@381
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(1066926080)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[374@381 mouseUp 20200801 nil]
	Receiver's instance variables: 
		bounds: 	348@367 corner: 485@385
		owner: 	a MenuMorph(1059848192)
		submorphs: 	#()
		fullBounds: 	348@367 corner: 485@385
		color: 	Color black
		extension: 	a MorphExtension (3407872)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[374@381 mouseUp 20200801 nil]
		aMorph: 	a ToggleMenuItemMorph(1066926080)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[374@381 mouseUp 20200801 nil]
		aMorph: 	a ToggleMenuItemMorph(1066926080)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(1066926080)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[374@381 mouseUp 20200801 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	348@367 corner: 485@385
		owner: 	a MenuMorph(1059848192)
		submorphs: 	#()
		fullBounds: 	348@367 corner: 485@385
		color: 	Color black
		extension: 	a MorphExtension (3407872)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[374@381 mouseUp 20200801 nil]
		aMorph: 	a MenuMorph(1059848192)
		localEvt: 	[374@381 mouseUp 20200801 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(1066926080)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(1066926080)'Do it (d)' a ToggleMenuItemM...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[374@381 mouseUp 20200801 nil]
		aMorph: 	a MenuMorph(1059848192)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(1059848192)
	Arguments and temporary variables: 
		anEvent: 	[374@381 mouseUp 20200801 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	343@362 corner: 490@709
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1066926080)'Do it (d)' a ToggleMenuIt...etc...
		fullBounds: 	343@362 corner: 490@709
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (1048576) [other:  (basicColor -> (Color r: 0.745 g...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(1066926080)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(1066926080)'Do it (d)' a ...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(1059848192)
	Arguments and temporary variables: 
		anEvent: 	[374@381 mouseUp 20200801 nil]
	Receiver's instance variables: 
		bounds: 	343@362 corner: 490@709
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1066926080)'Do it (d)' a ToggleMenuIt...etc...
		fullBounds: 	343@362 corner: 490@709
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (1048576) [other:  (basicColor -> (Color r: 0.745 g...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(1066926080)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(1066926080)'Do it (d)' a ...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(1059848192)
	Arguments and temporary variables: 
		evt: 	[374@381 mouseUp 20200801 nil]
	Receiver's instance variables: 
		bounds: 	343@362 corner: 490@709
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1066926080)'Do it (d)' a ToggleMenuIt...etc...
		fullBounds: 	343@362 corner: 490@709
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (1048576) [other:  (basicColor -> (Color r: 0.745 g...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(1066926080)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(1066926080)'Do it (d)' a ...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[374@381 mouseUp 20200801 nil]
		focusHolder: 	a MenuMorph(1059848192)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	380@355 corner: 396@371
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	380@355 corner: 396@371
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(215482368)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[374@381 380@355 mouseMove 20201041 nil]
		targetOffset: 	26@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 20201041 375 380 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(975962112) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[374@381 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(975962112) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[374@381 mouseUp 20200801 nil]
		focusHolder: 	a MenuMorph(1059848192)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	380@355 corner: 396@371
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	380@355 corner: 396@371
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(215482368)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[374@381 380@355 mouseMove 20201041 nil]
		targetOffset: 	26@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 20201041 375 380 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[374@381 mouseUp 20200801 nil]
		focusHolder: 	a MenuMorph(1059848192)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	380@355 corner: 396@371
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	380@355 corner: 396@371
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(215482368)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[374@381 380@355 mouseMove 20201041 nil]
		targetOffset: 	26@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 20201041 375 380 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[374@381 mouseUp 20200801 nil]
	Receiver's instance variables: 
		bounds: 	380@355 corner: 396@371
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	380@355 corner: 396@371
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(215482368)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[374@381 380@355 mouseMove 20201041 nil]
		targetOffset: 	26@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 20201041 375 380 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil



--- The full stack ---
Band(Object)>>doesNotUnderstand: #,
[:award | self notice: anArtist , ' won: ' , award] in Ceremony>>printAwardsWon:
LinkedList>>do:
Ceremony>>printAwardsWon:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Band>>,
16 January 2012 10:40:07 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

Band(Object)>>doesNotUnderstand: #,
	Receiver: a Band
	Arguments and temporary variables: 
		aMessage: 	, ' won: '
		exception: 	MessageNotUnderstood: Band>>,
		resumeValue: 	nil
	Receiver's instance variables: 
		activeSince: 	1981
		awardsWon: 	a LinkedList()
		artistName: 	'Metallica'
		members: 	a Bag(a Solo a Solo a Solo a Solo)


Ceremony>>printAwardsWon:
	Receiver: a Ceremony
	Arguments and temporary variables: 
		anArtist: 	a Band
	Receiver's instance variables: 
		awards: 	nil
		ceremonyName: 	'MTV Music Awards'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		hetfield: 	a Solo
		ulrich: 	a Solo
		hammett: 	a Solo
		trujillo: 	a Solo
		metallica: 	a Band
		mustaine: 	a Solo
		drover: 	a Solo
		broderick: 	a Solo
		ellefson: 	a Solo
		megadeth: 	a Band
		martin: 	a Solo
		fakefigures: 	a Band
		awardBestMaleSinger: 	a SoloCategory
		awardBestNewcomerBand: 	nil
		ceremony: 	a Ceremony
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(896794624)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 799@1234
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 799@1234
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 20337375) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(941621248)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[430@206 mouseUp 20337319 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	414@196 corner: 551@214
		owner: 	a MenuMorph(934543360)
		submorphs: 	#()
		fullBounds: 	414@196 corner: 551@214
		color: 	Color black
		extension: 	a MorphExtension (951844864)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(941621248)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[430@206 mouseUp 20337319 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	414@196 corner: 551@214
		owner: 	a MenuMorph(934543360)
		submorphs: 	#()
		fullBounds: 	414@196 corner: 551@214
		color: 	Color black
		extension: 	a MorphExtension (951844864)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(941621248)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[430@206 mouseUp 20337319 nil]
	Receiver's instance variables: 
		bounds: 	414@196 corner: 551@214
		owner: 	a MenuMorph(934543360)
		submorphs: 	#()
		fullBounds: 	414@196 corner: 551@214
		color: 	Color black
		extension: 	a MorphExtension (951844864)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(941621248)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[430@206 mouseUp 20337319 nil]
	Receiver's instance variables: 
		bounds: 	414@196 corner: 551@214
		owner: 	a MenuMorph(934543360)
		submorphs: 	#()
		fullBounds: 	414@196 corner: 551@214
		color: 	Color black
		extension: 	a MorphExtension (951844864)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [430@206 mouseUp 20337319 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(941621248)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	20337319
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	430@206
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(941621248)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[430@206 mouseUp 20337319 nil]
	Receiver's instance variables: 
		bounds: 	414@196 corner: 551@214
		owner: 	a MenuMorph(934543360)
		submorphs: 	#()
		fullBounds: 	414@196 corner: 551@214
		color: 	Color black
		extension: 	a MorphExtension (951844864)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[430@206 mouseUp 20337319 nil]
		aMorph: 	a ToggleMenuItemMorph(941621248)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[430@206 mouseUp 20337319 nil]
		aMorph: 	a ToggleMenuItemMorph(941621248)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(941621248)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[430@206 mouseUp 20337319 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	414@196 corner: 551@214
		owner: 	a MenuMorph(934543360)
		submorphs: 	#()
		fullBounds: 	414@196 corner: 551@214
		color: 	Color black
		extension: 	a MorphExtension (951844864)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[430@206 mouseUp 20337319 nil]
		aMorph: 	a MenuMorph(934543360)
		localEvt: 	[430@206 mouseUp 20337319 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(941621248)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(941621248)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[430@206 mouseUp 20337319 nil]
		aMorph: 	a MenuMorph(934543360)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(934543360)
	Arguments and temporary variables: 
		anEvent: 	[430@206 mouseUp 20337319 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	409@191 corner: 556@538
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(941621248)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	409@191 corner: 556@538
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (949485568) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(941621248)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(941621248)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(934543360)
	Arguments and temporary variables: 
		anEvent: 	[430@206 mouseUp 20337319 nil]
	Receiver's instance variables: 
		bounds: 	409@191 corner: 556@538
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(941621248)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	409@191 corner: 556@538
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (949485568) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(941621248)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(941621248)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(934543360)
	Arguments and temporary variables: 
		evt: 	[430@206 mouseUp 20337319 nil]
	Receiver's instance variables: 
		bounds: 	409@191 corner: 556@538
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(941621248)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	409@191 corner: 556@538
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (949485568) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(941621248)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(941621248)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[430@206 mouseUp 20337319 nil]
		focusHolder: 	a MenuMorph(934543360)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	351@265 corner: 367@281
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	351@265 corner: 367@281
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1055391744)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[430@206 351@265 mouseMove 20338257 nil]
		targetOffset: 	16@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 20338257 430 207 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(742129664) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[430@206 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(742129664) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[430@206 mouseUp 20337319 nil]
		focusHolder: 	a MenuMorph(934543360)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	351@265 corner: 367@281
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	351@265 corner: 367@281
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1055391744)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[430@206 351@265 mouseMove 20338257 nil]
		targetOffset: 	16@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 20338257 430 207 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[430@206 mouseUp 20337319 nil]
		focusHolder: 	a MenuMorph(934543360)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	351@265 corner: 367@281
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	351@265 corner: 367@281
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1055391744)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[430@206 351@265 mouseMove 20338257 nil]
		targetOffset: 	16@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 20338257 430 207 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[430@206 mouseUp 20337319 nil]
	Receiver's instance variables: 
		bounds: 	351@265 corner: 367@281
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	351@265 corner: 367@281
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1055391744)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[430@206 351@265 mouseMove 20338257 nil]
		targetOffset: 	16@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 20338257 430 207 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[430@206 mouseUp 20337319 nil]
		evt: 	[430@206 mouseUp 20337319 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	351@265 corner: 367@281
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	351@265 corner: 367@281
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1055391744)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[430@206 351@265 mouseMove 20338257 nil]
		targetOffset: 	16@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 20338257 430 207 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[430@206 mouseUp 20337319 nil]
		evtBuf: 	#(1 20337319 430 206 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	351@265 corner: 367@281
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	351@265 corner: 367@281
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1055391744)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[430@206 351@265 mouseMove 20338257 nil]
		targetOffset: 	16@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 20338257 430 207 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil



--- The full stack ---
Band(Object)>>doesNotUnderstand: #,
Ceremony>>printAwardsWon:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Band>>,
16 January 2012 10:40:48 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

Band(Object)>>doesNotUnderstand: #,
	Receiver: a Band
	Arguments and temporary variables: 
		aMessage: 	, ' won '
		exception: 	MessageNotUnderstood: Band>>,
		resumeValue: 	nil
	Receiver's instance variables: 
		activeSince: 	1981
		awardsWon: 	a LinkedList()
		artistName: 	'Metallica'
		members: 	a Bag(a Solo a Solo a Solo a Solo)


Ceremony>>printAwardsWon:
	Receiver: a Ceremony
	Arguments and temporary variables: 
		anArtist: 	a Band
	Receiver's instance variables: 
		awards: 	nil
		ceremonyName: 	'MTV Music Awards'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		hetfield: 	a Solo
		ulrich: 	a Solo
		hammett: 	a Solo
		trujillo: 	a Solo
		metallica: 	a Band
		mustaine: 	a Solo
		drover: 	a Solo
		broderick: 	a Solo
		ellefson: 	a Solo
		megadeth: 	a Band
		martin: 	a Solo
		fakefigures: 	a Band
		awardBestMaleSinger: 	a SoloCategory
		awardBestNewcomerBand: 	nil
		ceremony: 	a Ceremony
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(171442176)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 799@1234
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 799@1234
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 20378871) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(242483200)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[387@301 mouseUp 20378775 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	382@291 corner: 519@309
		owner: 	a MenuMorph(235405312)
		submorphs: 	#()
		fullBounds: 	382@291 corner: 519@309
		color: 	Color black
		extension: 	a MorphExtension (252706816)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(242483200)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[387@301 mouseUp 20378775 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	382@291 corner: 519@309
		owner: 	a MenuMorph(235405312)
		submorphs: 	#()
		fullBounds: 	382@291 corner: 519@309
		color: 	Color black
		extension: 	a MorphExtension (252706816)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(242483200)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[387@301 mouseUp 20378775 nil]
	Receiver's instance variables: 
		bounds: 	382@291 corner: 519@309
		owner: 	a MenuMorph(235405312)
		submorphs: 	#()
		fullBounds: 	382@291 corner: 519@309
		color: 	Color black
		extension: 	a MorphExtension (252706816)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(242483200)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[387@301 mouseUp 20378775 nil]
	Receiver's instance variables: 
		bounds: 	382@291 corner: 519@309
		owner: 	a MenuMorph(235405312)
		submorphs: 	#()
		fullBounds: 	382@291 corner: 519@309
		color: 	Color black
		extension: 	a MorphExtension (252706816)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [387@301 mouseUp 20378775 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(242483200)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	20378775
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	387@301
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(242483200)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[387@301 mouseUp 20378775 nil]
	Receiver's instance variables: 
		bounds: 	382@291 corner: 519@309
		owner: 	a MenuMorph(235405312)
		submorphs: 	#()
		fullBounds: 	382@291 corner: 519@309
		color: 	Color black
		extension: 	a MorphExtension (252706816)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[387@301 mouseUp 20378775 nil]
		aMorph: 	a ToggleMenuItemMorph(242483200)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[387@301 mouseUp 20378775 nil]
		aMorph: 	a ToggleMenuItemMorph(242483200)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(242483200)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[387@301 mouseUp 20378775 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	382@291 corner: 519@309
		owner: 	a MenuMorph(235405312)
		submorphs: 	#()
		fullBounds: 	382@291 corner: 519@309
		color: 	Color black
		extension: 	a MorphExtension (252706816)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[387@301 mouseUp 20378775 nil]
		aMorph: 	a MenuMorph(235405312)
		localEvt: 	[387@301 mouseUp 20378775 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(242483200)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(242483200)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[387@301 mouseUp 20378775 nil]
		aMorph: 	a MenuMorph(235405312)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(235405312)
	Arguments and temporary variables: 
		anEvent: 	[387@301 mouseUp 20378775 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	377@286 corner: 524@633
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(242483200)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	377@286 corner: 524@633
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (250347520) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(242483200)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(242483200)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(235405312)
	Arguments and temporary variables: 
		anEvent: 	[387@301 mouseUp 20378775 nil]
	Receiver's instance variables: 
		bounds: 	377@286 corner: 524@633
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(242483200)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	377@286 corner: 524@633
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (250347520) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(242483200)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(242483200)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(235405312)
	Arguments and temporary variables: 
		evt: 	[387@301 mouseUp 20378775 nil]
	Receiver's instance variables: 
		bounds: 	377@286 corner: 524@633
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(242483200)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	377@286 corner: 524@633
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (250347520) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(242483200)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(242483200)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[387@301 mouseUp 20378775 nil]
		focusHolder: 	a MenuMorph(235405312)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	387@301 corner: 403@317
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	387@301 corner: 403@317
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(429654016)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[387@301 mouseUp 20378775 nil]
		targetOffset: 	5@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 20378775 387 301 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(61341696) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[387@301 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(61341696) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[387@301 mouseUp 20378775 nil]
		focusHolder: 	a MenuMorph(235405312)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	387@301 corner: 403@317
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	387@301 corner: 403@317
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(429654016)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[387@301 mouseUp 20378775 nil]
		targetOffset: 	5@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 20378775 387 301 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[387@301 mouseUp 20378775 nil]
		focusHolder: 	a MenuMorph(235405312)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	387@301 corner: 403@317
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	387@301 corner: 403@317
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(429654016)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[387@301 mouseUp 20378775 nil]
		targetOffset: 	5@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 20378775 387 301 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[387@301 mouseUp 20378775 nil]
	Receiver's instance variables: 
		bounds: 	387@301 corner: 403@317
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	387@301 corner: 403@317
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(429654016)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[387@301 mouseUp 20378775 nil]
		targetOffset: 	5@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 20378775 387 301 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[387@301 mouseUp 20378775 nil]
		evt: 	[387@301 mouseUp 20378775 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	387@301 corner: 403@317
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	387@301 corner: 403@317
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(429654016)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[387@301 mouseUp 20378775 nil]
		targetOffset: 	5@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 20378775 387 301 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[387@301 mouseUp 20378775 nil]
		evtBuf: 	#(1 20378775 387 301 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	387@301 corner: 403@317
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	387@301 corner: 403@317
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(429654016)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[387@301 mouseUp 20378775 nil]
		targetOffset: 	5@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 20378775 387 301 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil



--- The full stack ---
Band(Object)>>doesNotUnderstand: #,
Ceremony>>printAwardsWon:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Band>>,
16 January 2012 10:40:53 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

Band(Object)>>doesNotUnderstand: #,
	Receiver: a Band
	Arguments and temporary variables: 
		aMessage: 	, ' won '
		exception: 	MessageNotUnderstood: Band>>,
		resumeValue: 	nil
	Receiver's instance variables: 
		activeSince: 	1981
		awardsWon: 	a LinkedList()
		artistName: 	'Metallica'
		members: 	a Bag(a Solo a Solo a Solo a Solo)


Ceremony>>printAwardsWon:
	Receiver: a Ceremony
	Arguments and temporary variables: 
		anArtist: 	a Band
	Receiver's instance variables: 
		awards: 	nil
		ceremonyName: 	'MTV Music Awards'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		clement: 	a Solo
		sylvain: 	a Solo
		cpex: 	a Band
		hetfield: 	a Solo
		ulrich: 	a Solo
		hammett: 	a Solo
		trujillo: 	a Solo
		metallica: 	a Band
		mustaine: 	a Solo
		drover: 	a Solo
		broderick: 	a Solo
		ellefson: 	a Solo
		megadeth: 	a Band
		martin: 	a Solo
		fakefigures: 	a Band
		awardBestMaleSinger: 	a SoloCategory
		awardBestNewcomerBand: 	nil
		ceremony: 	a Ceremony
		test: 	nil
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(758906880)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"creation of the members and the band CPEX"
	| clement sylvai...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(1069547520)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '| clement sylvain cpex hetfield ulrich hammett...etc...
		requestor: 	a TextMorphForEditView(758906880)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(758906880)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(758906880)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 799@1234
		owner: 	a TransformMorph(856686592)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 799@1234
		color: 	Color black
		extension: 	a MorphExtension (839122944) [other:  (blinkStart -> 20384149) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo metal...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(803471360)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(803471360)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	244@46 corner: 1064@659
		owner: 	a SystemWindow(469499904)
		submorphs: 	an Array(a ScrollBar(830996480) a TransformMorph(856686592))
		fullBounds: 	244@46 corner: 1064@659
		color: 	Color white
		extension: 	a MorphExtension (737673216) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(830996480)
		scroller: 	a TransformMorph(856686592)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(853278720)
		textMorph: 	a TextMorphForEditView(758906880)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 3436)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(803471360)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(469499904) a PluggableTextMorph(80...etc...
		contents: 	a Text for '| clement sylvain cpex hetfield ulrich hammett trujillo m...etc...
		bindings: 	a Dictionary('a'->a Band 'awardBestBand'->nil 'awardBestNewcomerBand'...etc...
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	'POOL_script.ws'
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(609222656)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[480@241 mouseUp 20384105 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	472@231 corner: 609@249
		owner: 	a MenuMorph(602144768)
		submorphs: 	#()
		fullBounds: 	472@231 corner: 609@249
		color: 	Color black
		extension: 	a MorphExtension (619446272)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(609222656)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[480@241 mouseUp 20384105 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	472@231 corner: 609@249
		owner: 	a MenuMorph(602144768)
		submorphs: 	#()
		fullBounds: 	472@231 corner: 609@249
		color: 	Color black
		extension: 	a MorphExtension (619446272)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(609222656)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[480@241 mouseUp 20384105 nil]
	Receiver's instance variables: 
		bounds: 	472@231 corner: 609@249
		owner: 	a MenuMorph(602144768)
		submorphs: 	#()
		fullBounds: 	472@231 corner: 609@249
		color: 	Color black
		extension: 	a MorphExtension (619446272)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(609222656)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[480@241 mouseUp 20384105 nil]
	Receiver's instance variables: 
		bounds: 	472@231 corner: 609@249
		owner: 	a MenuMorph(602144768)
		submorphs: 	#()
		fullBounds: 	472@231 corner: 609@249
		color: 	Color black
		extension: 	a MorphExtension (619446272)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [480@241 mouseUp 20384105 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(609222656)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	20384105
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	480@241
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(609222656)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[480@241 mouseUp 20384105 nil]
	Receiver's instance variables: 
		bounds: 	472@231 corner: 609@249
		owner: 	a MenuMorph(602144768)
		submorphs: 	#()
		fullBounds: 	472@231 corner: 609@249
		color: 	Color black
		extension: 	a MorphExtension (619446272)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[480@241 mouseUp 20384105 nil]
		aMorph: 	a ToggleMenuItemMorph(609222656)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[480@241 mouseUp 20384105 nil]
		aMorph: 	a ToggleMenuItemMorph(609222656)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(609222656)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[480@241 mouseUp 20384105 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	472@231 corner: 609@249
		owner: 	a MenuMorph(602144768)
		submorphs: 	#()
		fullBounds: 	472@231 corner: 609@249
		color: 	Color black
		extension: 	a MorphExtension (619446272)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(803471360))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[480@241 mouseUp 20384105 nil]
		aMorph: 	a MenuMorph(602144768)
		localEvt: 	[480@241 mouseUp 20384105 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(609222656)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(609222656)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[480@241 mouseUp 20384105 nil]
		aMorph: 	a MenuMorph(602144768)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(602144768)
	Arguments and temporary variables: 
		anEvent: 	[480@241 mouseUp 20384105 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	467@226 corner: 614@573
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(609222656)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	467@226 corner: 614@573
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (617086976) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(609222656)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(609222656)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(602144768)
	Arguments and temporary variables: 
		anEvent: 	[480@241 mouseUp 20384105 nil]
	Receiver's instance variables: 
		bounds: 	467@226 corner: 614@573
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(609222656)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	467@226 corner: 614@573
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (617086976) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(609222656)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(609222656)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(602144768)
	Arguments and temporary variables: 
		evt: 	[480@241 mouseUp 20384105 nil]
	Receiver's instance variables: 
		bounds: 	467@226 corner: 614@573
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(609222656)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	467@226 corner: 614@573
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (617086976) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(609222656)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(609222656)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[480@241 mouseUp 20384105 nil]
		focusHolder: 	a MenuMorph(602144768)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	458@221 corner: 474@237
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	458@221 corner: 474@237
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(642252800)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[480@241 458@221 mouseMove 20384509 nil]
		targetOffset: 	8@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 20384509 480 242 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(273940480) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[480@241 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@727
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(273940480) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[480@241 mouseUp 20384105 nil]
		focusHolder: 	a MenuMorph(602144768)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	458@221 corner: 474@237
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	458@221 corner: 474@237
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(642252800)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[480@241 458@221 mouseMove 20384509 nil]
		targetOffset: 	8@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 20384509 480 242 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[480@241 mouseUp 20384105 nil]
		focusHolder: 	a MenuMorph(602144768)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	458@221 corner: 474@237
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	458@221 corner: 474@237
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(642252800)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[480@241 458@221 mouseMove 20384509 nil]
		targetOffset: 	8@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 20384509 480 242 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[480@241 mouseUp 20384105 nil]
	Receiver's instance variables: 
		bounds: 	458@221 corner: 474@237
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	458@221 corner: 474@237
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(642252800)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[480@241 458@221 mouseMove 20384509 nil]
		targetOffset: 	8@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 20384509 480 242 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[480@241 mouseUp 20384105 nil]
		evt: 	[480@241 mouseUp 20384105 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	458@221 corner: 474@237
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	458@221 corner: 474@237
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(642252800)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[480@241 458@221 mouseMove 20384509 nil]
		targetOffset: 	8@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 20384509 480 242 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[480@241 mouseUp 20384105 nil]
		evtBuf: 	#(1 20384105 480 241 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	458@221 corner: 474@237
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	458@221 corner: 474@237
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(642252800)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[480@241 458@221 mouseMove 20384509 nil]
		targetOffset: 	8@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 20384509 480 242 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil



--- The full stack ---
Band(Object)>>doesNotUnderstand: #,
Ceremony>>printAwardsWon:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

